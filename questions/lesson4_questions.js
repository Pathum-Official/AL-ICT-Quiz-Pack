export const originalQuestions = [
    {
        questionText: "තාර්කික ද්වාරයක් යනු කුමක්ද?",
        options: [
            "ආදාන සංඥා එකක් හෝ කිහිපයක් මත පදනම්ව තනි ප්‍රතිදාන සංඥාවක් නිපදවන මූලික අංකිත පරිපථයකි.",
            "ඇනලොග් සංඥා ඩිජිටල් සංඥා බවට පරිවර්තනය කරන උපාංගයකි.",
            "විද්‍යුත් ධාරාව පාලනය කිරීම සඳහා භාවිතා කරන ප්‍රතිරෝධකයකි.",
            "දත්ත ගබඩා කිරීම සඳහා භාවිතා කරන මතක ඒකකයකි.",
            "තොරතුරු සම්ප්‍රේෂණය කරන සන්නිවේදන මාර්ගයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කික ද්වාරයක් යනු අංකිත ඉලෙක්ට්‍රොනික්ස් වල මූලික තැනුම් ඒකකයකි. එයට ආදාන සංඥා එකක් හෝ කිහිපයක් ලැබෙන අතර, එම ආදානවල තර්කනය අනුව (Boolean Logic) එක් ප්‍රතිදාන සංඥාවක් නිපදවයි. මෙම ප්‍රතිදානය 'සත්‍ය' (1) හෝ 'අසත්‍ය' (0) යන ද්විමය අවස්ථා දෙකෙන් එකක් ගනී."
    },
    {
        questionText: "NOT ද්වාරයක ක්‍රියාකාරීත්වය නිවැරදිව විස්තර කරන්නේ කුමක්ද?",
        options: [
            "එය එහි ආදානයේ තාර්කික ප්‍රතිලෝමය නිපදවයි.",
            "එය ආදාන දෙකක් සත්‍ය නම් පමණක් ප්‍රතිදානය සත්‍ය කරයි.",
            "එය ආදාන දෙකෙන් එකක් හෝ දෙකම සත්‍ය නම් ප්‍රතිදානය සත්‍ය කරයි.",
            "එය ආදාන දෙක එකිනෙකට වෙනස් නම් පමණක් ප්‍රතිදානය සත්‍ය කරයි.",
            "එය ආදාන දෙකම අසත්‍ය නම් පමණක් ප්‍රතිදානය සත්‍ය කරයි."
        ],
        correctAnswerIndex: 0,
        explanation: "NOT ද්වාරය, ප්‍රතිලෝම ද්වාරය (Inverter) ලෙසද හැඳින්වේ. එයට ඇත්තේ එක් ආදානයක් සහ එක් ප්‍රතිදානයක් පමණි. ආදානය 0 (අසත්‍ය) නම්, ප්‍රතිදානය 1 (සත්‍ය) වේ. ආදානය 1 (සත්‍ය) නම්, ප්‍රතිදානය 0 (අසත්‍ය) වේ. එනම්, එය ආදානයේ තාර්කික ප්‍රතිලෝමය නිපදවයි."
    },
    {
        questionText: "AND ද්වාරයක සත්‍යතා වගුවට අනුව, ප්‍රතිදානය 1 (සත්‍ය) වන්නේ කුමන අවස්ථාවේදීද?",
        options: [
            "සියලුම ආදාන 1 (සත්‍ය) වන විට පමණි.",
            "ඕනෑම එක් ආදානයක් 1 (සත්‍ය) වන විට.",
            "ආදාන දෙකම 0 (අසත්‍ය) වන විට.",
            "ආදාන එකිනෙකට වෙනස් වන විට.",
            "පළමු ආදානය 1 වන විට පමණි."
        ],
        correctAnswerIndex: 0,
        explanation: "AND ද්වාරය 'තාර්කික ගුණ කිරීම' ලෙස ක්‍රියා කරයි. එහි ප්‍රතිදානය 1 (සත්‍ය) වන්නේ එහි සියලුම ආදාන 1 (සත්‍ය) වූ විට පමණි. වෙනත් ඕනෑම අවස්ථාවක ප්‍රතිදානය 0 (අසත්‍ය) වේ."
    },
    {
        questionText: "OR ද්වාරයක සත්‍යතා වගුවට අනුව, ප්‍රතිදානය 0 (අසත්‍ය) වන්නේ කුමන අවස්ථාවේදීද?",
        options: [
            "සියලුම ආදාන 0 (අසත්‍ය) වන විට පමණි.",
            "ඕනෑම එක් ආදානයක් 0 (අසත්‍ය) වන විට.",
            "ආදාන දෙකම 1 (සත්‍ය) වන විට.",
            "ආදාන එකිනෙකට වෙනස් වන විට.",
            "පළමු ආදානය 0 වන විට පමණි."
        ],
        correctAnswerIndex: 0,
        explanation: "OR ද්වාරය 'තාර්කික එකතු කිරීම' ලෙස ක්‍රියා කරයි. එහි ප්‍රතිදානය 0 (අසත්‍ය) වන්නේ එහි සියලුම ආදාන 0 (අසත්‍ය) වූ විට පමණි. ආදානවලින් එකක් හෝ වැඩි ගණනක් 1 (සත්‍ය) නම්, ප්‍රතිදානය 1 (සත්‍ය) වේ."
    },
    {
        questionText: "XOR ද්වාරය 'විශේෂිත OR' ද්වාරය ලෙස හැඳින්වේ. එහි ප්‍රතිදානය 1 (සත්‍ය) වන්නේ කුමන අවස්ථාවේදීද?",
        options: [
            "ආදාන දෙක එකිනෙකට වෙනස් තාර්කික අගයක් ගන්නා විට (එකක් 0, අනෙක 1).",
            "ආදාන දෙකම 1 (සත්‍ය) වන විට.",
            "ආදාන දෙකම 0 (අසත්‍ය) වන විට.",
            "ඕනෑම එක් ආදානයක් 1 (සත්‍ය) වන විට.",
            "ආදාන දෙකම එකම තාර්කික අගයක් ගන්නා විට."
        ],
        correctAnswerIndex: 0,
        explanation: "XOR (Exclusive-OR) ද්වාරයේ ප්‍රතිදානය සත්‍ය වන්නේ එහි ආදානවල අගයන් එකිනෙකට වෙනස් වූ විට පමණි. එනම්, ආදාන A සහ B සඳහා, A=0, B=1 හෝ A=1, B=0 වන විට ප්‍රතිදානය 1 වේ. ආදාන දෙකම එකම අගයක් (0,0 හෝ 1,1) ගන්නා විට ප්‍රතිදානය 0 වේ."
    },
    {
        questionText: "NAND ද්වාරයක් යනු කුමක්ද?",
        options: [
            "AND ද්වාරයක ප්‍රතිදානය ප්‍රතිලෝම කරන ලද ද්වාරයකි.",
            "OR ද්වාරයක ප්‍රතිදානය ප්‍රතිලෝම කරන ලද ද්වාරයකි.",
            "XOR ද්වාරයක ප්‍රතිදානය ප්‍රතිලෝම කරන ලද ද්වාරයකි.",
            "NOT ද්වාරයක ප්‍රතිදානය ප්‍රතිලෝම කරන ලද ද්වාරයකි.",
            "XNOR ද්වාරයක ප්‍රතිදානය ප්‍රතිලෝම කරන ලද ද්වාරයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "NAND ද්වාරය යනු AND ද්වාරයකින් පසුව NOT ද්වාරයක් සම්බන්ධ කිරීමෙන් සෑදුණු ඒකාබද්ධ ද්වාරයකි. එහි ප්‍රතිදානය AND ද්වාරයේ ප්‍රතිදානයේ ප්‍රතිලෝමය වේ."
    },
    {
        questionText: "NOR ද්වාරයක් යනු කුමක්ද?",
        options: [
            "OR ද්වාරයක ප්‍රතිදානය ප්‍රතිලෝම කරන ලද ද්වාරයකි.",
            "AND ද්වාරයක ප්‍රතිදානය ප්‍රතිලෝම කරන ලද ද්වාරයකි.",
            "XOR ද්වාරයක ප්‍රතිදානය ප්‍රතිලෝම කරන ලද ද්වාරයකි.",
            "NOT ද්වාරයක ප්‍රතිදානය ප්‍රතිලෝම කරන ලද ද්වාරයකි.",
            "XNOR ද්වාරයක ප්‍රතිදානය ප්‍රතිලෝම කරන ලද ද්වාරයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "NOR ද්වාරය යනු OR ද්වාරයකින් පසුව NOT ද්වාරයක් සම්බන්ධ කිරීමෙන් සෑදුණු ඒකාබද්ධ ද්වාරයකි. එහි ප්‍රතිදානය OR ද්වාරයේ ප්‍රතිදානයේ ප්‍රතිලෝමය වේ."
    },
    {
        questionText: "NAND සහ NOR ද්වාර 'සාර්ව ද්වාර' ලෙස හඳුන්වන්නේ ඇයි?",
        options: [
            "මූලික ද්වාර (AND, OR, NOT) ඇතුළු ඕනෑම තාර්කික ද්වාරයක් නිර්මාණය කිරීමට ඒවා පමණක් භාවිතා කළ හැකි බැවිනි.",
            "ඒවාට ආදාන විශාල ප්‍රමාණයක් හැසිරවිය හැකි බැවිනි.",
            "ඒවා වඩාත් වේගවත් වන බැවිනි.",
            "ඒවාට අඩු බලයක් අවශ්‍ය වන බැවිනි.",
            "ඒවා සියලුම අංකිත පරිපථවල භාවිතා වන බැවිනි."
        ],
        correctAnswerIndex: 0,
        explanation: "NAND සහ NOR ද්වාර 'සාර්ව ද්වාර' (Universal Gates) ලෙස හඳුන්වන්නේ වෙනත් කිසිදු ද්වාර වර්ගයක් භාවිතා නොකර, මෙම ද්වාර පමණක් උපයෝගී කරගෙන ඕනෑම ආකාරයක තාර්කික පරිපථයක් (මූලික ද්වාර ඇතුළුව) නිර්මාණය කළ හැකි බැවිනි."
    },
    {
        questionText: "NAND ද්වාර භාවිතයෙන් NOT ද්වාරයක් නිර්මාණය කරන්නේ කෙසේද?",
        options: [
            "NAND ද්වාරයක ආදාන දෙකම එකට සම්බන්ධ කිරීමෙන්.",
            "NAND ද්වාර දෙකක් ශ්‍රේණිගතව සම්බන්ධ කිරීමෙන්.",
            "NAND ද්වාර දෙකක් සමාන්තරව සම්බන්ධ කිරීමෙන්.",
            "NAND ද්වාරයක එක් ආදානයක් පමණක් භාවිතා කිරීමෙන්.",
            "NAND ද්වාරයක ප්‍රතිදානය එහි ආදානයට සම්බන්ධ කිරීමෙන්."
        ],
        correctAnswerIndex: 0,
        explanation: "NAND ද්වාරයක් NOT ද්වාරයක් ලෙස ක්‍රියා කරවීමට, එහි ආදාන දෙකම එකට සම්බන්ධ කර තනි ආදානයක් ලෙස භාවිතා කරයි. එවිට, ආදානය 0 නම්, ප්‍රතිදානය 1 වන අතර, ආදානය 1 නම්, ප්‍රතිදානය 0 වේ."
    },
    {
        questionText: "පහත දැක්වෙන සංකේතය කුමන ද්වාරයට අයත්ද? (ත්‍රිකෝණයක් ඉදිරියෙන් කුඩා කවයක් සහිත සංකේතය)",
        options: [
            "NOT ද්වාරය",
            "AND ද්වාරය",
            "OR ද්වාරය",
            "NAND ද්වාරය",
            "NOR ද්වාරය"
        ],
        correctAnswerIndex: 0,
        explanation: "ත්‍රිකෝණයක් ඉදිරියෙන් ඇති කුඩා කවය ප්‍රතිලෝමය (inversion) දක්වන අතර, මෙම සංකේතය NOT ද්වාරය සඳහා භාවිතා වේ."
    },
    {
        questionText: "XNOR ද්වාරයක ප්‍රතිදානය 0 (අසත්‍ය) වන්නේ කුමන අවස්ථාවේදීද?",
        options: [
            "ආදාන දෙක එකිනෙකට වෙනස් තාර්කික අගයක් ගන්නා විට.",
            "ආදාන දෙකම 1 (සත්‍ය) වන විට.",
            "ආදාන දෙකම 0 (අසත්‍ය) වන විට.",
            "ඕනෑම එක් ආදානයක් 1 (සත්‍ය) වන විට.",
            "සියලුම ආදාන 1 වන විට පමණි."
        ],
        correctAnswerIndex: 0,
        explanation: "XNOR (Exclusive-NOR) ද්වාරය යනු XOR ද්වාරයේ ප්‍රතිලෝමයයි. එහි ප්‍රතිදානය 0 (අසත්‍ය) වන්නේ එහි ආදානවල අගයන් එකිනෙකට වෙනස් වූ විට පමණි (එකක් 0, අනෙක 1). ආදාන දෙකම එකම අගයක් (0,0 හෝ 1,1) ගන්නා විට ප්‍රතිදානය 1 වේ."
    },
    {
        questionText: "තාර්කික ද්වාරයක 'සත්‍යතා වගුව' (Truth Table) යනු කුමක්ද?",
        options: [
            "සියලුම හැකි ආදාන සංයෝජන සඳහා ද්වාරයක ප්‍රතිදාන අගයන් පෙන්වන වගුවකි.",
            "ද්වාරය නිර්මාණය කිරීමට භාවිතා කරන ද්‍රව්‍ය ලැයිස්තුවකි.",
            "ද්වාරය ක්‍රියාත්මක කිරීමට අවශ්‍ය බල ප්‍රමාණය පෙන්වන වගුවකි.",
            "ද්වාරයේ භෞතික මානයන් දක්වන වගුවකි.",
            "ද්වාරයෙහි දෝෂ නිවැරදි කිරීම සඳහා වන උපදෙස් ඇතුළත් ලේඛනයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "සත්‍යතා වගුවක් යනු තාර්කික ද්වාරයක ක්‍රියාකාරීත්වය විස්තර කරන ගණිතමය වගුවකි. එය ද්වාරයට තිබිය හැකි සියලුම ආදාන සංයෝජන සහ ඒ සෑම සංයෝජනයක් සඳහාම අදාළ ප්‍රතිදාන අගය (0 හෝ 1) පෙන්වයි."
    },
    {
        questionText: "තුන්-ආදාන OR ද්වාරයක ප්‍රතිදානය 0 (අසත්‍ය) වන්නේ කුමන අවස්ථාවේදීද?",
        options: [
            "සියලුම ආදාන 0 (අසත්‍ය) වන විට පමණි.",
            "එක් ආදානයක් 1 (සත්‍ය) වන විට.",
            "ආදාන දෙකක් 1 (සත්‍ය) වන විට.",
            "ආදාන තුනම 1 (සත්‍ය) වන විට.",
            "ඕනෑම එක් ආදානයක් 0 (අසත්‍ය) වන විට."
        ],
        correctAnswerIndex: 0,
        explanation: "OR ද්වාරයක ප්‍රතිදානය 0 වන්නේ එහි සියලුම ආදාන 0 වන විට පමණි. ආදාන කීයක් තිබුණත්, එක ආදානයක් හෝ 1 නම්, ප්‍රතිදානය 1 වේ."
    },
    {
        questionText: "NOR ද්වාර භාවිතයෙන් AND ද්වාරයක් නිර්මාණය කිරීමේදී අදියර කීයක් අවශ්‍ය වේද?",
        options: [
            "තුනක් (3)",
            "දෙකක් (2)",
            "එකක් (1)",
            "හතරක් (4)",
            "පහක් (5)"
        ],
        correctAnswerIndex: 0,
        explanation: "NOR ද්වාර භාවිතයෙන් AND ද්වාරයක් නිර්මාණය කිරීමට NOR ද්වාර තුනක් අවශ්‍ය වේ. පළමුව, ආදාන දෙක NOR ද්වාර දෙකකට වෙන වෙනම යවා ප්‍රතිලෝම කරයි. ඉන්පසු, එම ප්‍රතිදාන තෙවන NOR ද්වාරයකට යවා අවසන් ප්‍රතිදානය ලැබේ (De Morgan's Theorem අනුව: A.B = NOT ( NOT A + NOT B ))."
    },
    {
        questionText: "තාර්කික ප්‍රකාශනයක් NOT A යනු කුමන ද්වාරයක ප්‍රතිදානයද?",
        options: [
            "NOT ද්වාරය",
            "AND ද්වාරය",
            "OR ද්වාරය",
            "NAND ද්වාරය",
            "NOR ද්වාරය"
        ],
        correctAnswerIndex: 0,
        explanation: "NOT A (A හි ප්‍රතිලෝමය) යන්නෙන් දැක්වෙන්නේ A හි ප්‍රතිලෝමයයි. මෙය NOT ද්වාරයක ක්‍රියාකාරීත්වය වේ. A ආදානයක් ලෙස ලබා දෙන විට, NOT ද්වාරයේ ප්‍රතිදානය NOT A වේ."
    },
    {
        questionText: "පහත ප්‍රකාශනය සඳහා සත්‍යතා වගුවක් නිර්මාණය කිරීමේදී (A, B ආදාන ලෙස) ප්‍රතිදානය 1 වන්නේ කුමන අවස්ථා වලදීද? A AND B",
        options: [
            "A=1, B=1",
            "A=0, B=0",
            "A=0, B=1",
            "A=1, B=0",
            "සියලුම අවස්ථා වලදී."
        ],
        correctAnswerIndex: 0,
        explanation: "A AND B යනු AND මෙහෙයුමයි. AND ද්වාරයක ප්‍රතිදානය 1 වන්නේ සියලුම ආදාන 1 වූ විට පමණි. එබැවින්, A=1 සහ B=1 වන විට පමණක් ප්‍රතිදානය 1 වේ."
    },
    {
        questionText: "පහත ප්‍රකාශනය සඳහා සත්‍යතා වගුවක් නිර්මාණය කිරීමේදී (A, B ආදාන ලෙස) ප්‍රතිදානය 0 වන්නේ කුමන අවස්ථා වලදීද? A OR B",
        options: [
            "A=0, B=0",
            "A=1, B=1",
            "A=0, B=1",
            "A=1, B=0",
            "කිසිම අවස්ථාවක."
        ],
        correctAnswerIndex: 0,
        explanation: "A OR B යනු OR මෙහෙයුමයි. OR ද්වාරයක ප්‍රතිදානය 0 වන්නේ සියලුම ආදාන 0 වූ විට පමණි. එබැවින්, A=0 සහ B=0 වන විට පමණක් ප්‍රතිදානය 0 වේ."
    },
    {
        questionText: "පහත ප්‍රකාශනය සඳහා සත්‍යතා වගුවක් නිර්මාණය කිරීමේදී (A, B ආදාන ලෙස) ප්‍රතිදානය 1 වන්නේ කුමන අවස්ථා වලදීද? A XOR B",
        options: [
            "A=0, B=1 සහ A=1, B=0",
            "A=0, B=0 සහ A=1, B=1",
            "A=1, B=1 පමණක්",
            "A=0, B=0 පමණක්",
            "සියලුම අවස්ථා වලදී."
        ],
        correctAnswerIndex: 0,
        explanation: "A XOR B යනු XOR මෙහෙයුමයි. XOR ද්වාරයක ප්‍රතිදානය 1 වන්නේ එහි ආදාන එකිනෙකට වෙනස් වූ විට පමණි. එබැවින්, A=0, B=1 සහ A=1, B=0 වන විට ප්‍රතිදානය 1 වේ."
    },
    {
        questionText: "පහත ප්‍රකාශනය සඳහා සත්‍යතා වගුවක් නිර්මාණය කිරීමේදී (A, B ආදාන ලෙස) ප්‍රතිදානය 0 වන්නේ කුමන අවස්ථා වලදීද? NOT (A AND B)",
        options: [
            "A=1, B=1",
            "A=0, B=0",
            "A=0, B=1",
            "A=1, B=0",
            "කිසිම අවස්ථාවක."
        ],
        correctAnswerIndex: 0,
        explanation: "NOT (A AND B) යනු NAND මෙහෙයුමයි. NAND ද්වාරයක ප්‍රතිදානය 0 වන්නේ එහි සියලුම ආදාන 1 වූ විට පමණි. එබැවින්, A=1 සහ B=1 වන විට පමණක් ප්‍රතිදානය 0 වේ."
    },
    {
        questionText: "පහත ප්‍රකාශනය සඳහා සත්‍යතා වගුවක් නිර්මාණය කිරීමේදී (A, B ආදාන ලෙස) ප්‍රතිදානය 1 වන්නේ කුමන අවස්ථා වලදීද? NOT (A OR B)",
        options: [
            "A=0, B=0",
            "A=1, B=1",
            "A=0, B=1",
            "A=1, B=0",
            "කිසිම අවස්ථාවක."
        ],
        correctAnswerIndex: 0,
        explanation: "NOT (A OR B) යනු NOR මෙහෙයුමයි. NOR ද්වාරයක ප්‍රතිදානය 1 වන්නේ එහි සියලුම ආදාන 0 වූ විට පමණි. එබැවින්, A=0 සහ B=0 වන විට පමණක් ප්‍රතිදානය 1 වේ."
    },
    {
        questionText: "මූලික තාර්කික ද්වාර නොවන ද්වාරය කුමක්ද?",
        options: [
            "NAND ද්වාරය",
            "NOT ද්වාරය",
            "AND ද්වාරය",
            "OR ද්වාරය",
            "XOR ද්වාරය"
        ],
        correctAnswerIndex: 0,
        explanation: "NOT, AND, OR, හා XOR යනු මූලික තාර්කික ද්වාර වේ. NAND, NOR, XNOR යනු ඒකාබද්ධ ද්වාර වේ. එබැවින්, NAND ද්වාරය මූලික තාර්කික ද්වාරයක් නොවේ."
    },
    {
        questionText: "XNOR ද්වාරය, X-NOR මෙහෙයුම ක්‍රියාත්මක කරන අතර එහි ප්‍රතිදානය 1 වන්නේ කුමන අවස්ථාවේදීද?",
        options: [
            "ආදාන දෙකම එකම තාර්කික අගයක් ගන්නා විට (0,0 හෝ 1,1).",
            "ආදාන දෙකම 0 (අසත්‍ය) වන විට පමණක්.",
            "ආදාන දෙකම 1 (සත්‍ය) වන විට පමණක්.",
            "ආදාන දෙකම එකිනෙකට වෙනස් වන විට.",
            "ඕනෑම එක් ආදානයක් 1 (සත්‍ය) වන විට."
        ],
        correctAnswerIndex: 0,
        explanation: "XNOR ද්වාරය යනු XOR ද්වාරයේ ප්‍රතිලෝමයයි. එබැවින්, එහි ප්‍රතිදානය 1 වන්නේ ආදාන දෙකම එකම තාර්කික අගයක් ගන්නා විට (එනම්, දෙකම 0 හෝ දෙකම 1) පමණි."
    },
    {
        questionText: "තාර්කික ද්වාරයක ප්‍රතිදානය තාර්කිකව 'ප්‍රතිශේධනය' (Negation) කිරීම යන්නෙහි තේරුම කුමක්ද?",
        options: [
            "එහි තාර්කික අගය ප්‍රතිලෝම කිරීම (0 නම් 1, 1 නම් 0).",
            "එහි තාර්කික අගය වෙනස් නොකිරීම.",
            "එහි ආදාන සංඛ්‍යාව වැඩි කිරීම.",
            "එහි ක්‍රියාකාරීත්වය වෙනස් කිරීම.",
            "එහි භෞතික ප්‍රමාණය අඩු කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කිකව 'ප්‍රතිශේධනය' කිරීම යන්නෙන් අදහස් වන්නේ ද්විමය අගය ප්‍රතිලෝම කිරීමයි. එනම්, සත්‍ය (1) අසත්‍ය (0) බවටත්, අසත්‍ය (0) සත්‍ය (1) බවටත් පත් කිරීමයි. NOT ද්වාරය මේ සඳහා භාවිතා වේ."
    },
    {
        questionText: "යම් ද්වාරයක ප්‍රතිදානය, එහි ආදානවල AND මෙහෙයුමේ ප්‍රතිලෝමය නම්, එය කුමන ද්වාරයද?",
        options: [
            "NAND ද්වාරය",
            "NOR ද්වාරය",
            "XNOR ද්වාරය",
            "NOT ද්වාරය",
            "OR ද්වාරය"
        ],
        correctAnswerIndex: 0,
        explanation: "AND මෙහෙයුමේ ප්‍රතිලෝමය NAND ද්වාරය මගින් නිපදවයි. NAND = NOT (AND)."
    },
    {
        questionText: "යම් ද්වාරයක ප්‍රතිදානය, එහි ආදානවල OR මෙහෙයුමේ ප්‍රතිලෝමය නම්, එය කුමන ද්වාරයද?",
        options: [
            "NOR ද්වාරය",
            "NAND ද්වාරය",
            "XNOR ද්වාරය",
            "NOT ද්වාරය",
            "AND ද්වාරය"
        ],
        correctAnswerIndex: 0,
        explanation: "OR මෙහෙයුමේ ප්‍රතිලෝමය NOR ද්වාරය මගින් නිපදවයි. NOR = NOT (OR)."
    },
    {
        questionText: "ආදාන 3ක් සහිත AND ද්වාරයක ප්‍රතිදානය 1 වීමට නම්, ආදාන මොනවා විය යුතුද?",
        options: [
            "සියලුම ආදාන 1 විය යුතුය.",
            "අවම වශයෙන් එක් ආදානයක් 1 විය යුතුය.",
            "අවම වශයෙන් ආදාන දෙකක් 1 විය යුතුය.",
            "සියලුම ආදාන 0 විය යුතුය.",
            "එක් ආදානයක් 1, අනෙක් ඒවා 0 විය යුතුය."
        ],
        correctAnswerIndex: 0,
        explanation: "AND ද්වාරයක ක්‍රියාකාරීත්වය අනුව, එහි ප්‍රතිදානය 1 වන්නේ සියලුම ආදාන 1 වූ විට පමණි. ආදාන කීයක් තිබුණත්, මෙම නීතිය වලංගු වේ."
    },
    {
        questionText: "NAND ද්වාරයක් භාවිතා කරමින් OR ද්වාරයක් තැනීමට අවශ්‍ය අවම NAND ද්වාර ගණන කීයද?",
        options: [
            "තුනක් (3)",
            "දෙකක් (2)",
            "එකක් (1)",
            "හතරක් (4)",
            "පහක් (5)"
        ],
        correctAnswerIndex: 0,
        explanation: "NAND ද්වාරයක් භාවිතා කරමින් OR ද්වාරයක් තැනීමට අවම වශයෙන් NAND ද්වාර තුනක් අවශ්‍ය වේ. (A+B = NOT ( NOT A AND NOT B )). පළමුව, ආදාන දෙකම NAND ද්වාර දෙකක් මගින් ප්‍රතිලෝම කර, පසුව එම ප්‍රතිලෝම කළ ආදාන තෙවන NAND ද්වාරයකට යවයි."
    },
    {
        questionText: "NOR ද්වාරයක් භාවිතා කරමින් AND ද්වාරයක් තැනීමට අවශ්‍ය අවම NOR ද්වාර ගණන කීයද?",
        options: [
            "තුනක් (3)",
            "දෙකක් (2)",
            "එකක් (1)",
            "හතරක් (4)",
            "පහක් (5)"
        ],
        correctAnswerIndex: 0,
        explanation: "NOR ද්වාරයක් භාවිතා කරමින් AND ද්වාරයක් තැනීමට අවම වශයෙන් NOR ද්වාර තුනක් අවශ්‍ය වේ. (A.B = NOT ( NOT A OR NOT B )). පළමුව, ආදාන දෙකම NOR ද්වාර දෙකක් මගින් ප්‍රතිලෝම කර, පසුව එම ප්‍රතිලෝම කළ ආදාන තෙවන NOR ද්වාරයකට යවයි."
    },
    {
        questionText: "තාර්කික ද්වාරයක් හඳුනාගැනීමට එහි සංකේතය සහ සත්‍යතා වගුව යන දෙකම වැදගත් වන්නේ ඇයි?",
        options: [
            "සංකේතය එහි භෞතික හැඩය පෙන්වන අතර සත්‍යතා වගුව එහි ක්‍රියාකාරීත්වය විස්තර කරන බැවිනි.",
            "සංකේතය එහි ක්‍රියාකාරීත්වය පැහැදිලි කරන අතර සත්‍යතා වගුව එහි ආදාන සංඛ්‍යාව පෙන්වන බැවිනි.",
            "සංකේතය එහි බලශක්ති පරිභෝජනය පෙන්වන අතර සත්‍යතා වගුව එහි වේගය පෙන්වන බැවිනි.",
            "සංකේතය සහ සත්‍යතා වගුව යන දෙකම එකම තොරතුරු සපයන බැවිනි.",
            "එකක් අනෙකකින් ස්වාධීන වන බැවිනි."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කික ද්වාරයක් නිවැරදිව හඳුනාගැනීම සඳහා එහි සංකේතය (පරිපථ සටහන් වලදී භාවිතා කරන) සහ සත්‍යතා වගුව (එහි තාර්කික ක්‍රියාකාරීත්වය පැහැදිලි කරන) යන දෙකම අත්‍යවශ්‍ය වේ. සංකේතය මගින් ද්වාරයේ වර්ගය ඉක්මනින් හඳුනාගත හැකි අතර, සත්‍යතා වගුව මගින් එහි ආදාන-ප්‍රතිදාන සම්බන්ධතාවය පිළිබඳ සවිස්තරාත්මක අවබෝධයක් ලබාගත හැක."
    },
    {
        questionText: "කුඩා කවයක් සහිත ත්‍රිකෝණ සංකේතයක්, පසුව 'D' හැඩැති කොටසක් සහ ඉදිරියෙන් නැවත කුඩා කවයක් සහිත සංකේතය කුමක්ද?",
        options: [
            "XNOR ද්වාරය",
            "NAND ද්වාරය",
            "NOR ද්වාරය",
            "XOR ද්වාරය",
            "AND ද්වාරය"
        ],
        correctAnswerIndex: 0,
        explanation: "XNOR ද්වාරයේ සංකේතය XOR ද්වාරයේ සංකේතයට (D හැඩැති කොටසක් ඉදිරියෙන් වක්‍ර රේඛාවක් සහිත) සමාන වන අතර, ප්‍රතිදානයේදී කුඩා කවයක් (ප්‍රතිලෝමය දැක්වෙන) අඩංගු වේ."
    },
    {
        questionText: "ප්‍රතිලෝම ද්වාරය (Inverter) ලෙසද හඳුන්වනු ලබන ද්වාරය කුමක්ද?",
        options: [
            "NOT ද්වාරය",
            "AND ද්වාරය",
            "OR ද්වාරය",
            "NAND ද්වාරය",
            "NOR ද්වාරය"
        ],
        correctAnswerIndex: 0,
        explanation: "NOT ද්වාරය එහි ආදානයේ තාර්කික ප්‍රතිලෝමය නිපදවන බැවින්, එය ප්‍රතිලෝම ද්වාරය (Inverter) ලෙසද හැඳින්වේ."
    },
    {
        questionText: "තාර්කික ද්වාරයක ප්‍රතිදානය එහි ආදානවල AND මෙහෙයුමේ ප්‍රතිලෝමය නම්, එය කුමන ද්වාරයද?",
        options: [
            "NAND ද්වාරය",
            "NOR ද්වාරය",
            "XNOR ද්වාරය",
            "NOT ද්වාරය",
            "OR ද්වාරය"
        ],
        correctAnswerIndex: 0,
        explanation: "NAND ද්වාරය (NOT-AND) යනු AND ද්වාරයක ප්‍රතිදානය ප්‍රතිලෝම කිරීමෙන් ලබා ගන්නා ද්වාරයකි."
    },
    {
        questionText: "ආදාන A, B, C සඳහා NOT (A AND (B OR C)) යන ප්‍රකාශනයේ ප්‍රතිදානය 0 වන්නේ කුමන අවස්ථා වලදීද?",
        options: [
            "A=1, B=1, C=1",
            "A=0, B=0, C=0",
            "A=1, B=0, C=0",
            "A=0, B=1, C=0",
            "A=0, B=0, C=1"
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රකාශනයේ ප්‍රතිදානය 0 වීමට නම්, NOT (A AND (B OR C)) හි අගය 0 විය යුතු බැවින් A AND (B OR C) හි අගය 1 විය යුතුය. A AND (B OR C) හි අගය 1 වීමට නම්, A=1 සහ (B OR C)=1 විය යුතුය. (B OR C)=1 වීමට නම්, B=1 හෝ C=1 (හෝ දෙකම 1) විය යුතුය. එබැවින් A=1, B=1, C=1 වන විට ප්‍රතිදානය 0 වේ."
    },
    {
        questionText: "ආදාන A, B, C සඳහා (A OR B) AND (NOT C) යන ප්‍රකාශනයේ ප්‍රතිදානය 1 වන්නේ කුමන අවස්ථා වලදීද?",
        options: [
            "A=1, B=0, C=0",
            "A=0, B=0, C=1",
            "A=0, B=0, C=0",
            "A=1, B=1, C=1",
            "A=0, B=1, C=1"
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රකාශනයේ ප්‍රතිදානය 1 වීමට නම්, (A OR B)=1 සහ (NOT C)=1 විය යුතුය. (NOT C)=1 වීමට නම් C=0 විය යුතුය. (A OR B)=1 වීමට නම්, A=1 හෝ B=1 (හෝ දෙකම 1) විය යුතුය. A=1, B=0, C=0 යන අවස්ථාවේදී (1 OR 0) AND (NOT 0) = 1 AND 1 = 1 වේ."
    },
    {
        questionText: "NAND ද්වාරයක ප්‍රතිදානය 1 වන්නේ කුමන අවස්ථාවේදීද?",
        options: [
            "ආදානවලින් එකක් හෝ වැඩි ගණනක් 0 (අසත්‍ය) වන විට.",
            "සියලුම ආදාන 1 (සත්‍ය) වන විට.",
            "සියලුම ආදාන 0 (අසත්‍ය) වන විට.",
            "ආදාන එකිනෙකට වෙනස් වන විට.",
            "ඕනෑම ආදානයක් 1 (සත්‍ය) වන විට."
        ],
        correctAnswerIndex: 0,
        explanation: "NAND ද්වාරයක ප්‍රතිදානය 0 වන්නේ සියලුම ආදාන 1 වූ විට පමණි. එබැවින්, ආදානවලින් එකක් හෝ වැඩි ගණනක් 0 (අසත්‍ය) වන ඕනෑම අවස්ථාවක ප්‍රතිදානය 1 වේ."
    },
    {
        questionText: "NOR ද්වාරයක ප්‍රතිදානය 0 වන්නේ කුමන අවස්ථාවේදීද?",
        options: [
            "ආදානවලින් එකක් හෝ වැඩි ගණනක් 1 (සත්‍ය) වන විට.",
            "සියලුම ආදාන 0 (අසත්‍ය) වන විට.",
            "ආදාන දෙකම 1 (සත්‍ය) වන විට.",
            "ආදාන එකිනෙකට වෙනස් වන විට.",
            "කිසිම ආදානයක් 1 (සත්‍ය) නොවන විට."
        ],
        correctAnswerIndex: 0,
        explanation: "NOR ද්වාරයක ප්‍රතිදානය 1 වන්නේ සියලුම ආදාන 0 වූ විට පමණි. එබැවින්, ආදානවලින් එකක් හෝ වැඩි ගණනක් 1 (සත්‍ය) වන ඕනෑම අවස්ථාවක ප්‍රතිදානය 0 වේ."
    },
    {
        questionText: "XOR ද්වාරය ප්‍රධාන වශයෙන් භාවිතා වන්නේ කුමන කාර්යයන් සඳහාද?",
        options: [
            "සංඛ්‍යා එකතු කිරීම (Adders) සහ සමතා පරීක්ෂාව (Parity Checking).",
            "දත්ත ගබඩා කිරීම.",
            "දත්ත සංසන්දනය කිරීම.",
            "දත්ත ප්‍රතිලෝම කිරීම.",
            "විද්‍යුත් ධාරාව පාලනය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "XOR ද්වාරය එහි 'විශේෂිත' ස්වභාවය නිසා සංඛ්‍යා එකතු කිරීමේ පරිපථ (Half Adder, Full Adder) සහ දත්ත සම්ප්‍රේෂණයේදී දෝෂ හඳුනා ගැනීම සඳහා භාවිතා කරන සමතා පරීක්ෂා කිරීමේ පරිපථ (Parity Checkers) වැනි යෙදීම් වලදී බහුලව භාවිතා වේ."
    },
    {
        questionText: "ඉලෙක්ට්‍රොනික් පරිපථයක 'බබ්ල්' (bubble) සංකේතය මගින් කුමක් නිරූපණය කරයිද?",
        options: [
            "තාර්කික ප්‍රතිලෝමය (inversion).",
            "ඉහළ වෝල්ටීයතාවය.",
            "අඩු වෝල්ටීයතාවය.",
            "පරිපථය වසා දැමීම.",
            "සංඥා ගලා යාම."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කික ද්වාර සංකේතවල ප්‍රතිදානයේ හෝ ආදානයේ ඇති කුඩා කවය (බබ්ල්) මගින් තාර්කික ප්‍රතිලෝම මෙහෙයුමක් (NOT operation) සිදු වන බව පෙන්නුම් කරයි."
    },
    {
        questionText: "සාර්ව ද්වාර වලට (NAND, NOR) ඇති ප්‍රායෝගික වැදගත්කම කුමක්ද?",
        options: [
            "ඒවා භාවිතා කරමින් ඕනෑම තාර්කික පරිපථයක් නිර්මාණය කළ හැකි බැවින්, සැලසුම් ක්‍රියාවලිය සරල වන අතර සංරචක වර්ග අඩු කළ හැක.",
            "ඒවා අනෙකුත් ද්වාරවලට වඩා වේගවත් බැවිනි.",
            "ඒවාට අඩු බලයක් අවශ්‍ය වන බැවිනි.",
            "ඒවා වඩාත් සුරක්ෂිත වන බැවිනි.",
            "ඒවා නිෂ්පාදනය කිරීමට පහසු බැවිනි."
        ],
        correctAnswerIndex: 0,
        explanation: "NAND සහ NOR සාර්ව ද්වාර වන බැවින්, වෙනත් කිසිදු වර්ගයක ද්වාර අවශ්‍ය නොවන පරිදි, එක් ද්වාර වර්ගයක් පමණක් භාවිතා කරමින් සියලුම තාර්කික කාර්යයන් ඉටු කළ හැකිය. මෙය ඉලෙක්ට්‍රොනික් පරිපථ සැලසුම් කිරීමේදී සංරචක විවිධත්වය අඩු කිරීමට සහ නිෂ්පාදන ක්‍රියාවලිය සරල කිරීමට උපකාරී වේ."
    },
    {
        questionText: "තාර්කික ද්වාරයක් තෝරාගැනීමේදී එහි 'ප්‍රචාරණ ප්‍රමාදය' (Propagation Delay) සලකා බැලීම වැදගත් වන්නේ ඇයි?",
        options: [
            "ද්වාරයේ ආදානය වෙනස් වූ විට ප්‍රතිදානය වෙනස් වීමට ගතවන කාලය එයට බලපාන බැවිනි.",
            "එය ද්වාරයේ බලශක්ති පරිභෝජනයට සෘජුවම සම්බන්ධ වන බැවිනි.",
            "එය ද්වාරයේ භෞතික ප්‍රමාණය තීරණය කරන බැවිනි.",
            "එය ද්වාරයේ විශ්වසනීයත්වයට බලපාන බැවිනි.",
            "එය ද්වාරයේ මිලට සෘජුවම බලපාන බැවිනි."
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රචාරණ ප්‍රමාදය යනු තාර්කික ද්වාරයක ආදාන අගය වෙනස් වූ මොහොතේ සිට ප්‍රතිදාන අගය වෙනස් වීමට ගතවන කාලයයි. අධි-වේගී අංකිත පරිපථ සැලසුම් කිරීමේදී මෙම ප්‍රමාදය අවම කිරීම ඉතා වැදගත් වේ, මන්ද එය පරිපථයේ සමස්ත ක්‍රියාකාරීත්වයේ වේගයට සෘජුවම බලපායි."
    },
    {
        questionText: "තාර්කික ද්වාරයක් සැලසුම් කිරීමේදී 'ෆෑන්-ඉන්' (Fan-in) සහ 'ෆෑන්-අවුට්' (Fan-out) පිරිවිතරයන් වැදගත් වන්නේ ඇයි?",
        options: [
            "ෆෑන්-ඉන් යනු ද්වාරයකට තිබිය හැකි උපරිම ආදාන සංඛ්‍යාව වන අතර, ෆෑන්-අවුට් යනු එම ද්වාරයකට සම්බන්ධ කළ හැකි අනෙකුත් ද්වාර ගණනයි. මේවා පරිපථයේ නිසි ක්‍රියාකාරීත්වය සඳහා වැදගත් වේ.",
            "ඒවා ද්වාරයේ බලශක්ති පරිභෝජනය තීරණය කරන බැවිනි.",
            "ඒවා ද්වාරයේ භෞතික ප්‍රමාණයට සෘජුවම සම්බන්ධ වන බැවිනි.",
            "ඒවා ද්වාරයේ නිෂ්පාදන පිරිවැය තීරණය කරන බැවිනි.",
            "ඒවා ද්වාරයේ ක්‍රියාකාරී උෂ්ණත්වයට බලපාන බැවිනි."
        ],
        correctAnswerIndex: 0,
        explanation: "ෆෑන්-ඉන් යනු ද්වාරයකට තිබිය හැකි උපරිම ආදාන සංඛ්‍යාවයි. ෆෑන්-අවුට් යනු එක් ද්වාරයක ප්‍රතිදානයට සම්බන්ධ කළ හැකි අනෙකුත් ද්වාර (ඒකක භාර) ගණනයි. මෙම පිරිවිතරයන් ද්වාරයකට සංඥා සැපයීමට හෝ සංඥා ලබා ගැනීමට ඇති හැකියාව තීරණය කරයි, එය සංකීර්ණ පරිපථ සැලසුම් කිරීමේදී වැදගත් වේ."
    },
    {
        questionText: "XOR ද්වාරය A සහ B ආදාන සඳහා (A AND NOT B) OR (NOT A AND B) ලෙස ප්‍රකාශ කළ හැක. මෙම ප්‍රකාශනය මගින් XOR ද්වාරයේ කුමන ලක්ෂණය නිරූපණය වේද?",
        options: [
            "ආදාන එකිනෙකට වෙනස් වූ විට පමණක් ප්‍රතිදානය 1 වේ.",
            "ආදාන දෙකම 1 වූ විට ප්‍රතිදානය 1 වේ.",
            "ආදාන දෙකම 0 වූ විට ප්‍රතිදානය 0 වේ.",
            "ආදාන එකක් 1 වූ විට ප්‍රතිදානය 1 වේ.",
            "ආදානවල ප්‍රතිලෝමය ලබා දෙයි."
        ],
        correctAnswerIndex: 0,
        explanation: "XOR ද්වාරය 'විශේෂිත OR' ද්වාරය ලෙස හැඳින්වේ. එහි ප්‍රතිදානය 1 වන්නේ ආදාන දෙකෙන් එකක් පමණක් 1 වන විටයි. (A AND NOT B) යනු A=1 සහ B=0 අවස්ථාව වන අතර, (NOT A AND B) යනු A=0 සහ B=1 අවස්ථාවයි. මෙම අවස්ථා දෙකේදී පමණක් ප්‍රතිදානය 1 වන බව (A AND NOT B) OR (NOT A AND B) ප්‍රකාශයෙන් පෙන්නුම් කරයි."
    },
    {
        questionText: "NAND ද්වාරයක් භාවිතා කරමින් NOT ද්වාරයක් නිර්මාණය කිරීමේදී, භාවිතා වන NAND ද්වාර ගණන කීයද?",
        options: [
            "එකක් (1)",
            "දෙකක් (2)",
            "තුනක් (3)",
            "හතරක් (4)",
            "කිසිවක් අවශ්‍ය නැත."
        ],
        correctAnswerIndex: 0,
        explanation: "NAND ද්වාරයක ආදාන දෙකම එකට සම්බන්ධ කිරීමෙන් NOT ද්වාරයක් ලෙස ක්‍රියා කරවිය හැක. එබැවින් අවශ්‍ය වන්නේ එක් NAND ද්වාරයක් පමණි."
    },
    {
        questionText: "NOR ද්වාරයක් භාවිතා කරමින් NOT ද්වාරයක් නිර්මාණය කිරීමේදී, භාවිතා වන NOR ද්වාර ගණන කීයද?",
        options: [
            "එකක් (1)",
            "දෙකක් (2)",
            "තුනක් (3)",
            "හතරක් (4)",
            "කිසිවක් අවශ්‍ය නැත."
        ],
        correctAnswerIndex: 0,
        explanation: "NOR ද්වාරයක ආදාන දෙකම එකට සම්බන්ධ කිරීමෙන් NOT ද්වාරයක් ලෙස ක්‍රියා කරවිය හැක. එබැවින් අවශ්‍ය වන්නේ එක් NOR ද්වාරයක් පමණි."
    },
    {
        questionText: "තාර්කික ද්වාරයක් තුළ භාවිතා කරන ට්‍රාන්සිස්ටර වර්ගය එහි ක්‍රියාකාරීත්වයට බලපාන්නේ කෙසේද?",
        options: [
            "ට්‍රාන්සිස්ටර වර්ගය ද්වාරයේ වේගය, බලශක්ති පරිභෝජනය සහ ශබ්ද ප්‍රතිශක්තිය (noise immunity) තීරණය කරයි.",
            "එය ද්වාරයේ භෞතික ප්‍රමාණය පමණක් තීරණය කරයි.",
            "එය ද්වාරයට තිබිය හැකි ආදාන සංඛ්‍යාව පමණක් තීරණය කරයි.",
            "එය ද්වාරයේ ප්‍රතිදාන වෝල්ටීයතාවයට පමණක් බලපායි.",
            "එය ද්වාරයේ සංකේතය වෙනස් කරයි."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කික ද්වාර සෑදීමට විවිධ ට්‍රාන්සිස්ටර තාක්ෂණයන් (උදා: TTL, CMOS) භාවිතා කරයි. මෙම තාක්ෂණයන් ද්වාරයේ ක්‍රියාකාරීත්වයට සෘජුවම බලපාන අතර, එහි ප්‍රචාරණ ප්‍රමාදය (වේගය), බලශක්ති පරිභෝජනය, සහ ශබ්දයට ඇති ප්‍රතිශක්තිය වැනි ලක්ෂණ තීරණය කරයි."
    },
    {
        questionText: "ප්‍රධාන වශයෙන් භාවිතා වන තාර්කික ද්වාර පවුල් (Logic Families) දෙකක් නම් කරන්න.",
        options: [
            "TTL (Transistor-Transistor Logic) සහ CMOS (Complementary Metal-Oxide-Semiconductor).",
            "NPN සහ PNP.",
            "Resistor-Transistor Logic (RTL) සහ Diode-Transistor Logic (DTL).",
            "Emitter-Coupled Logic (ECL) සහ Integrated Injection Logic (IIL).",
            "Analog සහ Digital."
        ],
        correctAnswerIndex: 0,
        explanation: "TTL (Transistor-Transistor Logic) සහ CMOS (Complementary Metal-Oxide-Semiconductor) යනු අංකිත පරිපථවල බහුලව භාවිතා වන ප්‍රධාන තාර්කික ද්වාර පවුල් දෙකයි. CMOS ද්වාර අඩු බලශක්ති පරිභෝජනය සඳහා ප්‍රසිද්ධ අතර, TTL ද්වාර ඉහළ වේගයක් සපයයි."
    },
    {
        questionText: "තාර්කික ද්වාරයක 'ශබ්ද ප්‍රතිශක්තිය' (Noise Immunity) යනු කුමක්ද?",
        options: [
            "බාහිර විද්‍යුත් ශබ්ද මගින් එහි ක්‍රියාකාරීත්වයට බාධා නොවන ලෙස ද්වාරයට ඔරොත්තු දීමේ හැකියාව.",
            "ද්වාරය මගින් නිපදවන ශබ්ද ප්‍රමාණය.",
            "ද්වාරය ක්‍රියාත්මක කිරීමේදී අවශ්‍ය ශබ්ද ප්‍රමාණය.",
            "ද්වාරය මගින් ශබ්ද සංඥා නිපදවීමේ හැකියාව.",
            "ද්වාරයෙහි දෝෂ ඇතිවීමේ සම්භාවිතාව."
        ],
        correctAnswerIndex: 0,
        explanation: "ශබ්ද ප්‍රතිශක්තිය යනු තාර්කික ද්වාරයකට බාහිරින් එන අනවශ්‍ය වෝල්ටීයතා වෙනස්වීම් (ශබ්දය) මධ්‍යයේ වුවද, එහි නිවැරදි ක්‍රියාකාරීත්වය පවත්වා ගැනීමට ඇති හැකියාවයි. ඉහළ ශබ්ද ප්‍රතිශක්තියක් සහිත ද්වාර වඩාත් විශ්වාසනීය වේ."
    },
    {
        questionText: "NAND ද්වාරයක් භාවිතයෙන් AND ද්වාරයක් තැනීමේදී අවශ්‍ය වන අවම ද්වාර ගණන කීයද?",
        options: [
            "දෙකක් (2)",
            "එකක් (1)",
            "තුනක් (3)",
            "හතරක් (4)",
            "කිසිවක් අවශ්‍ය නැත."
        ],
        correctAnswerIndex: 0,
        explanation: "NAND ද්වාරයක් AND ද්වාරයක් බවට පත් කිරීමට, NAND ද්වාර දෙකක් අවශ්‍ය වේ. පළමු NAND ද්වාරය AND මෙහෙයුම සිදු කරන අතර, එහි ප්‍රතිදානය (NAND) දෙවන NAND ද්වාරයක ආදාන දෙකටම සම්බන්ධ කිරීමෙන් (NOT මෙහෙයුම සඳහා) අවසානයේ AND ප්‍රතිදානය ලැබේ. (A AND B = NOT ( NOT (A AND B) ))."
    },
    {
        questionText: "NOR ද්වාරයක් භාවිතයෙන් OR ද්වාරයක් තැනීමේදී අවශ්‍ය වන අවම ද්වාර ගණන කීයද?",
        options: [
            "දෙකක් (2)",
            "එකක් (1)",
            "තුනක් (3)",
            "හතරක් (4)",
            "කිසිවක් අවශ්‍ය නැත."
        ],
        correctAnswerIndex: 0,
        explanation: "NOR ද්වාරයක් OR ද්වාරයක් බවට පත් කිරීමට, NOR ද්වාර දෙකක් අවශ්‍ය වේ. පළමු NOR ද්වාරය OR මෙහෙයුම සිදු කරන අතර, එහි ප්‍රතිදානය (NOR) දෙවන NOR ද්වාරයක ආදාන දෙකටම සම්බන්ධ කිරීමෙන් (NOT මෙහෙයුම සඳහා) අවසානයේ OR ප්‍රතිදානය ලැබේ. (A OR B = NOT ( NOT (A OR B) ))."
    },
    {
        questionText: "තාර්කික ද්වාරයක 'ත්‍රි-අවස්ථිති ප්‍රතිදානය' (Three-State Output) යන්නෙහි තේරුම කුමක්ද?",
        options: [
            "එය 0, 1 සහ ඉහළ සම්බාධනය (High-Impedance) යන තත්ව තුනෙන් එකක සිටිය හැකි ප්‍රතිදානයකි.",
            "එය 0, 1 සහ දෝෂය (Error) යන තත්ව තුනෙන් එකක සිටිය හැකි ප්‍රතිදානයකි.",
            "එය 0, 1 සහ නොදන්නා (Unknown) යන තත්ව තුනෙන් එකක සිටිය හැකි ප්‍රතිදානයකි.",
            "එය එකවර ප්‍රතිදාන තුනක් නිපදවන ද්වාරයකි.",
            "එය ආදාන තුනක් සහිත ද්වාරයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "සාමාන්‍ය ද්වාරවලට ප්‍රතිදාන 0 හෝ 1 යන ද්විමය තත්ව දෙකක් ඇත. ත්‍රි-අවස්ථිති ප්‍රතිදානයක් සහිත ද්වාරයකට ඊට අමතරව 'ඉහළ සම්බාධනය' (High-Impedance / Z) යන තෙවන තත්වයක්ද තිබිය හැක. මෙම තත්වය මගින් ප්‍රතිදානය, පරිපථයේ අනෙකුත් කොටස් වලින් ඵලදායී ලෙස විසන්ධි කර ඇති බව පෙන්නුම් කරයි. මෙය දත්ත බස් පද්ධතිවලදී (Data Bus Systems) බහුලව භාවිතා වේ."
    },
    {
        questionText: "තාර්කික ද්වාරවලදී 'ධනාත්මක තාර්කිකය' (Positive Logic) සහ 'ඍණාත්මක තාර්කිකය' (Negative Logic) අතර වෙනස කුමක්ද?",
        options: [
            "ධනාත්මක තාර්කිකයේදී ඉහළ වෝල්ටීයතාවය '1' ලෙසත්, අඩු වෝල්ටීයතාවය '0' ලෙසත් නිරූපණය කරන අතර, ඍණාත්මක තාර්කිකයේදී ඉහළ වෝල්ටීයතාවය '0' ලෙසත්, අඩු වෝල්ටීයතාවය '1' ලෙසත් නිරූපණය කරයි.",
            "ධනාත්මක තාර්කිකයේදී ඉහළ වෝල්ටීයතාවය '0' ලෙසත්, අඩු වෝල්ටීයතාවය '1' ලෙසත් නිරූපණය කරන අතර, ඍණාත්මක තාර්කිකයේදී ඉහළ වෝල්ටීයතාවය '1' ලෙසත්, අඩු වෝල්ටීයතාවය '0' ලෙසත් නිරූපණය කරයි.",
            "ඒවා ද්වාරයේ භෞතික හැඩය සම්බන්ධයෙන් වේ.",
            "ඒවා ද්වාරයේ බලශක්ති පරිභෝජනය සම්බන්ධයෙන් වේ.",
            "ඒවා ද්වාරයේ වේගය සම්බන්ධයෙන් වේ."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කික පද්ධතිවලදී, විද්‍යුත් වෝල්ටීයතා මට්ටම් '0' සහ '1' යන තාර්කික අගයන්ට අනුරූප වේ. ධනාත්මක තාර්කිකයේදී, ඉහළ වෝල්ටීයතා මට්ටම '1' (සත්‍ය) ලෙසත්, අඩු වෝල්ටීයතා මට්ටම '0' (අසත්‍ය) ලෙසත් සලකනු ලැබේ. ඍණාත්මක තාර්කිකයේදී, මෙය ප්‍රතිලෝම වන අතර, ඉහළ වෝල්ටීයතා මට්ටම '0' ලෙසත්, අඩු වෝල්ටීයතා මට්ටම '1' ලෙසත් සලකනු ලැබේ."
    },
    {
        questionText: "තාර්කික ද්වාර සම්බන්ධ කිරීමේදී 'දෙමුහුන් පරිපථ' (Hybrid Circuits) යනු කුමක්ද?",
        options: [
            "විවිධ තාර්කික ද්වාර පවුල් වල (උදා: TTL සහ CMOS) ද්වාර එකට සම්බන්ධ කර තැනූ පරිපථ.",
            "තාර්කික ද්වාර සහ ඇනලොග් සංරචක එකට සම්බන්ධ කර තැනූ පරිපථ.",
            "එකම තාර්කික ද්වාර පවුලේ ද්වාර පමණක් භාවිතා කර තැනූ පරිපථ.",
            "විවිධ ප්‍රචාරණ ප්‍රමාදයන් සහිත ද්වාර එකට සම්බන්ධ කර තැනූ පරිපථ.",
            "විවිධ බලශක්ති පරිභෝජන මට්ටම් සහිත ද්වාර එකට සම්බන්ධ කර තැනූ පරිපථ."
        ],
        correctAnswerIndex: 0,
        explanation: "දෙමුහුන් පරිපථ යනු විවිධ තාක්ෂණයන් (උදා: TTL සහ CMOS) හෝ විවිධ ක්‍රියාකාරීත්වයන් (උදා: තාර්කික සහ ඇනලොග්) සහිත සංරචක එකට සම්බන්ධ කර තැනූ පරිපථ වේ. තාර්කික ද්වාර සම්බන්ධ කිරීමේදී, විවිධ තාර්කික ද්වාර පවුල් වල ද්වාර එකට සම්බන්ධ කිරීම දෙමුහුන් පරිපථ ලෙස හැඳින්විය හැක. මෙහිදී, නිවැරදි අතුරුමුහුණත් (interface) පරිපථ භාවිතා කිරීම වැදගත් වේ."
    },
    {
        questionText: "තාර්කික ද්වාරයක 'ප්‍රතිදාන ධාරිතාව' (Output Capacitance) එහි ක්‍රියාකාරීත්වයට බලපාන්නේ කෙසේද?",
        options: [
            "එය ද්වාරයේ ප්‍රතිදානයෙන් සංඥාවක් වෙනත් ද්වාරයකට සම්ප්‍රේෂණය වීමේ වේගයට බලපායි.",
            "එය ද්වාරයට සැපයිය හැකි උපරිම ධාරාව තීරණය කරයි.",
            "එය ද්වාරයේ ආයු කාලය තීරණය කරයි.",
            "එය ද්වාරයේ තාප උත්පාදනයට බලපායි.",
            "එය ද්වාරයේ භෞතික ප්‍රමාණයට බලපායි."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කික ද්වාරයක ප්‍රතිදාන ධාරිතාව යනු එහි ප්‍රතිදාන පින් එකෙහි ඇති පරපෝෂිත ධාරිතාවයි. මෙය ද්වාරයේ ප්‍රතිදානයෙන් සංඥාවක් වෙනත් ද්වාරයක ආදානයට සම්ප්‍රේෂණය වීමේ වේගයට (විශේෂයෙන් අධි-සංඛ්‍යාත ක්‍රියාකාරීත්වයේදී) බලපායි. ඉහළ ධාරිතාවක් මගින් සංඥා වෙනස් වීමට ගතවන කාලය වැඩි කළ හැකි අතර, එය සමස්ත පරිපථයේ වේගයට බලපායි."
    },
    {
        questionText: "සාර්ව ද්වාර භාවිතයෙන් සංකීර්ණ තාර්කික ප්‍රකාශනයක් නිර්මාණය කිරීමේදී, ප්‍රධාන වාසිය කුමක්ද?",
        options: [
            "ද්වාර වර්ගය අඩු වන බැවින් පරිපථ සැලසුම් කිරීමේ සංකීර්ණත්වය අඩු වේ.",
            "බලශක්ති පරිභෝජනය සැලකිය යුතු ලෙස අඩු වේ.",
            "පරිපථයේ වේගය ඉතා ඉහළ යයි.",
            "නිෂ්පාදන පිරිවැය සැලකිය යුතු ලෙස අඩු වේ.",
            "ඕනෑම ද්වාර පවුලක් සමඟ අනුකූල වේ."
        ],
        correctAnswerIndex: 0,
        explanation: "සාර්ව ද්වාර (NAND/NOR) භාවිතා කිරීමේ ප්‍රධාන වාසිය වන්නේ, ඕනෑම සංකීර්ණ තාර්කික ප්‍රකාශනයක් නිර්මාණය කිරීමට එක් ද්වාර වර්ගයක් පමණක් අවශ්‍ය වීමයි. මෙය පරිපථ සැලසුම් ක්‍රියාවලිය සරල කරන අතර, කොටස් තොග කළමනාකරණයද පහසු කරයි."
    },
    {
        questionText: "පරිපථයක් තුළ තාර්කික ද්වාරවල 'ක්ෂණික බලය' (Instantaneous Power) යනු කුමක්ද?",
        options: [
            "ඕනෑම මොහොතක ද්වාරය මගින් පරිභෝජනය කරන බලය.",
            "ද්වාරය ක්‍රියාත්මක වීමට අවශ්‍ය අවම බලය.",
            "ද්වාරය උපරිම කාර්ය සාධනයෙන් ක්‍රියාත්මක වන විට පරිභෝජනය කරන බලය.",
            "ද්වාරයේ සාමාන්‍ය බලශක්ති පරිභෝජනය.",
            "ද්වාරය ක්‍රියා විරහිත වන විට පරිභෝජනය කරන බලය."
        ],
        correctAnswerIndex: 0,
        explanation: "ක්ෂණික බලය යනු ඕනෑම නිශ්චිත මොහොතක තාර්කික ද්වාරයක් මගින් පරිභෝජනය කරන බලයයි. මෙය ද්වාරයේ තත්වය (ON/OFF) සහ ක්‍රියාකාරී සංඛ්‍යාතය මත වෙනස් විය හැක."
    },
    {
        questionText: "තාර්කික ද්වාරවල 'සංක්‍රාන්ති කාලය' (Transition Time) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "ද්වාරයක ප්‍රතිදානය 0 සිට 1 ට හෝ 1 සිට 0 ට වෙනස් වීමට ගතවන කාලය.",
            "ද්වාරයක් ක්‍රියාත්මක කිරීමේදී අවශ්‍ය අවම කාලය.",
            "ද්වාරයක් ක්‍රියා විරහිත කිරීමට ගතවන කාලය.",
            "ද්වාරයක ආදානය ස්ථාවර වීමට ගතවන කාලය.",
            "ද්වාරයක් නිෂ්පාදනය කිරීමට ගතවන කාලය."
        ],
        correctAnswerIndex: 0,
        explanation: "සංක්‍රාන්ති කාලය යනු තාර්කික ද්වාරයක ප්‍රතිදාන සංඥාව එක් තාර්කික මට්ටමක සිට අනෙකට (උදා: අඩු සිට ඉහළට හෝ ඉහළ සිට අඩුට) මාරු වීමට ගතවන කාලයයි. මෙය ද්වාරයේ වේගයට බලපාන තවත් වැදගත් පිරිවිතරයකි."
    },
    {
        questionText: "TTL සහ CMOS තාර්කික ද්වාර අතර ප්‍රධාන වෙනස්කමක් කුමක්ද?",
        options: [
            "TTL ද්වාරවලට වඩා CMOS ද්වාරවලට අඩු බලශක්ති පරිභෝජනයක් ඇත.",
            "TTL ද්වාර CMOS ද්වාරවලට වඩා වේගවත්ය.",
            "CMOS ද්වාර TTL ද්වාරවලට වඩා වැඩි සංකීර්ණ පරිපථ සඳහා යොදා ගනී.",
            "TTL ද්වාරවලට වඩා CMOS ද්වාරවලට අඩු ශබ්ද ප්‍රතිශක්තියක් ඇත.",
            "TTL ද්වාර CMOS ද්වාරවලට වඩා මිල අධිකය."
        ],
        correctAnswerIndex: 0,
        explanation: "CMOS ද්වාර ඒවායේ අඩු ස්ථිතික බලශක්ති පරිභෝජනය සඳහා ප්‍රසිද්ධය. TTL ද්වාර සාමාන්‍යයෙන් CMOS වලට වඩා වේගවත් විය හැකි නමුත් වැඩි බලයක් පරිභෝජනය කරයි."
    },
    {
        questionText: "අංකිත තාර්කික ද්වාරවල 'තාප විසරණය' (Power Dissipation) යන්නෙහි තේරුම කුමක්ද?",
        options: [
            "ද්වාරයක් ක්‍රියාත්මක වන විට විද්‍යුත් ශක්තිය තාපය ලෙස විමෝචනය වන වේගය.",
            "ද්වාරය මගින් ජනනය වන තාප ප්‍රමාණය.",
            "ද්වාරය සිසිල් කිරීමට අවශ්‍ය ශක්ති ප්‍රමාණය.",
            "ද්වාරයෙහි උෂ්ණත්වය ඉහළ යන වේගය.",
            "ද්වාරයෙහි ඇති දෝෂ ප්‍රමාණය."
        ],
        correctAnswerIndex: 0,
        explanation: "තාප විසරණය යනු අංකිත තාර්කික ද්වාරයක් ක්‍රියාත්මක වන විට විද්‍යුත් ශක්තිය තාපය බවට පරිවර්තනය වන වේගයයි. මෙය IC (Integrated Circuit) නිර්මාණයේදී වැදගත් වන අතර, අධික තාපය පරිපථයට හානි කළ හැක."
    },
    {
        questionText: "ද්වාරයක 'ප්‍රතිදාන ධාරිතාව' (Output Drive Capability) යනු කුමක්ද?",
        options: [
            "ද්වාරයකට තවත් ද්වාර කීයක් ධාවනය කළ හැකිද (ෆෑන්-අවුට්) යන්න දැක්වෙන හැකියාව.",
            "ද්වාරයකට සැපයිය හැකි උපරිම ධාරාව.",
            "ද්වාරයකට ලබාගත හැකි උපරිම ධාරාව.",
            "ද්වාරයක ප්‍රතිදානයේ බලශක්ති මට්ටම.",
            "ද්වාරයකට තොරතුරු ගබඩා කළ හැකි ප්‍රමාණය."
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රතිදාන ධාරිතාව (හෝ Drive Capability) යනු ද්වාරයක ප්‍රතිදානයට සම්බන්ධ කළ හැකි තවත් ද්වාර කීයක්ද (එනම්, Fan-out) යන්න දැක්වෙන හැකියාවයි. ඉහළ ප්‍රතිදාන ධාරිතාවක් මගින් එක් ද්වාරයකට බොහෝ අනෙකුත් ද්වාර ධාවනය කිරීමට ඉඩ සලසයි."
    },
    {
        questionText: "අංකිත පරිපථවල 'බෆරයක්' (Buffer) භාවිතා කිරීමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "සංඥාවක ප්‍රබලත්වය (strength) වැඩි කිරීම හෝ විද්‍යුත් හුදකලාවක් සැපයීම.",
            "සංඥාවක අගය ප්‍රතිලෝම කිරීම.",
            "සංඥාවක අගය වෙනස් කිරීම.",
            "සංඥාවක ප්‍රමාදයක් ඇති කිරීම.",
            "සංඥාවක සංඛ්‍යාතය වෙනස් කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "බෆරයක් යනු ආදාන අගයම ප්‍රතිදානය කරන ද්වාරයකි (එනම් NOT NOT ද්වාරයක් හෝ NOT ද්වාර දෙකක්). එහි ප්‍රධාන කාර්යය වන්නේ සංඥාවක ප්‍රබලත්වය (current drive capability) වැඩි කිරීම හෝ පරිපථයේ කොටස් අතර විද්‍යුත් හුදකලාවක් (isolation) සැපයීමයි. එය තාර්කික ක්‍රියාකාරීත්වයක් සිදු නොකරයි."
    },
    {
        questionText: "පරිපථයක් තුළ 'විදුලි දෝලනය' (Oscillation) ඇතිවීම වැළැක්වීමට තාර්කික ද්වාර සැලසුම් කිරීමේදී අවධානය යොමු කළ යුතු එක් කරුණක් කුමක්ද?",
        options: [
            "ප්‍රචාරණ ප්‍රමාදය සහ ප්‍රතිපෝෂණ මාර්ග නිවැරදිව පාලනය කිරීම.",
            "ද්වාරයේ බලශක්ති පරිභෝජනය අඩු කිරීම.",
            "ද්වාරයේ භෞතික ප්‍රමාණය කුඩා කිරීම.",
            "ද්වාරයේ මිල අඩු කිරීම.",
            "ද්වාරයේ ආදාන සංඛ්‍යාව වැඩි කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "විදුලි දෝලනය යනු පරිපථයක් තුළ සංඥා නිරන්තරයෙන් ඉහළට සහ පහළට මාරු වීමයි. මෙය වැළැක්වීම සඳහා, ද්වාරවල ප්‍රචාරණ ප්‍රමාදය සහ ප්‍රතිපෝෂණ මාර්ග (feedback paths) නිවැරදිව සැලසුම් කිරීම අත්‍යවශ්‍ය වේ. අනවශ්‍ය දෝලනයන් පරිපථයේ අස්ථාවරත්වයට හේතු විය හැක."
    },
    {
        questionText: "යම් ද්වාරයක ආදාන තුනක් ඇති අතර, ඉන් දෙකක් පමණක් 1 වූ විට ප්‍රතිදානය 1 වේ. මෙම ද්වාරය කුමක් විය හැකිද?",
        options: [
            "යම් විශේෂිත තත්වයන් යටතේ ක්‍රියාත්මක වන සංකීර්ණ ද්වාරයකි.",
            "සරල AND ද්වාරයකි.",
            "සරල OR ද්වාරයකි.",
            "සරල XOR ද්වාරයකි.",
            "සරල NOR ද්වාරයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "මෙය මූලික ද්වාරයක් නොවන අතර, 'බහුතර ද්වාරය' (Majority Gate) වැනි සංකීර්ණ ද්වාරයක ක්‍රියාකාරීත්වය විය හැක. එවැනි ද්වාරයක් නිර්මාණය කිරීමට මූලික ද්වාර කිහිපයක් ඒකාබද්ධව භාවිතා කළ යුතුය."
    },
    {
        questionText: "ද්වාරයක ආදාන කිහිපයක් තිබියදීත්, එක් ආදානයක් 0 වන විට ප්‍රතිදානය සැමවිටම 0 නම්, එය කුමන ද්වාරයද?",
        options: [
            "AND ද්වාරය",
            "OR ද්වාරය",
            "NOT ද්වාරය",
            "XOR ද්වාරය",
            "NAND ද්වාරය"
        ],
        correctAnswerIndex: 0,
        explanation: "AND ද්වාරයක ක්‍රියාකාරීත්වය අනුව, එහි ඕනෑම ආදානයක් 0 වූ විට ප්‍රතිදානය සැමවිටම 0 වේ."
    },
    {
        questionText: "ද්වාරයක ආදාන කිහිපයක් තිබියදීත්, එක් ආදානයක් 1 වන විට ප්‍රතිදානය සැමවිටම 1 නම්, එය කුමන ද්වාරයද?",
        options: [
            "OR ද්වාරය",
            "AND ද්වාරය",
            "NOT ද්වාරය",
            "XOR ද්වාරය",
            "NOR ද්වාරය"
        ],
        correctAnswerIndex: 0,
        explanation: "OR ද්වාරයක ක්‍රියාකාරීත්වය අනුව, එහි ඕනෑම ආදානයක් 1 වූ විට ප්‍රතිදානය සැමවිටම 1 වේ."
    },
    {
        questionText: "තාර්කික ද්වාරයක 'හයිස්ටෙරිසිස්' (Hysteresis) යනු කුමක්ද?",
        options: [
            "ආදානය ඉහළ යන විට සහ පහළ යන විට ද්වාරයේ ප්‍රතිදානය වෙනස් වන වෝල්ටීයතා මට්ටම්වල වෙනස.",
            "ද්වාරයේ බලශක්ති පරිභෝජනයේ වෙනස.",
            "ද්වාරයේ ප්‍රචාරණ ප්‍රමාදයේ වෙනස.",
            "ද්වාරයේ ශබ්ද ප්‍රතිශක්තියේ වෙනස.",
            "ද්වාරයේ භෞතික ප්‍රමාණයේ වෙනස."
        ],
        correctAnswerIndex: 0,
        explanation: "හයිස්ටෙරිසිස් යනු තාර්කික ද්වාරවල, විශේෂයෙන් ෂ්මිට් ට්‍රිගර් (Schmitt Trigger) වැනි ද්වාරවල දක්නට ලැබෙන ලක්ෂණයකි. එහිදී, ද්වාරය 'අඩු' සිට 'ඉහළ' වෙත මාරු වන වෝල්ටීයතා සීමාව සහ 'ඉහළ' සිට 'අඩු' වෙත මාරු වන වෝල්ටීයතා සීමාව අතර වෙනසක් පවතී. මෙය ආදාන සංඥාවල ශබ්දය නිසා ඇතිවන අනවශ්‍ය දෝලනයන් වළක්වා ගැනීමට උපකාරී වේ."
    },
    {
        questionText: "තාර්කික ද්වාරයක 'ටොග්ලිං සංඛ්‍යාතය' (Toggling Frequency) යනු කුමක්ද?",
        options: [
            "ද්වාරයක ප්‍රතිදානය සාර්ථකව 0 සිට 1 ට සහ නැවත 0 ට මාරු කළ හැකි උපරිම වේගය.",
            "ද්වාරයක ආදානයේ සංඛ්‍යාතය.",
            "ද්වාරයක බලශක්ති පරිභෝජනයේ සංඛ්‍යාතය.",
            "ද්වාරයක ක්‍රියාකාරී උෂ්ණත්වයේ සංඛ්‍යාතය.",
            "ද්වාරයක භෞතික දෝලනයේ සංඛ්‍යාතය."
        ],
        correctAnswerIndex: 0,
        explanation: "ටොග්ලිං සංඛ්‍යාතය යනු තාර්කික ද්වාරයක ප්‍රතිදානයට 0 සහ 1 අතර සාර්ථකව මාරු විය හැකි උපරිම වේගයයි. මෙය ද්වාරයක වේගවත් ක්‍රියාකාරීත්වයේ සීමාවන් නිර්වචනය කරයි."
    },
    {
        questionText: "TTL සහ CMOS තාර්කික ද්වාර අතරින්, වඩාත් සංවේදී වන්නේ කුමක්ද?",
        options: [
            "CMOS ද්වාර, ඒවායේ ආදානවලට ස්ථිතික විද්‍යුත් විසර්ජන (ESD) හානි කළ හැකි බැවිනි.",
            "TTL ද්වාර, ඒවායේ බලශක්ති පරිභෝජනය වැඩි බැවිනි.",
            "CMOS ද්වාර, ඒවායේ ප්‍රචාරණ ප්‍රමාදය අඩු බැවිනි.",
            "TTL ද්වාර, ඒවායේ ශබ්ද ප්‍රතිශක්තිය අඩු බැවිනි.",
            "දෙකම සමාන සංවේදීතාවයක් ඇත."
        ],
        correctAnswerIndex: 0,
        explanation: "CMOS ද්වාර ඉතා ඉහළ ආදාන සම්බාධනයක් ඇති අතර, ඒවායේ ආදාන ද්වාරවලට ස්ථිතික විද්‍යුත් විසර්ජන (ESD) මගින් පහසුවෙන් හානි විය හැක. එබැවින්, ඒවා හැසිරවීමේදී විශේෂ පූර්වාරක්ෂාවන් ගත යුතුය."
    },
    {
        questionText: "අංකිත තාර්කික ද්වාරවල 'බල සැපයුම් ප්‍රතික්ෂේපන අනුපාතය' (Power Supply Rejection Ratio - PSRR) යනු කුමක්ද?",
        options: [
            "බල සැපයුම් වෝල්ටීයතාවයේ වෙනස්වීම් ද්වාරයේ ප්‍රතිදානයට බලපාන ප්‍රමාණය.",
            "බල සැපයුම මගින් ද්වාරයට ලබා දිය හැකි උපරිම බලය.",
            "ද්වාරය මගින් බල සැපයුමට ආපසු ලබා දෙන බල ප්‍රමාණය.",
            "බල සැපයුමේ ස්ථායීතාවය මනින දර්ශකයකි.",
            "බල සැපයුමේ ශබ්ද මට්ටම."
        ],
        correctAnswerIndex: 0,
        explanation: "PSRR යනු බල සැපයුම් වෝල්ටීයතාවයේ ඇති වෙනස්වීම් හෝ ශබ්දය, ද්වාරයක ප්‍රතිදානයට බලපාන ප්‍රමාණයයි. ඉහළ PSRR අගයක් යනු, ද්වාරය බල සැපයුම් ශබ්දයට අඩු සංවේදී බවත්, වඩා ස්ථායී ප්‍රතිදානයක් සපයන බවත්ය."
    },
    {
        questionText: "තාර්කික ද්වාරයක 'උපරිම ක්‍රියාකාරී උෂ්ණත්වය' (Maximum Operating Temperature) වැදගත් වන්නේ ඇයි?",
        options: [
            "මෙම උෂ්ණත්ව සීමාව ඉක්මවා ගියහොත් ද්වාරයට හානි විය හැකි බැවිනි.",
            "එය ද්වාරයේ බලශක්ති පරිභෝජනයට සෘජුවම බලපාන බැවිනි.",
            "එය ද්වාරයේ වේගයට සෘජුවම බලපාන බැවිනි.",
            "එය ද්වාරයේ භෞතික ප්‍රමාණය තීරණය කරන බැවිනි.",
            "එය ද්වාරයේ නිෂ්පාදන පිරිවැය තීරණය කරන බැවිනි."
        ],
        correctAnswerIndex: 0,
        explanation: "සියලුම ඉලෙක්ට්‍රොනික සංරචකවලට උපරිම ක්‍රියාකාරී උෂ්ණත්වයක් ඇත. මෙම සීමාව ඉක්මවා ගියහොත් ද්වාරයේ ක්‍රියාකාරීත්වයට හානි විය හැකි අතර, එහි ආයු කාලය කෙටි විය හැක. නිසි සිසිලනය සහ තාප කළමනාකරණය මගින් මෙය වළක්වා ගත හැක."
    },
    {
        questionText: "XNOR ද්වාරය ප්‍රධාන වශයෙන් භාවිතා වන එක් යෙදීමක් කුමක්ද?",
        options: [
            "සමානතා පරීක්ෂාව (Equality Checking) සහ සංඛ්‍යාත්මක සංසන්දනය (Magnitude Comparison).",
            "දත්ත ගබඩා කිරීම.",
            "පරිගණක මතකය.",
            "සරල ස්විචින් පරිපථ.",
            "ප්‍රතිලෝම මෙහෙයුම්."
        ],
        correctAnswerIndex: 0,
        explanation: "XNOR ද්වාරයේ ප්‍රතිදානය 1 වන්නේ එහි ආදාන දෙකම සමාන වූ විට (දෙකම 0 හෝ දෙකම 1) පමණි. මෙම ගුණාංගය නිසා, එය 'සමානතා පරීක්ෂකයක්' (Equality Detector) ලෙස ක්‍රියා කරන අතර, සංඛ්‍යාත්මක සංසන්දනය වැනි යෙදීම් සඳහා භාවිතා වේ."
    },
    {
        questionText: "තාර්කික ද්වාරයක් 'අවම' (Minimal) සහ 'සාමාන්‍ය' (Normal) ලෙස ක්‍රියාත්මක වන්නේ කෙසේද?",
        options: [
            "අවම බල සැපයුම් වෝල්ටීයතාවයකින් ක්‍රියාත්මක වන විට අවම ලෙසත්, නිර්දේශිත වෝල්ටීයතාවයකින් ක්‍රියාත්මක වන විට සාමාන්‍ය ලෙසත් ක්‍රියා කරයි.",
            "අවම ආදාන සංඛ්‍යාවක් සමඟ ක්‍රියාත්මක වන විට අවම ලෙසත්, උපරිම ආදාන සංඛ්‍යාවක් සමඟ ක්‍රියාත්මක වන විට සාමාන්‍ය ලෙසත් ක්‍රියා කරයි.",
            "එය ද්වාරයේ භෞතික ප්‍රමාණයට අදාළ වේ.",
            "එය ද්වාරයේ නිෂ්පාදන ක්‍රියාවලියට අදාළ වේ.",
            "එය ද්වාරයේ ආයු කාලයට අදාළ වේ."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කික ද්වාරවල 'අවම' (Minimal) සහ 'සාමාන්‍ය' (Normal) ක්‍රියාකාරීත්වය බොහෝ විට ඒවාට සපයන බල සැපයුම් වෝල්ටීයතාවය, ක්‍රියාකාරී උෂ්ණත්වය සහ ආදාන සංඥාවල ගුණාත්මකභාවය මත රඳා පවතී. 'අවම' යනු ද්වාරය නිසි ලෙස ක්‍රියාත්මක වීමට අවශ්‍ය අවම තත්වයන් වන අතර, 'සාමාන්‍ය' යනු හොඳම ක්‍රියාකාරීත්වය සඳහා නිර්දේශිත තත්වයන් වේ."
    },
    {
        questionText: "අංකිත තාර්කික ද්වාරවල 'ට්‍රයි-ස්ටේට් බෆරයක්' (Tri-state Buffer) භාවිතා කිරීමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "විවිධ උපාංග අතර දත්ත හුවමාරු කිරීම සඳහා බස් පද්ධතිවල ප්‍රතිදානයන් පාලනය කිරීම.",
            "සංඥාවක අගය ප්‍රතිලෝම කිරීම.",
            "සංඥාවක ප්‍රමාදයක් ඇති කිරීම.",
            "සංඥාවක සංඛ්‍යාතය වෙනස් කිරීම.",
            "සංඥාවක වෝල්ටීයතාවය වැඩි කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "ට්‍රයි-ස්ටේට් බෆරයකට සාමාන්‍ය 0 සහ 1 ප්‍රතිදාන තත්වයන්ට අමතරව 'ඉහළ සම්බාධනය' (High-Impedance) තත්වයක් ද ඇත. මෙමගින් පරිපථයේ බස් මාර්ගයකට (bus) සම්බන්ධ වී ඇති බහු උපාංගවල ප්‍රතිදානයන් පාලනය කිරීමට හැකි වේ. අවශ්‍ය විටෙක දත්ත සම්ප්‍රේෂණයට ඉඩ දී, අනවශ්‍ය විටෙක බස් මාර්ගයෙන් ද්වාරය විසන්ධි කිරීම මගින් සංඥා ගැටුම් වළක්වා ගත හැක."
    },
    // Section 4.2: බූලීය වීජ ගණිතය සහ කානෝ සිතියම් (Boolean Algebra and Karnaugh Maps)
    {
        questionText: "බූලීය වීජ ගණිතය යනු කුමක්ද?",
        options: [
            "තාර්කික ක්‍රියාකාරීත්වයන් විශ්ලේෂණය කිරීමට සහ සරල කිරීමට භාවිතා කරන ගණිතමය පද්ධතියකි.",
            "භෞතික විද්‍යාවේදී භාවිතා කරන ගණිතමය පද්ධතියකි.",
            "සංඛ්‍යාත්මක දත්ත ගණනය කිරීමට භාවිතා කරන ගණිතමය පද්ධතියකි.",
            "රූප සැකසීමට භාවිතා කරන ගණිතමය පද්ධතියකි.",
            "ජ්‍යාමිතිය විශ්ලේෂණය කිරීමට භාවිතා කරන ගණිතමය පද්ධතියකි."
        ],
        correctAnswerIndex: 0,
        explanation: "බූලීය වීජ ගණිතය යනු ද්විමය තත්වයන් (සත්‍ය/අසත්‍ය, 1/0) මත පදනම් වූ ගණිත පද්ධතියකි. එය තාර්කික ද්වාර සහ පරිපථවල ක්‍රියාකාරීත්වය විස්ලේෂණය කිරීමට, සරල කිරීමට සහ නිර්මාණය කිරීමට අත්‍යවශ්‍ය මෙවලමකි."
    },
    {
        questionText: "බූලීය වීජ ගණිතයේදී ද්වි අවස්ථා තර්ක (Two-State Logic) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "යම් විචල්‍යයකට තිබිය හැක්කේ 0 හෝ 1 යන ද්විමය අගයන් දෙකක් පමණක් වීම.",
            "පරිපථයක් ක්‍රියාත්මක විය හැකි ආකාර දෙකක් තිබීම.",
            "තාර්කික ද්වාර දෙකක් පමණක් භාවිතා කිරීම.",
            "සත්‍යතා වගුවක තීරු දෙකක් තිබීම.",
            "එකවර ආදාන දෙකක් පමණක් තිබීම."
        ],
        correctAnswerIndex: 0,
        explanation: "ද්වි අවස්ථා තර්ක යනු අංකිත පද්ධතිවල පදනමයි. මෙහිදී, සියලුම විචල්‍යයන්ට (inputs/outputs) තිබිය හැක්කේ තාර්කික 0 (අසත්‍ය, False) හෝ තාර්කික 1 (සත්‍ය, True) යන අගයන් දෙකෙන් එකක් පමණි."
    },
    {
        questionText: "බූලීය වීජ ගණිතයේ 'සංඝටන න්‍යාය' (Associative Law) නිවැරදිව දක්වන්නේ කුමන ප්‍රකාශනයකින්ද?",
        options: [
            "A OR (B OR C) = (A OR B) OR C",
            "A AND (B OR C) = (A AND B) OR (A AND C)",
            "A OR B = B OR A",
            "A OR A = A",
            "A OR 1 = 1"
        ],
        correctAnswerIndex: 0,
        explanation: "සංඝටන න්‍යාය මගින් OR හෝ AND මෙහෙයුම් වලදී විචල්‍යයන් කාණ්ඩගත කරන ආකාරය ප්‍රතිඵලයට බලපාන්නේ නැති බව පෙන්වයි. OR සඳහා: A OR (B OR C) = (A OR B) OR C. AND සඳහා: A AND (B AND C) = (A AND B) AND C."
    },
    {
        questionText: "බූලීය වීජ ගණිතයේ 'විඝටන න්‍යාය' (Distributive Law) නිවැරදිව දක්වන්නේ කුමන ප්‍රකාශනයකින්ද?",
        options: [
            "A AND (B OR C) = (A AND B) OR (A AND C)",
            "A OR (B OR C) = (A OR B) OR C",
            "A OR B = B OR A",
            "A OR A = A",
            "A OR 1 = 1"
        ],
        correctAnswerIndex: 0,
        explanation: "විඝටන න්‍යාය මගින් OR මෙහෙයුම මත AND මෙහෙයුම හෝ AND මෙහෙයුම මත OR මෙහෙයුම ව්‍යාප්ත කළ හැකි ආකාරය විස්තර කරයි. A AND (B OR C) = (A AND B) OR (A AND C) සහ A OR (B AND C) = (A OR B) AND (A OR C)."
    },
    {
        questionText: "ඩි මෝර්ගන්ගේ න්‍යාය (De Morgan's Law) නිවැරදිව දක්වන්නේ කුමන ප්‍රකාශනයකින්ද?",
        options: [
            "NOT (A AND B) = (NOT A) OR (NOT B)",
            "A AND B = (NOT A) OR (NOT B)",
            "NOT (A OR B) = (NOT A) AND B",
            "A OR B = (NOT A) AND (NOT B)",
            "A AND (B OR C) = (A AND B) OR (A AND C)"
        ],
        correctAnswerIndex: 0,
        explanation: "ඩි මෝර්ගන්ගේ න්‍යාය අංකිත තාර්කිකයේ ඉතා වැදගත් නීති දෙකකි. ඒවා නම්: NOT (A AND B) = (NOT A) OR (NOT B) (AND මෙහෙයුමේ ප්‍රතිලෝමය, ආදානවල ප්‍රතිලෝමවල OR මෙහෙයුමට සමාන වේ) සහ NOT (A OR B) = (NOT A) AND (NOT B) (OR මෙහෙයුමේ ප්‍රතිලෝමය, ආදානවල ප්‍රතිලෝමවල AND මෙහෙයුමට සමාන වේ)."
    },
    {
        questionText: "තාර්කික ප්‍රකාශ සරල කිරීමේ (Simplification) අවශ්‍යතාවය කුමක්ද?",
        options: [
            "පරිපථයේ සංරචක සංඛ්‍යාව අඩු කිරීම, බලශක්ති පරිභෝජනය අඩු කිරීම සහ ක්‍රියාකාරී වේගය වැඩි කිරීම.",
            "පරිපථයේ සංරචක සංඛ්‍යාව වැඩි කිරීම.",
            "පරිපථයේ බලශක්ති පරිභෝජනය වැඩි කිරීම.",
            "පරිපථයේ ක්‍රියාකාරී වේගය අඩු කිරීම.",
            "පරිපථයේ පිරිවැය වැඩි කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කික ප්‍රකාශ සරල කිරීම මගින් අදාළ පරිපථය නිර්මාණය කිරීමට අවශ්‍ය තාර්කික ද්වාර ගණන අඩු කරගත හැක. මෙය පරිපථයේ පිරිවැය, සංකීර්ණත්වය සහ බලශක්ති පරිභෝජනය අඩු කරන අතර, එහි ක්‍රියාකාරී වේගය වැඩි කිරීමට ද උපකාරී වේ."
    },
    {
        questionText: "Karnaugh Map (K-map) භාවිතා කරන්නේ කුමක් සඳහාද?",
        options: [
            "බූලීය ප්‍රකාශ දෘශ්‍යමය වශයෙන් සරල කිරීම සඳහා.",
            "තාර්කික ද්වාරවල භෞතික ප්‍රමාණය මැනීම සඳහා.",
            "පරිපථයේ බලශක්ති පරිභෝජනය ගණනය කිරීම සඳහා.",
            "තාර්කික ද්වාරවල ප්‍රචාරණ ප්‍රමාදය මැනීම සඳහා.",
            "සත්‍යතා වගු නිර්මාණය කිරීම සඳහා."
        ],
        correctAnswerIndex: 0,
        explanation: "Karnaugh Map යනු බූලීය වීජ ගණිත ප්‍රකාශයන් දෘශ්‍යමය වශයෙන් සරල කිරීම සඳහා භාවිතා කරන චිත්‍රමය ක්‍රමයකි. එය ද්විමය කේතවල සමීපතාවය මත පදනම්ව විචල්‍යයන් කාණ්ඩගත කිරීමෙන් සංකීර්ණ බූලීය ප්‍රකාශයන් පහසුවෙන් සරල කිරීමට උපකාරී වේ."
    },
    {
        questionText: "ගුණිතයන්ගේ ඓක්‍යය (Sum of Products - SOP) ආකාරයේ තාර්කික ප්‍රකාශනයක් නිවැරදිව දක්වන්නේ කුමක්ද?",
        options: [
            "AND මෙහෙයුම්වල ප්‍රතිඵල OR මෙහෙයුම් මගින් සම්බන්ධ කිරීම.",
            "OR මෙහෙයුම්වල ප්‍රතිඵල AND මෙහෙයුම් මගින් සම්බන්ධ කිරීම.",
            "NOT මෙහෙයුම්වල ප්‍රතිඵල AND මෙහෙයුම් මගින් සම්බන්ධ කිරීම.",
            "NOT මෙහෙයුම්වල ප්‍රතිඵල OR මෙහෙයුම් මගින් සම්බන්ධ කිරීම.",
            "ප්‍රතිදානවල එකතුව."
        ],
        correctAnswerIndex: 0,
        explanation: "Sum of Products (SOP) ආකාරයේ ප්‍රකාශනයක් යනු එක් එක් 'මිනිටර්ම්' (minterm - AND මෙහෙයුම්වල ප්‍රතිඵල) OR මෙහෙයුම් මගින් එකට සම්බන්ධ කිරීමයි. මිනිටර්ම් යනු යම් ආදාන සංයෝජනයක් සඳහා ප්‍රතිදානය 1 වන අවස්ථා නිරූපණය කරන පද වේ."
    },
    {
        questionText: "ඓක්‍යයන්ගේ ගුණිතය (Product of Sums - POS) ආකාරයේ තාර්කික ප්‍රකාශනයක් නිවැරදිව දක්වන්නේ කුමක්ද?",
        options: [
            "OR මෙහෙයුම්වල ප්‍රතිඵල (මැක්ස්ටර්ම්) AND මෙහෙයුම් මගින් සම්බන්ධ කිරීම.",
            "AND මෙහෙයුම්වල ප්‍රතිඵල OR මෙහෙයුම් මගින් සම්බන්ධ කිරීම.",
            "NOT මෙහෙයුම්වල ප්‍රතිඵල AND මෙහෙයුම් මගින් සම්බන්ධ කිරීම.",
            "NOT මෙහෙයුම්වල ප්‍රතිඵල OR මෙහෙයුම් මගින් සම්බන්ධ කිරීම.",
            "ආදානවල ගුණිතය."
        ],
        correctAnswerIndex: 0,
        explanation: "Product of Sums (POS) ආකාරයේ ප්‍රකාශනයක් යනු එක් එක් 'මැක්ස්ටර්ම්' (maxterm - OR මෙහෙයුම්වල ප්‍රතිඵල) AND මෙහෙයුම් මගින් එකට සම්බන්ධ කිරීමයි. මැක්ස්ටර්ම් යනු යම් ආදාන සංයෝජනයක් සඳහා ප්‍රතිදානය 0 වන අවස්ථා නිරූපණය කරන පද වේ."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් වන A OR 1 සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "1",
            "A",
            "0",
            "NOT A",
            "A OR 1"
        ],
        correctAnswerIndex: 0,
        explanation: "බූලීය වීජ ගණිතයේ නීතිවලට අනුව, OR මෙහෙයුමකදී එක් ආදානයක් 1 නම්, ප්‍රතිදානය සැමවිටම 1 වේ. එබැවින් A OR 1 = 1."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් වන A AND 0 සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "0",
            "A",
            "1",
            "NOT A",
            "A AND 0"
        ],
        correctAnswerIndex: 0,
        explanation: "බූලීය වීජ ගණිතයේ නීතිවලට අනුව, AND මෙහෙයුමකදී එක් ආදානයක් 0 නම්, ප්‍රතිදානය සැමවිටම 0 වේ. එබැවින් A AND 0 = 0."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් වන A OR A සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "A",
            "1",
            "0",
            "NOT A",
            "2A"
        ],
        correctAnswerIndex: 0,
        explanation: "බූලීය වීජ ගණිතයේ නීතිවලට අනුව, A OR A = A (Idempotence Law)."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් වන A AND A සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "A",
            "1",
            "0",
            "NOT A",
            "A^2"
        ],
        correctAnswerIndex: 0,
        explanation: "බූලීය වීජ ගණිතයේ නීතිවලට අනුව, A AND A = A (Idempotence Law)."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් වන A OR NOT A සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "1",
            "0",
            "A",
            "NOT A",
            "2"
        ],
        correctAnswerIndex: 0,
        explanation: "බූලීය වීජ ගණිතයේ නීතිවලට අනුව, විචල්‍යයක් සහ එහි ප්‍රතිලෝමය අතර OR මෙහෙයුම සැමවිටම 1 වේ. A OR NOT A = 1."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් වන A AND NOT A සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "0",
            "1",
            "A",
            "NOT A",
            "අර්ථ දක්වා නැත."
        ],
        correctAnswerIndex: 0,
        explanation: "බූලීය වීජ ගණිතයේ නීතිවලට අනුව, විචල්‍යයක් සහ එහි ප්‍රතිලෝමය අතර AND මෙහෙයුම සැමවිටම 0 වේ. A AND NOT A = 0."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් වන A OR (A AND B) සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "A",
            "B",
            "A OR B",
            "A AND B",
            "1"
        ],
        correctAnswerIndex: 0,
        explanation: "මෙය 'අතිරික්ත න්‍යාය' (Redundancy Law) හෝ අවශෝෂණ න්‍යාය (Absorption Law) ලෙස හැඳින්වේ. A OR (A AND B) = A(1 OR B). බූලීය වීජ ගණිතයේදී 1 OR B = 1 බැවින්, A AND 1 = A වේ. එබැවින්, A OR (A AND B) = A."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් වන A AND (A OR B) සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "A",
            "B",
            "A OR B",
            "A AND B",
            "0"
        ],
        correctAnswerIndex: 0,
        explanation: "මෙයද අවශෝෂණ න්‍යායකි. A AND (A OR B) = (A AND A) OR (A AND B) = A OR (A AND B) = A."
    },
    {
        questionText: "K-map එකක 'octate' එකක් යනු කුමක්ද?",
        options: [
            "2^3 = 8 යාබද 1s කාණ්ඩයක්.",
            "2^2 = 4 යාබද 1s කාණ්ඩයක්.",
            "2^1 = 2 යාබද 1s කාණ්ඩයක්.",
            "2^0 = 1 යාබද 1s කාණ්ඩයක්.",
            "විචල්‍ය 8ක් සහිත ප්‍රකාශනයක්."
        ],
        correctAnswerIndex: 0,
        explanation: "K-map එකක සරල කිරීමේදී, යාබද 1s (හෝ 0s) කාණ්ඩගත කරයි. 'Octate' එකක් යනු 2^3 = 8 යාබද 1s (හෝ 0s) කාණ්ඩයකි. මෙය විශාලතම කාණ්ඩය වන අතර, එය එක් විචල්‍යයකින් ප්‍රකාශනය සරල කරයි."
    },
    {
        questionText: "K-map එකක 'quad' එකක් යනු කුමක්ද?",
        options: [
            "2^2 = 4 යාබද 1s කාණ්ඩයක්.",
            "2^3 = 8 යාබද 1s කාණ්ඩයක්.",
            "2^1 = 2 යාබද 1s කාණ්ඩයක්.",
            "2^0 = 1 යාබද 1s කාණ්ඩයක්.",
            "විචල්‍ය 4ක් සහිත ප්‍රකාශනයක්."
        ],
        correctAnswerIndex: 0,
        explanation: "K-map එකක 'quad' එකක් යනු 2^2 = 4 යාබද 1s (හෝ 0s) කාණ්ඩයකි. මෙය විචල්‍ය දෙකකින් ප්‍රකාශනය සරල කරයි."
    },
    {
        questionText: "K-map එකක 'pair' එකක් යනු කුමක්ද?",
        options: [
            "2^1 = 2 යාබද 1s කාණ්ඩයක්.",
            "2^2 = 4 යාබද 1s කාණ්ඩයක්.",
            "2^3 = 8 යාබද 1s කාණ්ඩයක්.",
            "2^0 = 1 යාබද 1s කාණ්ඩයක්.",
            "විචල්‍ය 2ක් සහිත ප්‍රකාශනයක්."
        ],
        correctAnswerIndex: 0,
        explanation: "K-map එකක 'pair' එකක් යනු 2^1 = 2 යාබද 1s (හෝ 0s) කාණ්ඩයකි. මෙය එක් විචල්‍යයකින් ප්‍රකාශනය සරල කරයි."
    },
    {
        questionText: "K-map එකක 1s කාණ්ඩගත කිරීමේදී සලකා බැලිය යුතු ප්‍රධාන නීතිය කුමක්ද?",
        options: [
            "කාණ්ඩවල ප්‍රමාණය 2 හි බලයක් (1, 2, 4, 8, ...) විය යුතු අතර, ඒවා හැකිතාක් විශාල විය යුතුය.",
            "කාණ්ඩවල ප්‍රමාණය ඕනෑම අංකයක් විය හැක.",
            "කාණ්ඩ එකිනෙක අතිච්ඡාදනය නොවිය යුතුය.",
            "කාණ්ඩවලට යාබද නොවන 1s අඩංගු විය හැක.",
            "කාණ්ඩවලට 0s අඩංගු විය යුතුය."
        ],
        correctAnswerIndex: 0,
        explanation: "K-map සරල කිරීමේදී, 1s (හෝ 0s) කාණ්ඩගත කිරීමේ ප්‍රධාන නීති දෙකක් තිබේ: කාණ්ඩවල ප්‍රමාණය 2 හි බලයක් විය යුතු අතර (1, 2, 4, 8, ...), කාණ්ඩ හැකිතාක් විශාල විය යුතුය. එසේම, කාණ්ඩ අතිච්ඡාදනය විය හැකි අතර, සිතියමේ දාරවල් 'එකට ඔතන' (wrap around) ආකාරයට යාබද ලෙස සැලකේ."
    },
    {
        questionText: "විචල්‍ය 3ක් සහිත බූලීය ප්‍රකාශනයක් සඳහා K-map එකක කොටු කීයක් (cells) තිබේද?",
        options: [
            "8",
            "4",
            "16",
            "3",
            "6"
        ],
        correctAnswerIndex: 0,
        explanation: "විචල්‍ය n ක් සඳහා K-map එකක 2^n කොටු ඇත. විචල්‍ය 3ක් සඳහා 2^3 = 8 කොටු ඇත."
    },
    {
        questionText: "විචල්‍ය 4ක් සහිත බූලීය ප්‍රකාශනයක් සඳහා K-map එකක කොටු කීයක් (cells) තිබේද?",
        options: [
            "16",
            "8",
            "4",
            "12",
            "32"
        ],
        correctAnswerIndex: 0,
        explanation: "විචල්‍ය n ක් සඳහා K-map එකක 2^n කොටු ඇත. විචල්‍ය 4ක් සඳහා 2^4 = 16 කොටු ඇත."
    },
    {
        questionText: "K-map එකක සරල කිරීමේදී 'don't care' කොන්දේසි (d) භාවිතා කිරීමේ අරමුණ කුමක්ද?",
        options: [
            "ප්‍රකාශනය තවදුරටත් සරල කිරීමට උපකාරී වන පරිදි, ඒවා 0s හෝ 1s ලෙස සැලකීමට ඇති හැකියාව.",
            "ඒවා සැමවිටම 0s ලෙස සැලකීම.",
            "ඒවා සැමවිටම 1s ලෙස සැලකීම.",
            "ඒවා සරල කිරීමේ ක්‍රියාවලියට බල නොපාන බැවින් ඒවා නොසලකා හැරීම.",
            "ඒවා වැරදි ආදාන සංයෝජන බව දැක්වීම."
        ],
        correctAnswerIndex: 0,
        explanation: "'Don't care' කොන්දේසි (d හෝ X ලෙස සලකුණු කරයි) යනු යම් යෙදීමක් සඳහා කිසි විටෙකත් සිදු නොවන ආදාන සංයෝජන හෝ ඒවායේ ප්‍රතිදානය කුමක් වුවත් කමක් නැති අවස්ථා වේ. K-map සරල කිරීමේදී, මෙම 'd' කොටු කාණ්ඩවල ප්‍රමාණය වැඩි කිරීමට උපකාරී වන පරිදි, අවශ්‍ය පරිදි 0s හෝ 1s ලෙස සලකා සරල කිරීමේ කාර්යක්ෂමතාව වැඩි කළ හැක."
    },
    {
        questionText: "සත්‍යතා වගුවකින් SOP ප්‍රකාශනයක් නිපදවීමේදී, අවධානය යොමු කරන්නේ කුමන ප්‍රතිදාන අගයන්ටද?",
        options: [
            "ප්‍රතිදානය 1 වන අවස්ථාවලට.",
            "ප්‍රතිදානය 0 වන අවස්ථාවලට.",
            "සියලුම ප්‍රතිදාන අගයන්ට.",
            "ආදාන අගයන්ට පමණක්.",
            "අවම ආදාන සංඛ්‍යාවට."
        ],
        correctAnswerIndex: 0,
        explanation: "SOP (Sum of Products) ප්‍රකාශනයක් නිපදවීමේදී, සත්‍යතා වගුවේ ප්‍රතිදානය 1 වන එක් එක් පේළියට අනුරූප වන 'මිනිටර්ම්' (minterm) ලිවීමට අවධානය යොමු කරයි. ඉන්පසු, මෙම මිනිටර්ම් OR මෙහෙයුමකින් එකට සම්බන්ධ කරයි."
    },
    {
        questionText: "සත්‍යතා වගුවකින් POS ප්‍රකාශනයක් නිපදවීමේදී, අවධානය යොමු කරන්නේ කුමන ප්‍රතිදාන අගයන්ටද?",
        options: [
            "ප්‍රතිදානය 0 වන අවස්ථාවලට.",
            "ප්‍රතිදානය 1 වන අවස්ථාවලට.",
            "සියලුම ප්‍රතිදාන අගයන්ට.",
            "ආදාන අගයන්ට පමණක්.",
            "උපරිම ආදාන සංඛ්‍යාවට."
        ],
        correctAnswerIndex: 0,
        explanation: "POS (Product of Sums) ප්‍රකාශනයක් නිපදවීමේදී, සත්‍යතා වගුවේ ප්‍රතිදානය 0 වන එක් එක් පේළියට අනුරූප වන 'මැක්ස්ටර්ම්' (maxterm) ලිවීමට අවධානය යොමු කරයි. ඉන්පසු, මෙම මැක්ස්ටර්ම් AND මෙහෙයුමකින් එකට සම්බන්ධ කරයි."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් වන A AND (B OR NOT B) සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "A",
            "0",
            "1",
            "B",
            "NOT A"
        ],
        correctAnswerIndex: 0,
        explanation: "බූලීය වීජ ගණිතයේ නීතිවලට අනුව, B OR NOT B = 1 වේ. එබැවින්, A AND (B OR NOT B) = A AND 1 = A."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් වන A OR (NOT A AND B) සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "A OR B",
            "A",
            "B",
            "NOT A OR B",
            "A AND B"
        ],
        correctAnswerIndex: 0,
        explanation: "මෙය 'ද්විත්ව අවශෝෂණ න්‍යාය' ලෙසද හැඳින්විය හැක. A OR (NOT A AND B) = (A OR NOT A) AND (A OR B) = 1 AND (A OR B) = A OR B."
    },
    {
        questionText: "බූලීය වීජ ගණිතයේ 'දේශනාය න්‍යාය' (Commutative Law) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "මෙහෙයුම්වල විචල්‍යයන්ගේ අනුපිළිවෙල ප්‍රතිඵලයට බලපාන්නේ නැති බව.",
            "මෙහෙයුම්වල විචල්‍යයන්ගේ අනුපිළිවෙල ප්‍රතිඵලයට බලපාන බව.",
            "මෙහෙයුම්වල විචල්‍යයන් කාණ්ඩගත කිරීමේ ක්‍රමය ප්‍රතිඵලයට බලපාන බව.",
            "යම් විචල්‍යයකට තිබිය හැක්කේ ද්විමය අගයන් දෙකක් පමණක් බව.",
            "යම් විචල්‍යයකට තිබිය හැක්කේ ද්විමය අගයන් තුනක් පමණක් බව."
        ],
        correctAnswerIndex: 0,
        explanation: "දේශනාය න්‍යාය මගින් OR හෝ AND මෙහෙයුම්වලදී විචල්‍යයන්ගේ අනුපිළිවෙල වෙනස් කිරීමෙන් ප්‍රතිඵලය වෙනස් නොවන බව පෙන්වයි. OR සඳහා: A OR B = B OR A. AND සඳහා: A AND B = B AND A."
    },
    {
        questionText: "ඩි මෝර්ගන්ගේ දෙවන න්‍යාය කුමක්ද?",
        options: [
            "NOT (A OR B) = (NOT A) AND (NOT B)",
            "NOT (A AND B) = (NOT A) OR (NOT B)",
            "A OR (B AND C) = (A OR B) AND (A OR C)",
            "A AND (B OR C) = (A AND B) OR (A AND C)",
            "A OR 1 = 1"
        ],
        correctAnswerIndex: 0,
        explanation: "ඩි මෝර්ගන්ගේ දෙවන න්‍යාය වන්නේ NOT (A OR B) = (NOT A) AND (NOT B) යන්නයි. මෙහිදී OR මෙහෙයුමේ සමස්ත ප්‍රතිලෝමය, ආදානවල ප්‍රතිලෝමවල AND මෙහෙයුමට සමාන වේ."
    },
    {
        questionText: "තාර්කික ප්‍රකාශනයක් K-map එකකට ඇතුළු කිරීමේදී, Gray Code අනුපිළිවෙල (උදා: 00, 01, 11, 10) භාවිතා කරන්නේ ඇයි?",
        options: [
            "යාබද කොටු අතර වෙනස් වන්නේ එක් බිට් එකක් පමණක් වන බව සහතික කිරීමට, එමගින් කාණ්ඩගත කිරීම පහසු වන බැවිනි.",
            "සිතියමේ ප්‍රමාණය අඩු කිරීමට.",
            "සිතියම කියවීමට පහසු කිරීමට.",
            "සිතියමේ ඇති 1s ගණන ගණනය කිරීමට.",
            "සිතියමේ ඇති 0s ගණන ගණනය කිරීමට."
        ],
        correctAnswerIndex: 0,
        explanation: "K-map හි පේළි සහ තීරු ලේබල් කිරීම සඳහා Gray Code අනුපිළිවෙල භාවිතා කරනු ලැබේ. මෙම කේතයේ විශේෂත්වය වන්නේ යාබද කේත වචන දෙකක් අතර වෙනස් වන්නේ එක් බිට් එකක් පමණක් වීමයි. මෙය K-map එකේ යාබද කොටු (කායිකව මෙන්ම දාර ඔස්සේ) අතර වෙනස් වන්නේ එක් විචල්‍යයක් පමණක් බව සහතික කරන බැවින්, කාණ්ඩගත කිරීමේ ක්‍රියාවලිය සරල වේ."
    },
    {
        questionText: "ද්වි අවස්ථා තර්කයේ 'Postulates' (උපකල්පන) යනු කුමක්ද?",
        options: [
            "ද්වි අවස්ථා පද්ධතියක මූලික නීති සහ රීති.",
            "ඕනෑම බූලීය ප්‍රකාශනයක් සරල කිරීමේ ක්‍රම.",
            "තාර්කික ද්වාරවල භෞතික ක්‍රියාකාරීත්වය.",
            "K-map භාවිතයෙන් සරල කිරීමේ පියවර.",
            "ඩි මෝර්ගන්ගේ න්‍යාය."
        ],
        correctAnswerIndex: 0,
        explanation: "ද්වි අවස්ථා තර්කයේ 'Postulates' යනු තාර්කික පද්ධතියක් නිර්වචනය කරන මූලික සත්‍යයන් හෝ උපකල්පන වේ. මේවා බූලීය වීජ ගණිතයේ පදනම වන අතර, අනෙකුත් සියලුම නීති සහ ප්‍රමේයයන් මේවායින් ව්‍යුත්පන්න වේ."
    },
    {
        questionText: "K-map එකක 'prime implicant' (ප්‍රධාන ගම්‍ය) යනු කුමක්ද?",
        options: [
            "K-map එකක 1s කාණ්ඩගත කළ හැකි විශාලතම කාණ්ඩය.",
            "K-map එකක සරලම 0s කාණ්ඩය.",
            "K-map එකක ඇති ඕනෑම 1.",
            "K-map එකක ඇති ඕනෑම 0.",
            "K-map එකක භාවිතා නොකරන කොටුවක්."
        ],
        correctAnswerIndex: 0,
        explanation: "K-map එකක 'prime implicant' යනු 2 හි බලයක් වන පරිදි යාබද 1s (හෝ 0s) කාණ්ඩයක් වන අතර, එම කාණ්ඩය තවත් විශාල කාණ්ඩයක කොටසක් නොවේ. සරල කළ ප්‍රකාශනයක් ලබා ගැනීම සඳහා මේවා අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "K-map එකක 'essential prime implicant' (අත්‍යවශ්‍ය ප්‍රධාන ගම්‍ය) යනු කුමක්ද?",
        options: [
            "එය ආවරණය නොකළ 1ක් ආවරණය කරන ප්‍රධාන ගම්‍යයක් වන අතර, එම 1 ආවරණය කළ හැකි වෙනත් කිසිදු ප්‍රධාන ගම්‍යයක් නොමැත.",
            "K-map එකක ඇති කුඩාම ප්‍රධාන ගම්‍යය.",
            "K-map එකක ඇති විශාලතම ප්‍රධාන ගම්‍යය.",
            "K-map එකක ඇති ඕනෑම ප්‍රධාන ගම්‍යය.",
            "K-map එකක ඇති 0s ආවරණය කරන ප්‍රධාන ගම්‍යය."
        ],
        correctAnswerIndex: 0,
        explanation: "අත්‍යවශ්‍ය ප්‍රධාන ගම්‍යයක් යනු අවම සරල කළ ප්‍රකාශනය ලබා ගැනීම සඳහා අනිවාර්යයෙන්ම තෝරාගත යුතු ප්‍රධාන ගම්‍යයකි. එයට අදාළ වන 1ක් (හෝ 0ක්) වෙනත් කිසිදු ප්‍රධාන ගම්‍යයකින් ආවරණය නොවේ."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් සරල කිරීමේදී 'Quine-McCluskey' ක්‍රමය භාවිතා කරන්නේ ඇයි?",
        options: [
            "K-map ක්‍රමයට වඩා වැඩි විචල්‍ය සංඛ්‍යාවක් සහිත ප්‍රකාශයන් සරල කිරීම සඳහා.",
            "K-map ක්‍රමයට වඩා අඩු විචල්‍ය සංඛ්‍යාවක් සහිත ප්‍රකාශයන් සරල කිරීම සඳහා.",
            "K-map ක්‍රමය භාවිතා කළ නොහැකි අවස්ථා වලදී පමණක්.",
            "තාර්කික ද්වාරවල භෞතික හැඩය නිර්ණය කිරීම සඳහා.",
            "පරිපථයේ බලශක්ති පරිභෝජනය ගණනය කිරීම සඳහා."
        ],
        correctAnswerIndex: 0,
        explanation: "Quine-McCluskey ක්‍රමය යනු බූලීය ප්‍රකාශයන් සරල කිරීම සඳහා වන ඇල්ගොරිතම ක්‍රමයකි. එය K-map ක්‍රමයට වඩා විචල්‍ය සංඛ්‍යාව වැඩි වන විට (සාමාන්‍යයෙන් 5ක් හෝ ඊට වැඩි) වඩා කාර්යක්ෂම වන අතර, පරිගණක මගින් ස්වයංක්‍රීයව සරල කිරීම සඳහා ද යොදා ගත හැක."
    },
    {
        questionText: "සත්‍යතා වගුවකින් SOP ප්‍රකාශනයක් POS ප්‍රකාශනයක් බවට පරිවර්තනය කරන්නේ කෙසේද?",
        options: [
            "SOP ප්‍රකාශනයෙන් ප්‍රතිදානය 1 වන අවස්ථා ලබාගෙන, POS ප්‍රකාශනයෙන් ප්‍රතිදානය 0 වන අවස්ථා ලබාගෙන, ඒවා ඩි මෝර්ගන්ගේ න්‍යාය භාවිතයෙන් පරිවර්තනය කිරීමෙන්.",
            "සත්‍යතා වගුවේ සියලුම 0s 1s ලෙස වෙනස් කිරීමෙන්.",
            "සත්‍යතා වගුවේ සියලුම 1s 0s ලෙස වෙනස් කිරීමෙන්.",
            "ඩි මෝර්ගන්ගේ න්‍යාය භාවිතයෙන් පමණක්.",
            "කිසිදු පරිවර්තනයක් අවශ්‍ය නොවේ."
        ],
        correctAnswerIndex: 0,
        explanation: "SOP සිට POS (හෝ අනෙක් අතට) පරිවර්තනය කිරීමට ක්‍රම කිහිපයක් ඇත. එක් ක්‍රමයක් නම්, මුලින්ම සත්‍යතා වගුවෙන් ප්‍රතිදානය 1 වන අවස්ථා (SOP සඳහා) හෝ 0 වන අවස්ථා (POS සඳහා) හඳුනා ගැනීමයි. පසුව, අනෙක් ආකාරයේ ප්‍රකාශනය සඳහා (උදා: SOP සිට POS) ප්‍රතිවිරුද්ධ ප්‍රතිදාන අගයන් (0s) ගෙන ඒවාට අදාළ මැක්ස්ටර්ම් ලියා ඒවා AND මෙහෙයුමකින් සම්බන්ධ කිරීමයි. ඩි මෝර්ගන්ගේ න්‍යාය ද මෙම පරිවර්තන සඳහා භාවිතා කළ හැක."
    },
    {
        questionText: "තාර්කික ප්‍රකාශනයක් වන NOT (A OR B) OR (A AND B) සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "NOT (A XOR B)",
            "A OR B",
            "A AND B",
            "A XOR B",
            "0"
        ],
        correctAnswerIndex: 0,
        explanation: "ඩි මෝර්ගන්ගේ න්‍යාය අනුව NOT (A OR B) = (NOT A) AND (NOT B). එබැවින්, ප්‍රකාශනය ((NOT A) AND (NOT B)) OR (A AND B) ලෙස ලිවිය හැක. මෙය A XNOR B හි ප්‍රකාශනයයි. XNOR ද්වාරය A සහ B සමාන නම් ප්‍රතිදානය 1 ලබා දෙන අතර, A සහ B එකිනෙකට වෙනස් නම් ප්‍රතිදානය 0 ලබා දෙයි."
    },
    {
        questionText: "බූලීය වීජ ගණිතයේ 'විශේෂිත න්‍යාය' (Consensus Theorem) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "(A AND B) OR (NOT A AND C) OR (B AND C) = (A AND B) OR (NOT A AND C)",
            "A OR (A AND B) = A",
            "A AND (A OR B) = A",
            "A OR NOT A = 1",
            "A AND NOT A = 0"
        ],
        correctAnswerIndex: 0,
        explanation: "Consensus Theorem යනු තාර්කික ප්‍රකාශයන් සරල කිරීමේදී භාවිතා කරන වැදගත් ප්‍රමේයයකි. එහිදී, තුන්වන පදයක් (B AND C) අනවශ්‍ය වන අතර, එය අනෙකුත් පද දෙකෙන් (A AND B, NOT A AND C) ව්‍යුත්පන්න කළ හැකි බැවින් ඉවත් කළ හැක. (A AND B) OR (NOT A AND C) OR (B AND C) = (A AND B) OR (NOT A AND C)."
    },
    {
        questionText: "තාර්කික ප්‍රකාශනයක් 'canonical SOP form' (කැනොනිකල් SOP ආකාරය) යනු කුමක්ද?",
        options: [
            "සත්‍යතා වගුවේ ප්‍රතිදානය 1 වන සියලුම මිනිටර්ම්වල OR මෙහෙයුම.",
            "සත්‍යතා වගුවේ ප්‍රතිදානය 0 වන සියලුම මැක්ස්ටර්ම්වල AND මෙහෙයුම.",
            "සරල කළ SOP ප්‍රකාශනය.",
            "සරල කළ POS ප්‍රකාශනය.",
            "ඕනෑම SOP ප්‍රකාශනයක්."
        ],
        correctAnswerIndex: 0,
        explanation: "Canonical SOP form යනු බූලීය ප්‍රකාශනයක සම්පූර්ණ (සහ අද්විතීය) SOP ආකාරයයි. මෙහිදී සත්‍යතා වගුවේ ප්‍රතිදානය 1 වන සෑම පේළියකටම අනුරූප වන මිනිටර්ම් එකක් බැගින් ඇති අතර, ඒ සියල්ල OR මෙහෙයුමකින් සම්බන්ධ වේ. සෑම මිනිටර්මයක් තුළම සියලුම ආදාන විචල්‍යයන් (හෝ ඒවායේ ප්‍රතිලෝම) අඩංගු වේ."
    },
    {
        questionText: "තාර්කික ප්‍රකාශනයක් 'canonical POS form' (කැනොනිකල් POS ආකාරය) යනු කුමක්ද?",
        options: [
            "සත්‍යතා වගුවේ ප්‍රතිදානය 0 වන සියලුම මැක්ස්ටර්ම්වල AND මෙහෙයුම.",
            "සත්‍යතා වගුවේ ප්‍රතිදානය 1 වන සියලුම මිනිටර්ම්වල OR මෙහෙයුම.",
            "සරල කළ POS ප්‍රකාශනය.",
            "සරල කළ SOP ප්‍රකාශනය.",
            "ඕනෑම POS ප්‍රකාශනයක්."
        ],
        correctAnswerIndex: 0,
        explanation: "Canonical POS form යනු බූලීය ප්‍රකාශනයක සම්පූර්ණ (සහ අද්විතීය) POS ආකාරයයි. මෙහිදී සත්‍යතා වගුවේ ප්‍රතිදානය 0 වන සෑම පේළියකටම අනුරූප වන මැක්ස්ටර්ම් එකක් බැගින් ඇති අතර, ඒ සියල්ල AND මෙහෙයුමකින් සම්බන්ධ වේ. සෑම මැක්ස්ටර්මයක් තුළම සියලුම ආදාන විචල්‍යයන් (හෝ ඒවායේ ප්‍රතිලෝම) අඩංගු වේ."
    },
    {
        questionText: "බූලීය වීජ ගණිතයේ 'ද්විත්ව න්‍යාය' (Duality Principle) යනු කුමක්ද?",
        options: [
            "යම් බූලීය ප්‍රකාශනයක AND මෙහෙයුම් OR බවටත්, OR මෙහෙයුම් AND බවටත්, 0s 1s බවටත්, 1s 0s බවටත්, විචල්‍යයන් ඔවුන්ගේ ප්‍රතිලෝම බවටත් (හෝ නොවන බවටත්) වෙනස් කිරීමෙන් නව වලංගු ප්‍රකාශනයක් ලබා ගැනීම.",
            "ඩි මෝර්ගන්ගේ න්‍යාය පමණක් භාවිතයෙන් ප්‍රකාශනයක් සරල කිරීම.",
            "K-map භාවිතයෙන් ප්‍රකාශනයක් සරල කිරීම.",
            "සත්‍යතා වගුවක් නිර්මාණය කිරීම.",
            "පරිපථයක් නිර්මාණය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Duality Principle යනු බූලීය වීජ ගණිතයේ වැදගත් සංකල්පයකි. ඕනෑම වලංගු බූලීය ප්‍රකාශනයක් (identity) සඳහා, එහි ද්විත්ව ප්‍රකාශනයක් ද වලංගු වේ. මෙය ලබා ගන්නේ AND මෙහෙයුම් OR බවටත්, OR මෙහෙයුම් AND බවටත්, 0s 1s බවටත්, 1s 0s බවටත් වෙනස් කිරීමෙනි. විචල්‍යයන් ඔවුන්ගේ ප්‍රතිලෝම බවට වෙනස් කිරීම ද සමහර විට මෙම මූලධර්මයේ කොටසක් ලෙස සැලකේ."
    },
    {
        questionText: "K-map එකක 'rolling' හෝ 'wrapping' යනු කුමක්ද?",
        options: [
            "සිතියමේ දාර (ඉහළ-පහළ, වම්-දකුණු) එකිනෙකට යාබද ලෙස සැලකීම.",
            "සිතියම මත 1s කාණ්ඩගත කිරීමේ ක්‍රියාවලිය.",
            "සිතියම මත 0s කාණ්ඩගත කිරීමේ ක්‍රියාවලිය.",
            "සිතියමේ ඇති 'don't care' කොන්දේසි හඳුනා ගැනීම.",
            "සිතියමේ ඇති විචල්‍ය ගණන වෙනස් කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "K-map එකක 'rolling' හෝ 'wrapping' යනු සිතියමේ දාරවල ඇති කොටු (cells) ද යාබද ලෙස සැලකීමේ ක්‍රියාවලියයි. උදාහරණයක් ලෙස, ඉහළම පේළියේ කොටු පහළම පේළියේ කොටු වලට යාබද වන අතර, වම්පසම තීරුවේ කොටු දකුණුපසම තීරුවේ කොටු වලට යාබද වේ. මෙය කාණ්ඩගත කිරීමේදී විශාල කාණ්ඩ සෑදීමට උපකාරී වේ."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් $A \cdot B + A \cdot \overline{B}$ සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "A",
            "B",
            "A AND B",
            "A OR B",
            "0"
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රකාශනයෙන් A පොදු සාධකයක් ලෙස ගත් විට, $A \cdot (B + \overline{B})$ ලැබේ. බූලීය නීතියට අනුව $B + \overline{B} = 1$ බැවින්, $A \cdot 1 = A$ වේ. එබැවින්, $A \cdot B + A \cdot \overline{B} = A$."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් $A + B + A \cdot B$ සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "A + B",
            "A AND B",
            "A",
            "B",
            "1"
        ],
        correctAnswerIndex: 0,
        explanation: "මෙය අවශෝෂණ න්‍යායෙහි දිගුවකි. $A + B + A \cdot B = (A + A \cdot B) + B = A + B$. (මක්නිසාද යත් $A + A \cdot B = A$)."
    },
    {
        questionText: "තාර්කික ප්‍රකාශනයක් $A \cdot (A + B + C)$ සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "A",
            "B",
            "C",
            "A + B + C",
            "A AND B AND C"
        ],
        correctAnswerIndex: 0,
        explanation: "විඝටන න්‍යාය අනුව: $A \cdot (A + B + C) = A \cdot A + A \cdot B + A \cdot C$. ඉන්පසු Idempotence Law ($A \cdot A = A$) සහ Absorption Law ($A + A \cdot B = A$) භාවිතයෙන්, $A + A \cdot B + A \cdot C = A + A \cdot C = A$."
    },
    {
        questionText: "K-map එකක සරල කිරීමේදී 0s කාණ්ඩගත කිරීමේ අරමුණ කුමක්ද?",
        options: [
            "POS (Product of Sums) ආකාරයේ සරල කළ ප්‍රකාශනයක් ලබා ගැනීම සඳහා.",
            "SOP (Sum of Products) ආකාරයේ සරල කළ ප්‍රකාශනයක් ලබා ගැනීම සඳහා.",
            "ප්‍රකාශනය වඩාත් සංකීර්ණ කිරීම සඳහා.",
            "පරිපථයේ ද්වාර සංඛ්‍යාව වැඩි කිරීම සඳහා.",
            "පරිපථයේ බලශක්ති පරිභෝජනය වැඩි කිරීම සඳහා."
        ],
        correctAnswerIndex: 0,
        explanation: "K-map එකක 0s කාණ්ඩගත කිරීමෙන්, අපට POS (Product of Sums) ආකාරයේ සරල කළ ප්‍රකාශනයක් ලබාගත හැක. මෙය SOP ආකාරයට විකල්ප සරල කිරීමේ ක්‍රමයකි."
    },
    {
        questionText: "බූලීය වීජ ගණිතයේ 'පරිපූරණ න්‍යාය' (Complement Law) නිවැරදිව දක්වන්නේ කුමන ප්‍රකාශනයකින්ද?",
        options: [
            "A OR NOT A = 1 සහ A AND NOT A = 0",
            "A OR 0 = A",
            "A AND 1 = A",
            "A OR A = A",
            "A AND A = A"
        ],
        correctAnswerIndex: 0,
        explanation: "පරිපූරණ න්‍යාය යනු විචල්‍යයක් සහ එහි පරිපූරකය (complement/NOT) අතර සම්බන්ධතාවයයි. A OR NOT A = 1 (යම් විචල්‍යයක් සත්‍ය නම්, එහි ප්‍රතිලෝමය අසත්‍ය බැවින් ඒවායින් එකක් සැමවිටම සත්‍ය වේ). A AND NOT A = 0 (යම් විචල්‍යයක් සත්‍ය නම්, එහි ප්‍රතිලෝමය අසත්‍ය බැවින් ඒවා දෙකම එකවර සත්‍ය විය නොහැක)."
    },
    {
        questionText: "බූලීය වීජ ගණිතයේ 'අනන්‍යතා න්‍යාය' (Identity Law) නිවැරදිව දක්වන්නේ කුමන ප්‍රකාශනයකින්ද?",
        options: [
            "A OR 0 = A සහ A AND 1 = A",
            "A OR 1 = 1",
            "A AND 0 = 0",
            "A OR A = A",
            "A AND A = A"
        ],
        correctAnswerIndex: 0,
        explanation: "අනන්‍යතා න්‍යාය මගින් බූලීය 0 සහ 1 හි ගුණාංග විස්තර කරයි. A OR 0 = A (0 සමඟ OR කිරීමෙන් විචල්‍යයේ අගය වෙනස් නොවේ). A AND 1 = A (1 සමඟ AND කිරීමෙන් විචල්‍යයේ අගය වෙනස් නොවේ)."
    },
    {
        questionText: "ද්වි අවස්ථා තර්කයේදී 'ස්වසිද්ධිය' (Axioms) යනු කුමක්ද?",
        options: [
            "ගණිතමය පද්ධතියක සත්‍ය ලෙස පිළිගන්නා මූලික ප්‍රකාශයන්, ඒවා ඔප්පු කිරීමට අවශ්‍ය නොවේ.",
            "K-map සරල කිරීමේ පියවර.",
            "තාර්කික ද්වාර නිර්මාණය කිරීමේ නීති.",
            "බූලීය ප්‍රකාශන පරිවර්තනය කිරීමේ ක්‍රම.",
            "සත්‍යතා වගු භාවිතයේ ක්‍රමවේද."
        ],
        correctAnswerIndex: 0,
        explanation: "ගණිතයේදී axioms (ස්වසිද්ධි) යනු සත්‍ය ලෙස පිළිගන්නා මූලික ප්‍රකාශයන් හෝ නීති වේ, ඒවා ඔප්පු කිරීමට අවශ්‍ය නොවේ. බූලීය වීජ ගණිතයේදී, මේවා පද්ධතියේ ක්‍රියාකාරීත්වය සඳහා පදනම සපයයි. (උදා: 0 සහ 1 යන අගයන් පමණක් තිබීම, OR, AND, NOT ක්‍රියාකාරීත්වයන්)."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් වන NOT (NOT A) සරල කළ විට ලැබෙන අගය කුමක්ද?",
        options: [
            "A",
            "NOT A",
            "0",
            "1",
            "කිසිවක් නොවේ."
        ],
        correctAnswerIndex: 0,
        explanation: "ද්විත්ව ප්‍රතිලෝම න්‍යාය (Double Negation Law) අනුව, යම් විචල්‍යයක ප්‍රතිලෝමය දෙවරක් ප්‍රතිලෝම කළ විට නැවතත් මුල් විචල්‍යයම ලැබේ. එබැවින් NOT (NOT A) = A."
    },
    {
        questionText: "K-map එකක, යාබද කොටු (adjacent cells) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "කේත වචන අතර වෙනස් වන්නේ එක් බිට් එකක් පමණක් වන කොටු.",
            "සිතියම මත එකිනෙක අසල ඇති ඕනෑම කොටු.",
            "සිතියම මත විකර්ණව ඇති කොටු.",
            "සිතියම මත 0s පමණක් අඩංගු කොටු.",
            "සිතියම මත 1s පමණක් අඩංගු කොටු."
        ],
        correctAnswerIndex: 0,
        explanation: "K-map එකක යාබද කොටු යනු ඒවායේ ද්විමය කේත වචන අතර වෙනස් වන්නේ එක් බිට් එකක් පමණක් වන කොටු වේ. භෞතිකව ඒවා එකිනෙක අසල (ඉහළ-පහළ, වම්-දකුණු, හෝ දාර ඔස්සේ) පිහිටා ඇත. මෙම යාබදතාවය K-map සරල කිරීමේදී කාණ්ඩගත කිරීම සඳහා අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "තාර්කික ප්‍රකාශන සරල කිරීමේදී 'ප්‍රධාන ගම්‍ය වගුව' (Prime Implicant Chart) භාවිතා කරන්නේ ඇයි?",
        options: [
            "සියලුම මිනිටර්ම් ආවරණය වන පරිදි අවශ්‍ය වන අවම ප්‍රධාන ගම්‍යයන් තෝරා ගැනීම සඳහා.",
            "K-map එකේ ඇති සියලුම 1s හඳුනා ගැනීම සඳහා.",
            "K-map එකේ ඇති සියලුම 0s හඳුනා ගැනීම සඳහා.",
            "K-map එකේ ඇති 'don't care' කොන්දේසි හඳුනා ගැනීම සඳහා.",
            "බූලීය ප්‍රකාශන පරිවර්තනය කිරීම සඳහා."
        ],
        correctAnswerIndex: 0,
        explanation: "Prime Implicant Chart යනු Quine-McCluskey ක්‍රමයේ අවසාන පියවර වන අතර, එය K-map හි විශාල විචල්‍ය සංඛ්‍යාවක් සහිත ප්‍රකාශයන් සරල කිරීමේදී ද භාවිතා කළ හැක. මෙම වගුව මගින් සියලුම ප්‍රධාන ගම්‍යයන් සහ ඒවා ආවරණය කරන මිනිටර්ම් පෙන්වන අතර, සියලුම 1s ආවරණය වන පරිදි අවම ප්‍රධාන ගම්‍යයන් තෝරා ගැනීමට උපකාරී වේ."
    },
    {
        questionText: "බූලීය වීජ ගණිතය සහ සාමාන්‍ය වීජ ගණිතය අතර ඇති ප්‍රධාන වෙනස කුමක්ද?",
        options: [
            "බූලීය වීජ ගණිතයේදී විචල්‍යයන්ට තිබිය හැක්කේ 0 සහ 1 යන අගයන් පමණක් වන අතර, සාමාන්‍ය වීජ ගණිතයේදී විචල්‍යයන්ට ඕනෑම සංඛ්‍යාත්මක අගයක් ගත හැක.",
            "බූලීය වීජ ගණිතයේදී ගුණ කිරීම සහ එකතු කිරීමේ මෙහෙයුම් නොමැත.",
            "සාමාන්‍ය වීජ ගණිතයේදී තාර්කික මෙහෙයුම් (AND, OR, NOT) නොමැත.",
            "බූලීය වීජ ගණිතය ජ්‍යාමිතිය විශ්ලේෂණය කිරීමට භාවිතා කරන අතර, සාමාන්‍ය වීජ ගණිතය සංඛ්‍යා ගණනය කිරීමට භාවිතා කරයි.",
            "බූලීය වීජ ගණිතය අසීමිත විචල්‍ය සංඛ්‍යාවක් සමඟ ක්‍රියා කරයි."
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රධාන වෙනස වන්නේ අගයන් පරාසයයි. බූලීය වීජ ගණිතයේදී විචල්‍යයන්ට තිබිය හැක්කේ ද්විමය අගයන් දෙකක් (0 සහ 1) පමණි. සාමාන්‍ය වීජ ගණිතයේදී විචල්‍යයන්ට සැබෑ සංඛ්‍යා හෝ සංකීර්ණ සංඛ්‍යා වැනි අගයන් ගත හැක."
    },
    {
        questionText: "K-map එකක 'redundant implicant' (අතිරික්ත ගම්‍ය) යනු කුමක්ද?",
        options: [
            "එය අත්‍යවශ්‍ය නොවන ප්‍රධාන ගම්‍යයක් වන අතර, එහි 1s (හෝ 0s) වෙනත් ප්‍රධාන ගම්‍යයන් මගින් දැනටමත් ආවරණය කර ඇත.",
            "එය K-map එකේ 0s පමණක් ආවරණය කරයි.",
            "එය K-map එකේ 'don't care' කොන්දේසි පමණක් ආවරණය කරයි.",
            "එය K-map එකේ කිසිදු 1ක් ආවරණය නොකරයි.",
            "එය K-map එකේ විශාලතම ප්‍රධාන ගම්‍යයයි."
        ],
        correctAnswerIndex: 0,
        explanation: "අතිරික්ත ගම්‍යයක් යනු සරල කළ ප්‍රකාශනය සඳහා අවශ්‍ය නොවන ප්‍රධාන ගම්‍යයකි, මන්ද එය ආවරණය කරන සියලුම 1s (හෝ 0s) වෙනත් ප්‍රධාන ගම්‍යයන් මගින් දැනටමත් ආවරණය වී ඇත. අවම ප්‍රකාශනයක් ලබා ගැනීම සඳහා අතිරික්ත ගම්‍යයන් ඉවත් කළ යුතුය."
    },
    {
        questionText: "තාර්කික ප්‍රකාශනයක් සරල කිරීමේදී 'tabular method' (වගු ක්‍රමය) යනු කුමක්ද?",
        options: [
            "Quine-McCluskey ක්‍රමය ලෙසද හැඳින්වෙන ක්‍රමවේදය.",
            "K-map භාවිතයෙන් සරල කිරීමේ ක්‍රමය.",
            "බූලීය න්‍යායයන් පමණක් භාවිතයෙන් සරල කිරීමේ ක්‍රමය.",
            "සත්‍යතා වගුවක් නිර්මාණය කිරීමේ ක්‍රමය.",
            "පරිපථයක් නිර්මාණය කිරීමේ ක්‍රමය."
        ],
        correctAnswerIndex: 0,
        explanation: "Tabular method යනු Quine-McCluskey ක්‍රමයේ තවත් නමකි. එය බූලීය ප්‍රකාශයන් සරල කිරීම සඳහා සංවිධානාත්මක, ඇල්ගොරිතම පදනම් වූ ක්‍රමයක් වන අතර, විශාල විචල්‍ය සංඛ්‍යාවක් සහිත ප්‍රකාශයන් සඳහා K-map වලට වඩා සුදුසු වේ."
    },
    {
        questionText: "K-map එකක 'minimal sum' (අවම ඓක්‍යය) යනු කුමක්ද?",
        options: [
            "K-map එකේ ඇති සියලුම 1s ආවරණය වන පරිදි තෝරාගත් අත්‍යවශ්‍ය ප්‍රධාන ගම්‍යයන් සහ අවශ්‍ය අනෙකුත් ප්‍රධාන ගම්‍යයන්ගෙන් සෑදෙන සරලම SOP ප්‍රකාශනය.",
            "K-map එකේ ඇති සියලුම 0s ආවරණය වන පරිදි තෝරාගත් සරලම POS ප්‍රකාශනය.",
            "K-map එකේ ඇති සියලුම 1s වල සම්පූර්ණ එකතුව.",
            "K-map එකේ ඇති සියලුම 0s වල සම්පූර්ණ එකතුව.",
            "K-map එකේ ඇති 'don't care' කොන්දේසි පමණක් අඩංගු ප්‍රකාශනය."
        ],
        correctAnswerIndex: 0,
        explanation: "Minimal sum යනු K-map එකෙන් ලබා ගන්නා සරලම SOP (Sum of Products) ප්‍රකාශනයයි. එය සිතියමේ ඇති සියලුම 1s (සහ අවශ්‍ය නම් 'don't care' කොන්දේසි) ආවරණය කරන අත්‍යවශ්‍ය ප්‍රධාන ගම්‍යයන් සහ අවම වශයෙන් අවශ්‍ය අනෙකුත් ප්‍රධාන ගම්‍යයන් තෝරා ගැනීමෙන් ලබා ගනී."
    },
    {
        questionText: "K-map එකක 'minimal product' (අවම ගුණිතය) යනු කුමක්ද?",
        options: [
            "K-map එකේ ඇති සියලුම 0s ආවරණය වන පරිදි තෝරාගත් අත්‍යවශ්‍ය ප්‍රධාන ගම්‍යයන් සහ අවශ්‍ය අනෙකුත් ප්‍රධාන ගම්‍යයන්ගෙන් සෑදෙන සරලම POS ප්‍රකාශනය.",
            "K-map එකේ ඇති සියලුම 1s ආවරණය වන පරිදි තෝරාගත් සරලම SOP ප්‍රකාශනය.",
            "K-map එකේ ඇති සියලුම 0s වල සම්පූර්ණ ගුණිතය.",
            "K-map එකේ ඇති සියලුම 1s වල සම්පූර්ණ ගුණිතය.",
            "K-map එකේ ඇති 'don't care' කොන්දේසි පමණක් අඩංගු ප්‍රකාශනය."
        ],
        correctAnswerIndex: 0,
        explanation: "Minimal product යනු K-map එකෙන් ලබා ගන්නා සරලම POS (Product of Sums) ප්‍රකාශනයයි. එය සිතියමේ ඇති සියලුම 0s (සහ අවශ්‍ය නම් 'don't care' කොන්දේසි) ආවරණය කරන අත්‍යවශ්‍ය ප්‍රධාන ගම්‍යයන් සහ අවම වශයෙන් අවශ්‍ය අනෙකුත් ප්‍රධාන ගම්‍යයන් තෝරා ගැනීමෙන් ලබා ගනී."
    },
    {
        questionText: "තාර්කික ප්‍රකාශනයක් සරල කිරීමේදී 'literals' (අක්ෂර) යනු කුමක්ද?",
        options: [
            "බූලීය ප්‍රකාශනයක ඇති එක් එක් විචල්‍යය (උදා: A, B) හෝ එහි ප්‍රතිලෝමය (උදා: NOT A, NOT B).",
            "බූලීය ප්‍රකාශනයක ඇති සංඛ්‍යාත්මක අගයන් (0s, 1s).",
            "බූලීය ප්‍රකාශනයක ඇති මෙහෙයුම් (AND, OR, NOT).",
            "බූලීය ප්‍රකාශනයක ඇති වරහන්.",
            "බූලීය ප්‍රකාශනයක ඇති සියලුම පද."
        ],
        correctAnswerIndex: 0,
        explanation: "Literal යනු බූලීය ප්‍රකාශනයක ඇති තනි විචල්‍යයක් (උදා: A) හෝ එහි ප්‍රතිලෝමය (උදා: NOT A) වේ. ප්‍රකාශනයක් සරල කිරීම යනු literals ගණන අවම කිරීමයි, මන්ද එය පරිපථයේ සංකීර්ණත්වය අඩු කිරීමට හේතු වේ."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් සරල කිරීමේදී 'product term' (ගුණිත පදය) යනු කුමක්ද?",
        options: [
            "එකක් හෝ වැඩි ගණනක් වන literals (විචල්‍යයන් හෝ ඒවායේ ප්‍රතිලෝම) අතර AND මෙහෙයුමකින් සම්බන්ධ වූ පදයක්.",
            "එකක් හෝ වැඩි ගණනක් වන literals අතර OR මෙහෙයුමකින් සම්බන්ධ වූ පදයක්.",
            "බූලීය ප්‍රකාශනයක ඇති ඕනෑම පදයක්.",
            "බූලීය ප්‍රකාශනයක ඇති එකතුව.",
            "බූලීය ප්‍රකාශනයක ඇති වෙනස."
        ],
        correctAnswerIndex: 0,
        explanation: "Product term (ගුණිත පදයක්) යනු SOP (Sum of Products) ආකාරයේ ප්‍රකාශනයක කොටසකි. එය එකක් හෝ වැඩි ගණනක් වන literals (විචල්‍යයන් හෝ ඒවායේ ප්‍රතිලෝම) අතර AND මෙහෙයුමකින් සම්බන්ධ වීමෙන් සෑදේ. උදා: A AND B, NOT A AND C, A AND B AND NOT C."
    },
    {
        questionText: "බූලීය ප්‍රකාශනයක් සරල කිරීමේදී 'sum term' (ඓක්‍ය පදය) යනු කුමක්ද?",
        options: [
            "එකක් හෝ වැඩි ගණනක් වන literals (විචල්‍යයන් හෝ ඒවායේ ප්‍රතිලෝම) අතර OR මෙහෙයුමකින් සම්බන්ධ වූ පදයක්.",
            "එකක් හෝ වැඩි ගණනක් වන literals අතර AND මෙහෙයුමකින් සම්බන්ධ වූ පදයක්.",
            "බූලීය ප්‍රකාශනයක ඇති ඕනෑම පදයක්.",
            "බූලීය ප්‍රකාශනයක ඇති ගුණිතය.",
            "බූලීය ප්‍රකාශනයක ඇති වෙනස."
        ],
        correctAnswerIndex: 0,
        explanation: "Sum term (ඓක්‍ය පදයක්) යනු POS (Product of Sums) ආකාරයේ ප්‍රකාශනයක කොටසකි. එය එකක් හෝ වැඩි ගණනක් වන literals (විචල්‍යයන් හෝ ඒවායේ ප්‍රතිලෝම) අතර OR මෙහෙයුමකින් සම්බන්ධ වීමෙන් සෑදේ. උදා: (A OR B), (NOT A OR C), (A OR B OR NOT C)."
    },
    {
        questionText: "බූලීය වීජ ගණිතය සහ 'Propositional Logic' (යෝජනා තාර්කිකය) අතර සම්බන්ධය කුමක්ද?",
        options: [
            "බූලීය වීජ ගණිතය යනු යෝජනා තාර්කිකයේ ගණිතමය පදනම වන අතර, 'සත්‍ය' සහ 'අසත්‍ය' යන සංකල්ප ද්විමය අගයන් (1 සහ 0) මගින් නිරූපණය කරයි.",
            "යෝජනා තාර්කිකය යනු බූලීය වීජ ගණිතයේ කොටසකි.",
            "ඒවා එකිනෙකට සම්පූර්ණයෙන්ම වෙනස් සංකල්ප වේ.",
            "යෝජනා තාර්කිකය අංකිත පරිපථ නිර්මාණය කිරීමට භාවිතා කරන අතර, බූලීය වීජ ගණිතය එසේ නොවේ.",
            "ඒවා දෙකම ඇනලොග් පරිපථ විශ්ලේෂණය කිරීමට භාවිතා කරයි."
        ],
        correctAnswerIndex: 0,
        explanation: "යෝජනා තාර්කිකය (Propositional Logic) යනු සත්‍ය හෝ අසත්‍ය විය හැකි ප්‍රකාශ (යෝජනා) සහ ඒවා අතර තාර්කික සම්බන්ධතා අධ්‍යයනය කරන දර්ශන ක්ෂේත්‍රයකි. බූලීය වීජ ගණිතය යනු මෙම යෝජනා තාර්කිකය විස්තර කිරීමට සහ විශ්ලේෂණය කිරීමට භාවිතා කරන ගණිතමය පද්ධතියයි. 'සත්‍ය' සහ 'අසත්‍ය' යන තාර්කික අගයන් පිළිවෙලින් 1 සහ 0 යන ද්විමය අගයන් මගින් බූලීය වීජ ගණිතයේදී නිරූපණය වේ."
    },
    // Section 4.3: තාර්කික ද්වාර භාවිතයෙන් සරල අංකිත පරිපථ නිර්මාණය (Designing Simple Digital Circuits using Logic Gates)
    {
        questionText: "තාර්කික පරිපථ නිර්මාණයේදී සත්‍යතා වගුවක් භාවිතා කිරීමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "පරිපථයේ අපේක්ෂිත ක්‍රියාකාරීත්වය සියලුම ආදාන සංයෝජන සඳහා පැහැදිලිව නිර්වචනය කිරීම.",
            "පරිපථයේ භෞතික ප්‍රමාණය තීරණය කිරීම.",
            "පරිපථයේ බලශක්ති පරිභෝජනය ගණනය කිරීම.",
            "පරිපථය තැනීමට අවශ්‍ය ද්‍රව්‍ය ලැයිස්තුගත කිරීම.",
            "පරිපථයේ මිල ගණන් කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "සත්‍යතා වගුවක් පරිපථ නිර්මාණයේ මූලික පියවරකි. එය මගින් පරිපථයට තිබිය හැකි සියලුම ආදාන සංයෝජන සඳහා අනුරූප ප්‍රතිදානයන් කුමක් විය යුතුද යන්න පැහැදිලිව නිර්වචනය කරයි. මෙය තාර්කික ප්‍රකාශනයක් සහ අවසාන පරිපථය නිර්මාණය කිරීම සඳහා පදනම සපයයි."
    },
    {
        questionText: "තාර්කික ප්‍රකාශනයකින් අංකිත පරිපථයක් නිර්මාණය කිරීමේදී, ප්‍රධාන පියවර කුමක්ද?",
        options: [
            "ප්‍රකාශනයේ ඇති මෙහෙයුම්වලට (AND, OR, NOT) අනුරූප වන තාර්කික ද්වාර භාවිතා කර පරිපථය ඇඳීම.",
            "ප්‍රකාශනය සරල කිරීමකින් තොරව කෙලින්ම පරිපථය ඇඳීම.",
            "පරිපථය නිර්මාණය කිරීමට පෙර එහි බලශක්ති පරිභෝජනය ගණනය කිරීම.",
            "පරිපථයේ භෞතික ප්‍රමාණය තීරණය කිරීම.",
            "පරිපථය සඳහා භාවිතා කරන ද්‍රව්‍ය වර්ගය තීරණය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කික ප්‍රකාශනයක් ලැබුණු පසු, එහි අඩංගු වන AND, OR, NOT වැනි මෙහෙයුම් සඳහා අනුරූප තාර්කික ද්වාර භාවිතා කරමින් පරිපථ සටහනක් (logic diagram) ඇඳිය ​​හැක. ප්‍රකාශනය සරල කර ඇත්නම්, අඩු ද්වාර සංඛ්‍යාවකින් කාර්යක්ෂම පරිපථයක් නිර්මාණය කළ හැක."
    },
    {
        questionText: "දොරවල් විවෘත කිරීමේ පද්ධතියක (door opening system) ආරක්ෂක යාන්ත්‍රණයක් නිර්මාණය කිරීමේදී 'ආදාන 03ක් දක්වා' යන සීමාව යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "පරිපථයට උපරිම වශයෙන් ආදාන සංඥා තුනක් පමණක් තිබිය හැකි බව.",
            "පරිපථයට අවම වශයෙන් ආදාන සංඥා තුනක් තිබිය යුතු බව.",
            "පරිපථයට ප්‍රතිදාන සංඥා තුනක් තිබිය යුතු බව.",
            "පරිපථයේ ද්වාර තුනක් තිබිය යුතු බව.",
            "පරිපථය නිර්මාණය කිරීමට ගතවන කාලය තුනක් බව."
        ],
        correctAnswerIndex: 0,
        explanation: "අංකිත පරිපථ නිර්මාණයේදී 'ආදාන 03ක් දක්වා' යන සීමාව යන්නෙන් අදහස් කරන්නේ පරිපථයේ විවිධ ආදාන (උදා: සංවේදක, ස්විච) උපරිම වශයෙන් තුනක් තිබිය හැකි බවයි. මෙය සත්‍යතා වගු සහ K-map සරල කිරීමේදී සාමාන්‍යයෙන් හඳුන්වා දෙන ප්‍රායෝගික සීමාවකි, මන්ද ඊට වැඩි ආදාන සංඛ්‍යාවක් සහිත පරිපථ අතින් සරල කිරීම වඩාත් සංකීර්ණ විය හැක."
    },
    {
        questionText: "ස්වයංක්‍රීය දොර පද්ධතියක, 'දොර විවෘත වන්නේ පුද්ගලයෙකු දොරටුව ඉදිරියට පැමිණෙන විට (A) සහ දොර අගුලු දමා නොමැති විට (B)' නම්, මෙම තත්වය නිරූපණය කිරීමට කුමන තාර්කික ප්‍රකාශනයක් භාවිතා කළ හැකිද?",
        options: [
            "A AND B",
            "A OR B",
            "NOT A",
            "A XOR B",
            "NOT (A AND B)"
        ],
        correctAnswerIndex: 0,
        explanation: "දොර විවෘත වීමට නම් කොන්දේසි දෙකම (පුද්ගලයෙකු පැමිණීම AND දොර අගුලු දමා නොතිබීම) සත්‍ය විය යුතුය. මෙය AND මෙහෙයුමෙන් නිරූපණය කළ හැක."
    },
    {
        questionText: "කාර්යාලයක ආලෝක පද්ධතියක් සැලසුම් කිරීමේදී, 'ආලෝකය ක්‍රියාත්මක වන්නේ කාමරයේ පුද්ගලයෙකු සිටී නම් (A) හෝ අතින් ස්විචය ක්‍රියාත්මක කර ඇත්නම් (B)' යන තත්වය සඳහා සත්‍යතා වගුවක් නිර්මාණය කිරීමේදී ප්‍රතිදානය 1 වන්නේ කුමන අවස්ථා වලදීද?",
        options: [
            "A=1, B=0; A=0, B=1; A=1, B=1",
            "A=0, B=0",
            "A=1, B=1 පමණක්",
            "A=0, B=1 පමණක්",
            "කිසිම අවස්ථාවක"
        ],
        correctAnswerIndex: 0,
        explanation: "මෙම තත්වය OR මෙහෙයුමෙන් නිරූපණය කළ හැක (A OR B). OR ද්වාරයක ප්‍රතිදානය 1 වන්නේ ආදාන දෙකෙන් එකක් හෝ දෙකම 1 වන විටයි. එබැවින් A=1, B=0; A=0, B=1; A=1, B=1 යන අවස්ථාවලදී ප්‍රතිදානය 1 වේ."
    },
    {
        questionText: "තාර්කික ද්වාර භාවිතයෙන් සරල අංකිත පරිපථ නිර්මාණය කිරීමේදී 'redundancy' (අතිරික්තභාවය) අඩු කිරීම වැදගත් වන්නේ ඇයි?",
        options: [
            "පරිපථයේ පිරිවැය සහ සංකීර්ණත්වය අඩු කිරීම සඳහා.",
            "පරිපථයේ ක්‍රියාකාරී වේගය වැඩි කිරීම සඳහා.",
            "පරිපථයේ බලශක්ති පරිභෝජනය වැඩි කිරීම සඳහා.",
            "පරිපථයේ භෞතික ප්‍රමාණය වැඩි කිරීම සඳහා.",
            "පරිපථයේ ද්වාර සංඛ්‍යාව වැඩි කිරීම සඳහා."
        ],
        correctAnswerIndex: 0,
        explanation: "redundancy යනු අනවශ්‍ය හෝ අතිරික්ත ද්වාර හෝ පරිපථ කොටස් භාවිතා කිරීමයි. පරිපථ සරල කිරීම මගින් redundancy අඩු කිරීමෙන්, පිරිවැය අඩු වන අතර, පරිපථයේ සංකීර්ණත්වය සහ බලශක්ති පරිභෝජනය ද අවම වේ. එසේම, සංඥා ගමන් කරන මාර්ග කෙටි වන බැවින් වේගය වැඩි විය හැක."
    },
    {
        questionText: "සරල අනතුරු ඇඟවීමේ පද්ධතියක් (alarm system) සැලසුම් කිරීමේදී, 'අනතුරු ඇඟවීම ක්‍රියාත්මක වන්නේ සංවේදක A ක්‍රියාත්මක වුවහොත් හෝ සංවේදක B ක්‍රියාත්මක වුවහොත්' යන කොන්දේසියට අනුකූලව අංකිත පරිපථය නිර්මාණය කරන්නේ කුමන ද්වාරය භාවිතා කරද?",
        options: [
            "OR ද්වාරය",
            "AND ද්වාරය",
            "NOT ද්වාරය",
            "XOR ද්වාරය",
            "NAND ද්වාරය"
        ],
        correctAnswerIndex: 0,
        explanation: "අනතුරු ඇඟවීම ක්‍රියාත්මක වීමට නම් සංවේදක දෙකෙන් එකක් හෝ ක්‍රියාත්මක විය යුතුය. මෙය 'හෝ' (OR) යන තාර්කික ක්‍රියාකාරීත්වය මගින් නිරූපණය වන බැවින් OR ද්වාරයක් භාවිතා කළ යුතුය."
    },
    {
        questionText: "තාර්කික ද්වාර භාවිතයෙන් නිර්මාණය කරන ලද 'බහුලතා ඡන්ද පරිපථයක්' (Majority Voting Circuit) යනු කුමක්ද?",
        options: [
            "ආදාන සංඛ්‍යාවෙන් බහුතරයක් 1 නම් පමණක් ප්‍රතිදානය 1 වන පරිපථයකි.",
            "ආදාන සංඛ්‍යාවෙන් බහුතරයක් 0 නම් පමණක් ප්‍රතිදානය 1 වන පරිපථයකි.",
            "සියලුම ආදාන 1 නම් පමණක් ප්‍රතිදානය 1 වන පරිපථයකි.",
            "ඕනෑම එක් ආදානයක් 1 නම් ප්‍රතිදානය 1 වන පරිපථයකි.",
            "සියලුම ආදාන 0 නම් ප්‍රතිදානය 0 වන පරිපථයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "Majority Voting Circuit යනු එහි ආදාන සංඛ්‍යාවෙන් බහුතරයක් (උදා: ආදාන 3ක් සඳහා 2ක් හෝ 3ක්) 1 වන විට පමණක් ප්‍රතිදානය 1 වන අංකිත පරිපථයකි. මෙය ආරක්ෂක පද්ධති, දෝෂ නිවැරදි කිරීමේ පද්ධති වැනි යෙදීම්වලදී භාවිතා වේ."
    },
    {
        questionText: "අංකිත පරිපථ නිර්මාණයේදී 'de-bouncing' (දෝලනය නැති කිරීම) ක්‍රියාවලියක් අවශ්‍ය වන්නේ ඇයි?",
        options: [
            "යාන්ත්‍රික ස්විචවලින් ඇතිවන අනවශ්‍ය ද්විමය සංඥා දෝලනයන් (glitches) ඉවත් කිරීමට.",
            "පරිපථයේ බලශක්ති පරිභෝජනය අඩු කිරීමට.",
            "පරිපථයේ වේගය වැඩි කිරීමට.",
            "පරිපථයේ ප්‍රමාණය අඩු කිරීමට.",
            "පරිපථයේ පිරිවැය අඩු කිරීමට."
        ],
        correctAnswerIndex: 0,
        explanation: "යාන්ත්‍රික ස්විච (push buttons) ක්‍රියාත්මක කිරීමේදී ස්පර්ශකවල භෞතික දෝලනයන් (bouncing) නිසා තනි ස්පර්ශයක් සඳහා බහුවිධ 0/1 සංක්‍රාන්ති (glitches) ඇති විය හැක. De-bouncing පරිපථ මගින් මෙම අනවශ්‍ය දෝලනයන් ඉවත් කර, තනි ස්ථාවර 0 හෝ 1 සංඥාවක් පරිපථයට ලබා දීම සහතික කරයි."
    },
    {
        questionText: "තාර්කික ද්වාර භාවිතයෙන් 'multiplexer' (බහු-වරණකය) පරිපථයක් නිර්මාණය කිරීමේදී එහි ප්‍රධාන කාර්යය කුමක්ද?",
        options: [
            "ආදාන කිහිපයකින් එකක් තෝරාගෙන තනි ප්‍රතිදානයකට යොමු කිරීම.",
            "එක් ආදානයක් ආදාන කිහිපයකට බෙදා හැරීම.",
            "ආදානයක් ප්‍රතිලෝම කිරීම.",
            "ආදාන දෙකක් එකතු කිරීම.",
            "ආදාන සංඛ්‍යාතය වෙනස් කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Multiplexer (Mux) යනු 'දත්ත තේරීම් කාරකයක්' ලෙස ක්‍රියා කරන අංකිත පරිපථයකි. එයට ආදාන මාර්ග කිහිපයක් සහ තේරීම් ආදාන (select inputs) කිහිපයක් ඇත. තේරීම් ආදානවල අගයන් අනුව, ආදාන මාර්ගවලින් එකක් තෝරාගෙන එම ආදාන සංඥාව තනි ප්‍රතිදානයකට යොමු කරයි."
    },
    {
        questionText: "තාර්කික ද්වාර භාවිතයෙන් 'demultiplexer' (බහු-වරණ විඝටක) පරිපථයක් නිර්මාණය කිරීමේදී එහි ප්‍රධාන කාර්යය කුමක්ද?",
        options: [
            "එක් ආදානයක් තෝරාගත් ප්‍රතිදාන මාර්ගයකට යොමු කිරීම.",
            "ආදාන කිහිපයකින් එකක් තෝරාගෙන තනි ප්‍රතිදානයකට යොමු කිරීම.",
            "ආදානයක් ප්‍රතිලෝම කිරීම.",
            "ආදාන දෙකක් එකතු කිරීම.",
            "ආදාන සංඛ්‍යාතය වෙනස් කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Demultiplexer (Demux) යනු 'දත්ත බෙදා හැරීමේ කාරකයක්' ලෙස ක්‍රියා කරන අංකිත පරිපථයකි. එයට එක් ආදාන මාර්ගයක් සහ තේරීම් ආදාන (select inputs) කිහිපයක් ඇත. තේරීම් ආදානවල අගයන් අනුව, ආදාන සංඥාව ප්‍රතිදාන මාර්ග කිහිපයකින් එකක් වෙත යොමු කරයි."
    },
    // Section 4.3: තාර්කික ද්වාර භාවිතයෙන් සරල අංකිත පරිපථ නිර්මාණය කරයි.
    {
        questionText: "තාර්කික පරිපථයක් නිර්මාණය කිරීමේ ආරම්භක පියවර කුමක්ද?",
        options: [
            "අවශ්‍යතා සහ ආදාන-ප්‍රතිදාන සම්බන්ධතා හඳුනාගෙන සත්‍යතා වගුවක් නිර්මාණය කිරීම.",
            "අවසාන තාර්කික ප්‍රකාශනය ලිවීම.",
            "තාර්කික ද්වාර ඇඳීම.",
            "පරිපථය සවි කිරීම.",
            "බල සැපයුම සම්බන්ධ කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "ඕනෑම තාර්කික පරිපථයක් නිර්මාණය කිරීමේදී, පළමුව පරිපථයේ අවශ්‍යතා පැහැදිලිව හඳුනාගත යුතුය. එයට ඇතුළත් වන ආදාන මොනවාද සහ ඒවායේ විවිධ සංයෝජන සඳහා අපේක්ෂිත ප්‍රතිදානය කුමක්ද යන්න තීරණය කර, ඒ අනුව සත්‍යතා වගුවක් ගොඩනැගීම ආරම්භක හා මූලික පියවර වේ. මෙය පරිපථයේ ක්‍රියාකාරීත්වය සඳහා වූ සැලැස්ම සපයයි."
    },
    {
        questionText: "සත්‍යතා වගුවක් භාවිතයෙන් තාර්කික ප්‍රකාශනයක් නිපදවීමේදී 'මිනිටර්ම්' (Minterm) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "ප්‍රතිදානය '1' වන එක් එක් ආදාන සංයෝජනයට අනුරූප වන AND පදයකි.",
            "ප්‍රතිදානය '0' වන එක් එක් ආදාන සංයෝජනයට අනුරූප වන OR පදයකි.",
            "ඕනෑම ආදාන සංයෝජනයකට අනුරූප වන NOR පදයකි.",
            "පරිපථයේ අවම ආදාන සංඛ්‍යාවකි.",
            "පරිපථයේ උපරිම ප්‍රතිදාන සංඛ්‍යාවකි."
        ],
        correctAnswerIndex: 0,
        explanation: "සත්‍යතා වගුවකින් Sum of Products (SOP) ආකාරයේ තාර්කික ප්‍රකාශනයක් නිර්මාණය කිරීමේදී, 'මිනිටර්ම්' භාවිතා වේ. මිනිටර්ම් යනු ප්‍රතිදානය 1 වන එක් එක් පේළියට අනුරූප වන AND පදයකි. මෙහිදී, විචල්‍යය 1 නම් සාමාන්‍ය ආකාරයෙන්ද, 0 නම් ප්‍රතිලෝම ආකාරයෙන්ද (NOT) ලියා, ඒවා AND මෙහෙයුමකින් සම්බන්ධ කරයි."
    },
    {
        questionText: "අනතුරු ඇඟවීමේ පද්ධතියක් සැලසුම් කිරීමේදී, දොර විවෘත වූ විට හෝ ජනේලයක් විවෘත වූ විට අනතුරු ඇඟවීමට නම්, කුමන තාර්කික මෙහෙයුමක් භාවිතා කළ යුතුද?",
        options: [
            "OR මෙහෙයුම",
            "AND මෙහෙයුම",
            "NOT මෙහෙයුම",
            "XOR මෙහෙයුම",
            "NAND මෙහෙයුම"
        ],
        correctAnswerIndex: 0,
        explanation: "'හෝ' (OR) යන වචනයෙන් පැහැදිලි වන පරිදි, දොර විවෘත වීම (ආදානය 1) හෝ ජනේලයක් විවෘත වීම (ආදානය 1) යන ඕනෑම තත්වයකදී අනතුරු ඇඟවීම (ප්‍රතිදානය 1) ක්‍රියාත්මක විය යුතුය. මෙය OR තාර්කික ක්‍රියාකාරීත්වයකට අනුරූප වේ."
    },
    {
        questionText: "යම් කාමරයක ආලෝකය ස්වයංක්‍රීයව පාලනය කරන පරිපථයක් සැලසුම් කිරීමේදී, අන්ධකාරය ඇති විට සහ චලනය හඳුනාගත් විට පමණක් ආලෝකය දැල්වීමට නම්, කුමන තාර්කික මෙහෙයුමක් භාවිතා කළ යුතුද?",
        options: [
            "AND මෙහෙයුම",
            "OR මෙහෙයුම",
            "NOT මෙහෙයුම",
            "XOR මෙහෙයුම",
            "NOR මෙහෙයුම"
        ],
        correctAnswerIndex: 0,
        explanation: "'සහ' (AND) යන වචනයෙන් පැහැදිලි වන පරිදි, ආලෝකය දැල්වීමට නම් අන්ධකාරය (ආදානය 1) සහ චලනය හඳුනා ගැනීම (ආදානය 1) යන කොන්දේසි දෙකම එකවර සත්‍ය විය යුතුය. මෙය AND තාර්කික ක්‍රියාකාරීත්වයකට අනුරූප වේ."
    },
    {
        questionText: "තාර්කික පරිපථයක් සරල කිරීමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "පරිපථය සෑදීමට අවශ්‍ය ද්වාර ගණන අඩු කිරීම සහ එහි පිරිවැය, සංකීර්ණත්වය හා බලශක්ති පරිභෝජනය අවම කිරීම.",
            "පරිපථයේ වේගය අඩු කිරීම.",
            "පරිපථයේ සංකීර්ණත්වය වැඩි කිරීම.",
            "පරිපථයේ දෝෂ ඇතිවීමේ සම්භාවිතාව වැඩි කිරීම.",
            "පරිපථය බාහිර ශබ්ද වලට සංවේදී කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කික පරිපථ සරල කිරීමේ ප්‍රධාන අරමුණ වන්නේ අවශ්‍ය වන තාර්කික ද්වාර ගණන අවම කිරීමයි. මෙලෙස ද්වාර ගණන අඩු කිරීමෙන් පරිපථයේ නිෂ්පාදන පිරිවැය, භෞතික ප්‍රමාණය සහ බලශක්ති පරිභෝජනය අඩු වන අතර, එහි ක්‍රියාකාරී වේගය සහ විශ්වසනීයත්වය වැඩි දියුණු වේ."
    },
    {
        questionText: "සත්‍යතා වගුවක ආදාන 3ක් තිබේ නම්, එම වගුවේ පේළි කීයක් තිබිය හැකිද?",
        options: [
            "8",
            "3",
            "6",
            "12",
            "16"
        ],
        correctAnswerIndex: 0,
        explanation: "ආදාන විචල්‍ය 'n' සංඛ්‍යාවක් සඳහා, සත්‍යතා වගුවක තිබිය හැකි පේළි ගණන $2^n$ වේ. එබැවින්, ආදාන 3ක් සඳහා $2^3 = 8$ පේළි තිබිය යුතුය, එය සියලුම හැකි ආදාන සංයෝජන ආවරණය කරයි."
    },
    {
        questionText: "තාර්කික පරිපථයක් නිර්මාණය කිරීමේදී, 'තාර්කික අගයන්' (Logic Levels) යනු කුමක්ද?",
        options: [
            "ද්විමය '0' සහ '1' අගයන් නිරූපණය කිරීමට භාවිතා කරන වෝල්ටීයතා මට්ටම්.",
            "පරිපථයේ භෞතික ප්‍රමාණය.",
            "පරිපථයේ බලශක්ති පරිභෝජනය.",
            "පරිපථයේ ක්‍රියාකාරී වේගය.",
            "පරිපථයේ ඇති ද්වාර ගණන."
        ],
        correctAnswerIndex: 0,
        explanation: "අංකිත පරිපථවලදී, තාර්කික '0' (අසත්‍ය) සහ '1' (සත්‍ය) යන ද්විමය අගයන් නිරූපණය කරන්නේ නිශ්චිත වෝල්ටීයතා මට්ටම් මගිනි. උදාහරණයක් ලෙස, TTL තාර්කිකයේදී 0V-0.8V '0' ලෙසත්, 2V-5V '1' ලෙසත් සැලකේ. මෙම වෝල්ටීයතා මට්ටම් 'තාර්කික අගයන්' ලෙස හැඳින්වේ."
    },
    {
        questionText: "පරිපථයක යෙදවුම් තුනක් A, B, C වන අතර, ප්‍රතිදානය Y වේ. Y = A.B + C නම්, Y 1 වන්නේ කුමන අවස්ථා වලදීද?",
        options: [
            "A=1, B=1, C=0 හෝ A=0, B=0, C=1 හෝ A=1, B=0, C=1 හෝ A=0, B=1, C=1 හෝ A=1, B=1, C=1",
            "A=0, B=0, C=0",
            "A=1, B=0, C=0",
            "A=0, B=1, C=0",
            "A=0, B=0, C=1 පමණක්"
        ],
        correctAnswerIndex: 0,
        explanation: "Y = A.B + C ප්‍රකාශනයට අනුව Y 1 වීමට නම්, A.B = 1 (එනම් A=1 සහ B=1) හෝ C = 1 විය යුතුය. මේ අනුව, (1,1,0), (0,0,1), (1,0,1), (0,1,1), (1,1,1) යන අවස්ථාවලදී Y 1 වේ. දෙන ලද විකල්ප අතර, නිවැරදි විකල්පය මෙම සියලු අවස්ථා ආවරණය කරයි."
    },
    {
        questionText: "දෛනික ජීවිතයේදී තාර්කික පරිපථ යොදාගත හැකි එක් අවස්ථාවක් තෝරන්න.",
        options: [
            "ස්වයංක්‍රීය දොරවල්වල සංවේදක පද්ධති.",
            "පඩිපෙළ මත ඇවිදීමේ වේගය මැනීම.",
            "වාහනවල වේගය වැඩි කිරීම.",
            "කැඩපත් පිරිසිදු කිරීම.",
            "ආහාර පිසීමේ ක්‍රමවේද."
        ],
        correctAnswerIndex: 0,
        explanation: "ස්වයංක්‍රීය දොරවල්වලදී, මිනිසෙකු දොරටුවට ළංවන විට සංවේදක මගින් සංඥා ලබාගෙන, තාර්කික පරිපථයක් මගින් එම සංඥා විශ්ලේෂණය කර දොර විවෘත කිරීමට හෝ වැසීමට අණක් ලබා දෙයි. මෙය තාර්කික ද්වාර වලට ආදාන සංඥා මත පදනම්ව තීරණ ගැනීම සඳහා කදිම උදාහරණයකි."
    },
    {
        questionText: "තාර්කික පරිපථ සැලසුම් කිරීමේදී 'බූලීය වීජ ගණිතයේ' වැදගත්කම කුමක්ද?",
        options: [
            "සංකීර්ණ තාර්කික ප්‍රකාශ සරල කිරීමට සහ ද්වාර ගණන අවම කිරීමට එය උපකාරී වේ.",
            "එය පරිපථයේ භෞතික ප්‍රමාණය තීරණය කරයි.",
            "එය පරිපථයේ බලශක්ති පරිභෝජනය ගණනය කරයි.",
            "එය පරිපථයේ වයර් සකස් කරන ආකාරය පෙන්වයි.",
            "එය පරිපථයේ උෂ්ණත්වය පාලනය කරයි."
        ],
        correctAnswerIndex: 0,
        explanation: "බූලීය වීජ ගණිතය යනු තාර්කික ප්‍රකාශයන් විශ්ලේෂණය කිරීමට, සරල කිරීමට සහ හැසිරවීමට භාවිතා කරන ගණිතමය මෙවලමකි. එය නොමැතිව සංකීර්ණ තාර්කික පරිපථ කාර්යක්ෂමව නිර්මාණය කිරීම අතිශයින් අපහසු වනු ඇත, මන්ද සරල නොකළ පරිපථවල ද්වාර විශාල ප්‍රමාණයක් අඩංගු විය හැකි අතර, එයින් පිරිවැය, සංකීර්ණත්වය සහ බලශක්ති පරිභෝජනය වැඩි වේ."
    },
    {
        questionText: "විද්‍යාලයක ශිෂ්‍යයෙකුට පුස්තකාලයට ඇතුළු වීමට අවසර ඇත්තේ ඔහුට වලංගු ශිෂ්‍ය හැඳුනුම්පතක් ඇති විට සහ පුස්තකාලය විවෘතව ඇති විට පමණි. මෙම තත්වය නිරූපණය කිරීමට භාවිතා කළ හැකි තාර්කික ද්වාරය කුමක්ද?",
        options: [
            "AND ද්වාරය",
            "OR ද්වාරය",
            "NOT ද්වාරය",
            "XOR ද්වාරය",
            "NAND ද්වාරය"
        ],
        correctAnswerIndex: 0,
        explanation: "පුස්තකාලයට ඇතුළුවීමට නම් 'වලංගු ශිෂ්‍ය හැඳුනුම්පතක් ඇති' AND 'පුස්තකාලය විවෘතව ඇති' යන කොන්දේසි දෙකම සත්‍ය විය යුතුය. මෙය AND තාර්කික මෙහෙයුමකට අනුරූප වේ."
    },
    {
        questionText: "ත්‍රි-ආදාන තාර්කික ප්‍රකාශනයක් K-map භාවිතයෙන් සරල කිරීමේදී, ප්‍රතිදාන 1 වන අවස්ථා 4ක් යාබදව හඳුනාගතහොත්, එය කුමන වර්ගයේ කාණ්ඩගත කිරීමක්ද?",
        options: [
            "Quad (චතුර්භාගය)",
            "Pair (යුගලය)",
            "Octate (අෂ්ටකය)",
            "Single (තනි)",
            "Hex (ෂඩාස්‍රය)"
        ],
        correctAnswerIndex: 0,
        explanation: "K-map එකක සරල කිරීමේදී, 1s කාණ්ඩගත කිරීම සිදු කරනු ලැබේ. 2 හි බලයක් ලෙස (1, 2, 4, 8) 1s කාණ්ඩගත කළ හැකි අතර, 4ක් යාබද 1s කාණ්ඩයක් 'Quad' ලෙස හැඳින්වේ. මෙය K-map හි යාබද කොටු 4ක් (පේළියක, තීරුවක, හෝ හතරැස් හැඩයකට) ආවරණය කරයි."
    },
    {
        questionText: "යම් ගෙදරක ආරක්ෂක පද්ධතියක් සැලසුම් කිරීමේදී, ඉදිරිපස දොර විවෘත වුවහොත් හෝ පසුපස දොර විවෘත වුවහොත් අනතුරු ඇඟවීම නාද විය යුතුය. මෙහි සත්‍යතා වගුව කුමන ද්වාරයකට සමාන වේද?",
        options: [
            "OR ද්වාරය",
            "AND ද්වාරය",
            "XOR ද්වාරය",
            "NOT ද්වාරය",
            "NOR ද්වාරය"
        ],
        correctAnswerIndex: 0,
        explanation: "ඉදිරිපස දොර විවෘත වීම හෝ පසුපස දොර විවෘත වීම යන ඕනෑම කොන්දේසියක් සත්‍ය වුවහොත් අනතුරු ඇඟවීම ක්‍රියාත්මක විය යුතුය. මෙය OR ද්වාරයක ක්‍රියාකාරීත්වයට සෘජුවම ගැලපේ."
    },
    {
        questionText: "තාර්කික ප්‍රකාශනයක් වන Y = A . B + C සඳහා සත්‍යතා වගුවක් නිර්මාණය කිරීමේදී, A=1, B=0, C=1 වන විට Y හි අගය කුමක්ද?",
        options: [
            "1",
            "0",
            "පැහැදිලි නැත",
            "A",
            "C"
        ],
        correctAnswerIndex: 0,
        explanation: "Y = A . B + C ප්‍රකාශනයට A=1, B=0, C=1 අගයන් ආදේශ කළ විට: Y = (1 . 0) + 1. මෙහිදී 1 . 0 = 0 වන අතර, 0 + 1 = 1 වේ. එබැවින් Y හි අගය 1 වේ."
    },
    {
        questionText: "NAND ද්වාර පමණක් භාවිතා කරමින් AND ද්වාරයක් නිර්මාණය කිරීමේදී, අවම වශයෙන් NAND ද්වාර කීයක් අවශ්‍ය වේද?",
        options: [
            "2",
            "1",
            "3",
            "4",
            "5"
        ],
        correctAnswerIndex: 0,
        explanation: "NAND ද්වාරයක් විශ්ව ද්වාරයක් වන බැවින්, එය භාවිතා කරමින් ඕනෑම මූලික ද්වාරයක් නිර්මාණය කළ හැක. AND ද්වාරයක් තැනීමට NAND ද්වාර දෙකක් අවශ්‍ය වේ: පළමු NAND ද්වාරය (A . B)' නිපදවන අතර, දෙවන NAND ද්වාරය එම ප්‍රතිදානය ප්‍රතිලෝම කරයි, එමගින් (A . B)'' = A . B ලැබෙනු ඇත."
    },
    {
        questionText: "තාර්කික පරිපථයක 'දෝෂ නිවැරදි කිරීමේ' (Error Correction) හැකියාව සැලසුම් කිරීමේදී කුමන සංකල්ප භාවිතා කළ හැකිද?",
        options: [
            "පාර්ශවීය කේත (Parity Codes) සහ හැමිං කේත (Hamming Codes).",
            "සරල AND/OR මෙහෙයුම්.",
            "ද්වාරවල ප්‍රචාරණ ප්‍රමාදය වැඩි කිරීම.",
            "පරිපථයේ බලශක්ති පරිභෝජනය අඩු කිරීම.",
            "ද්වාරවල භෞතික ප්‍රමාණය කුඩා කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "දත්ත සම්ප්‍රේෂණයේදී හෝ ගබඩා කිරීමේදී ඇතිවිය හැකි දෝෂ හඳුනා ගැනීමට සහ නිවැරදි කිරීමට පාර්ශවීය කේත (Parity Codes) සහ හැමිං කේත (Hamming Codes) වැනි විශේෂිත තාර්කික පරිපථ භාවිතා කරයි. මෙමගින් දත්තවල විශ්වසනීයත්වය වැඩි කරයි."
    },
    {
        questionText: "යම් පාලන පද්ධතියක, ප්‍රධාන ස්විචය ක්‍රියාත්මක වූ විට (A=1) සහ හදිසි බොත්තම එබී නොමැති විට (B=0) පමණක් පද්ධතිය ක්‍රියාත්මක විය යුතුය. මෙහි ප්‍රතිදානය සඳහා තාර්කික ප්‍රකාශනය කුමක්ද?",
        options: [
            "A . B'",
            "A + B",
            "A . B",
            "A' + B",
            "A' . B"
        ],
        correctAnswerIndex: 0,
        explanation: "පද්ධතිය ක්‍රියාත්මක වීමට නම් ප්‍රධාන ස්විචය ක්‍රියාත්මක විය යුතු අතර (A=1), හදිසි බොත්තම එබී නොතිබිය යුතුය. හදිසි බොත්තම එබීම B=1 ලෙසත්, එබී නොතිබීම B=0 ලෙසත් ගනිමු. එවිට, හදිසි බොත්තම එබී නොතිබීම B' ලෙස නිරූපණය කළ හැක. එබැවින්, A=1 සහ B'=1 (එනම් B=0) යන දෙකම සත්‍ය විය යුතුය. මෙය A . B' ලෙස ප්‍රකාශ කළ හැක."
    },
    {
        questionText: "සත්‍යතා වගුවකින් තාර්කික ප්‍රකාශයක් නිපදවීමේදී, විචල්‍ය 3ක් සඳහා උපරිම මිනිටර්ම් සංඛ්‍යාව කීයද?",
        options: [
            "8",
            "3",
            "6",
            "12",
            "16"
        ],
        correctAnswerIndex: 0,
        explanation: "විචල්‍ය 3ක් සහිත සත්‍යතා වගුවක පේළි 8ක් (2^3) ඇති බැවින්, ප්‍රතිදානය 1 වන අවස්ථා උපරිම 8ක් විය හැක. සෑම 1ක්ම එක් මිනිටර්ම් එකකට අනුරූප වන බැවින්, උපරිම මිනිටර්ම් 8ක් තිබිය හැක."
    },
    {
        questionText: "අංකිත පරිපථයක් නිර්මාණය කිරීමෙන් පසු, එහි ක්‍රියාකාරීත්වය පරීක්ෂා කිරීමේදී වැදගත් වන ප්‍රධාන කරුණක් කුමක්ද?",
        options: [
            "නිර්මාණය කළ පරිපථය සත්‍යතා වගුවට සහ තාර්කික ප්‍රකාශනයට අනුකූලව ක්‍රියා කරන්නේදැයි තහවුරු කර ගැනීම.",
            "පරිපථයේ බලශක්ති පරිභෝජනය මැනීම.",
            "පරිපථයේ භෞතික ප්‍රමාණය පරීක්ෂා කිරීම.",
            "පරිපථය සෑදීමට භාවිතා කළ ද්‍රව්‍යවල මිල ගණනය කිරීම.",
            "පරිපථයෙහි වයර් සම්බන්ධ කළ ආකාරය පරීක්ෂා කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කික පරිපථයක් නිර්මාණය කිරීමෙන් පසු, එහි ක්‍රියාකාරීත්වය අපේක්ෂිත පරිදි සිදුවේද යන්න තහවුරු කර ගැනීම අත්‍යවශ්‍ය වේ. මෙය සිදු කරනු ලබන්නේ නිර්මාණය කළ පරිපථය එහි මුල් සත්‍යතා වගුව සහ තාර්කික ප්‍රකාශනයට අනුව ප්‍රතිදාන නිපදවන්නේදැයි පරීක්ෂා කිරීමෙනි."
    },
    {
        questionText: "පරිගණකයක මවු පුවරුවේ (Motherboard) ඇති බොහෝ පාලන පරිපථ සඳහා භාවිතා වන්නේ කුමන වර්ගයේ තාර්කික ද්වාරද?",
        options: [
            "ඒකාබද්ධ තාර්කික ද්වාර (Integrated Logic Gates).",
            "ඇනලොග් ද්වාර.",
            "යාන්ත්‍රික ස්විච.",
            "අතිරික්ත ද්වාර.",
            "සරල ප්‍රතිරෝධක."
        ],
        correctAnswerIndex: 0,
        explanation: "නවීන පරිගණකවල මවු පුවරු වල ඇති සියලුම පාලන සහ දත්ත සැකසුම් පරිපථ තනා ඇත්තේ ඒකාබද්ධ තාර්කික ද්වාර (Integrated Logic Gates) භාවිතයෙනි. මේවා කුඩා ප්‍රමාණයේ, අධි වේගී සහ අඩු බලශක්ති පරිභෝජනයක් සහිත වන අතර, සංකීර්ණ මෙහෙයුම් සිදු කිරීමට හැකියාව ඇත."
    },
    {
        questionText: "තාර්කික පරිපථ සැලසුම් කිරීමේදී 'Modular Design' සංකල්පයේ වාසිය කුමක්ද?",
        options: [
            "සංකීර්ණ පරිපථ කුඩා, කළමනාකරණය කළ හැකි කොටස් වලට බෙදීමට එය ඉඩ සලසයි.",
            "පරිපථයේ වේගය වැඩි කරයි.",
            "පරිපථයේ බලශක්ති පරිභෝජනය අඩු කරයි.",
            "පරිපථයේ භෞතික ප්‍රමාණය අඩු කරයි.",
            "පරිපථයේ පිරිවැය අඩු කරයි."
        ],
        correctAnswerIndex: 0,
        explanation: "Modular Design යනු සංකීර්ණ පද්ධතියක් හෝ පරිපථයක් කුඩා, ස්වාධීන, කළමනාකරණය කළ හැකි කොටස් වලට (modules) බෙදීමයි. මෙය සැලසුම් ක්‍රියාවලිය සරල කරන අතර, දෝෂ නිවැරදි කිරීම (debugging) සහ නඩත්තු කිරීම පහසු කරයි, මන්ද එක් කොටසක වෙනස්කම් අනෙක් කොටස්වලට බලපාන්නේ නැත."
    },
    {
        questionText: "තාර්කික පරිපථයක් සැලසුම් කිරීමේදී, 'Boolean Expression Simplification' සඳහා Karnaugh Map භාවිතයේ ප්‍රධාන වාසිය කුමක්ද?",
        options: [
            "විචල්‍ය 5ක් දක්වා ප්‍රකාශන දෘශ්‍යමය වශයෙන් සරල කිරීමට පහසු ක්‍රමයක් සැපයීම.",
            "ඕනෑම විචල්‍ය සංඛ්‍යාවක් සඳහා ප්‍රකාශන සරල කිරීම.",
            "තාර්කික ප්‍රකාශයක සත්‍යතාව ඔප්පු කිරීම.",
            "තාර්කික ද්වාරවල භෞතික පිහිටීම නිර්ණය කිරීම.",
            "තාර්කික ද්වාරවල බලශක්ති පරිභෝජනය අඩු කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Karnaugh Map යනු විචල්‍ය 2, 3, හෝ 4ක් සහිත බූලීය ප්‍රකාශන දෘශ්‍යමය වශයෙන් සරල කිරීම සඳහා ඉතා කාර්යක්ෂම ක්‍රමයකි. එය මානව දෘශ්‍ය රටා හඳුනාගැනීමේ හැකියාව භාවිතා කරමින් බූලීය නීති යෙදීමෙන් තොරවම සරල කිරීම සිදු කිරීමට උපකාරී වේ. කෙසේ වෙතත්, විචල්‍ය 5කට වඩා වැඩි ප්‍රකාශන සඳහා K-map භාවිතය සංකීර්ණ විය හැක."
    },
    {
        questionText: "යම් පාලන පද්ධතියක, ප්‍රධාන යතුරු දෙකෙන් එකක් හෝ දෙකම ක්‍රියාත්මක කළ විට විදුලි පංකාව ක්‍රියාත්මක වේ. එහෙත්, අධික උෂ්ණත්වය හඳුනාගත් විට විදුලි පංකාව ස්වයංක්‍රීයව ක්‍රියා විරහිත විය යුතුය. මෙහි සත්‍යතා වගුවට සහ තාර්කික ප්‍රකාශනයට බලපාන ප්‍රධාන මෙහෙයුම් කුමක්ද?",
        options: [
            "OR සහ NOT මෙහෙයුම්වල සංකලනයක්.",
            "AND සහ OR මෙහෙයුම්වල සංකලනයක්.",
            "AND සහ NOT මෙහෙයුම්වල සංකලනයක්.",
            "XOR සහ NOT මෙහෙයුම්වල සංකලනයක්.",
            "NOR සහ NAND මෙහෙයුම්වල සංකලනයක්."
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රධාන යතුරු දෙකෙන් එකක් හෝ දෙකම ක්‍රියාත්මක වන විට විදුලි පංකාව ක්‍රියාත්මක වීම OR මෙහෙයුමක් පෙන්නුම් කරයි. අධික උෂ්ණත්වය හඳුනාගත් විට එය ක්‍රියා විරහිත විය යුතු බැවින්, උෂ්ණත්වය 'නොමැති' විට පමණක් විදුලි පංකාව ක්‍රියාත්මක විය යුතු අතර, මෙය NOT මෙහෙයුමකින් දැක්විය හැක. එබැවින්, මෙම පද්ධතිය OR මෙහෙයුමක ප්‍රතිදානය NOT මෙහෙයුමකට භාජනය කිරීමෙන් පසුව AND මෙහෙයුමකට සම්බන්ධ කිරීමෙන් නිරූපණය කළ හැක (එනම්, (Key1 + Key2) . (Not_Over_Temp))."
    },
    {
        questionText: "තාර්කික පරිපථයක් නිර්මාණය කිරීමේදී, 'Don't Care' කොන්දේසි (d) භාවිතා කිරීමේ ප්‍රයෝජනය කුමක්ද?",
        options: [
            "සරල කළ ප්‍රකාශනය වඩාත් අවම වන පරිදි, ඒවා 0 හෝ 1 ලෙස සැලකීමට ඇති හැකියාව.",
            "ඒවා සැමවිටම 0 ලෙස සැලකීම.",
            "ඒවා සැමවිටම 1 ලෙස සැලකීම.",
            "ඒවා පරිපථයේ ක්‍රියාකාරීත්වයට බලපාන්නේ නැති බැවින් ඒවා නොසලකා හැරීම.",
            "ඒවා පරිපථයේ දෝෂ ඇති අවස්ථා පෙන්නුම් කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "'Don't Care' කොන්දේසි යනු යම් යෙදීමක් සඳහා කිසි විටෙකත් සිදුවිය නොහැකි ආදාන සංයෝජන හෝ ඒවායේ ප්‍රතිදානය කුමක් වුවත් කමක් නැති අවස්ථා වේ. K-map සරල කිරීමේදී, මෙම 'd' කොටු 0s හෝ 1s ලෙස සැලකීමට අපට නිදහස තිබේ. මෙය මගින් කාණ්ඩගත කිරීම් විශාල කර, ප්‍රතිඵලයක් ලෙස වඩාත් සරල කළ තාර්කික ප්‍රකාශනයක් ලබා ගැනීමට උපකාරී වේ."
    },
    {
        questionText: "තාර්කික පරිපථයක් සාර්ථකව නිර්මාණය කිරීම සඳහා, සැලසුම්කරුට අත්‍යවශ්‍ය මූලික දැනුම කුමක්ද?",
        options: [
            "බූලීය වීජ ගණිතය, තාර්කික ද්වාරවල ක්‍රියාකාරීත්වය සහ සත්‍යතා වගු පිළිබඳ ගැඹුරු අවබෝධයක්.",
            "පරිගණක වැඩසටහන්කරණය පිළිබඳ විශේෂඥ දැනුමක්.",
            "දත්ත සමුදා කළමනාකරණය පිළිබඳ දැනුමක්.",
            "ජාලකරණය පිළිබඳ මූලික දැනුමක්.",
            "සන්නිවේදන ප්‍රොටෝකෝල පිළිබඳ දැනුමක්."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කික පරිපථ සැලසුම්කරණයේ පදනම වන්නේ බූලීය වීජ ගණිතය, විවිධ තාර්කික ද්වාරවල ක්‍රියාකාරීත්වය (NOT, AND, OR, XOR, NAND, NOR, XNOR) සහ සත්‍යතා වගු පිළිබඳ නිවැරදි හා ගැඹුරු අවබෝධයකි. මෙම මූලික සංකල්ප නොමැතිව කාර්යක්ෂම හා නිවැරදි තාර්කික පරිපථ නිර්මාණය කළ නොහැක."
    },
    {
        questionText: "අංකිත පරිපථයක 'Combinational Logic Circuit' යනු කුමක්ද?",
        options: [
            "එහි වත්මන් ප්‍රතිදානය තීරණය වන්නේ එහි වත්මන් ආදාන අගයන් මගින් පමණක් වන පරිපථයකි.",
            "එහි වත්මන් ප්‍රතිදානය තීරණය වන්නේ එහි වත්මන් ආදාන සහ පෙර ආදාන අගයන් මගින් වන පරිපථයකි.",
            "එයට මතකයක් ඇති පරිපථයකි.",
            "එය අනුක්‍රමිකව ක්‍රියාත්මක වන පරිපථයකි.",
            "එය ප්‍රතිපෝෂණ ලූපයක් ඇති පරිපථයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "Combinational Logic Circuit (ඒකාබද්ධ තාර්කික පරිපථය) යනු එහි ප්‍රතිදානය රඳා පවතින්නේ එහි වත්මන් ආදාන අගයන් මත පමණක් වන තාර්කික පරිපථ වර්ගයකි. මෙහි මතකයක් (memory) නොමැත, එබැවින් පෙර ආදානවල බලපෑමක් නොමැත."
    },
    {
        questionText: "අංකිත පරිපථයක 'Sequential Logic Circuit' යනු කුමක්ද?",
        options: [
            "එහි වත්මන් ප්‍රතිදානය තීරණය වන්නේ එහි වත්මන් ආදාන සහ එහි මතකයේ ගබඩා කර ඇති පෙර ආදාන අගයන් මගින් වන පරිපථයකි.",
            "එහි වත්මන් ප්‍රතිදානය තීරණය වන්නේ එහි වත්මන් ආදාන අගයන් මගින් පමණක් වන පරිපථයකි.",
            "එයට මතකයක් නොමැති පරිපථයකි.",
            "එය අඛණ්ඩව ක්‍රියාත්මක වන පරිපථයකි.",
            "එය ප්‍රතිපෝෂණ ලූපයක් නොමැති පරිපථයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "Sequential Logic Circuit (අනුක්‍රමික තාර්කික පරිපථය) යනු එහි ප්‍රතිදානය රඳා පවතින්නේ එහි වත්මන් ආදාන අගයන් මත මෙන්ම එහි මතකයේ (Flip-Flops වැනි) ගබඩා කර ඇති පෙර ආදාන අගයන් මතද වන තාර්කික පරිපථ වර්ගයකි. මෙයට මතක ගබඩා කිරීමේ හැකියාවක් ඇත."
    },
    {
        questionText: "Half Adder (අර්ධකලකය) පරිපථයක ප්‍රතිදාන මොනවාද?",
        options: [
            "ඓක්‍යය (Sum) සහ ඉතිරිය (Carry).",
            "ඓක්‍යය (Sum) පමණි.",
            "ඉතිරිය (Carry) පමණි.",
            "ඓක්‍යය (Sum) සහ ණය (Borrow).",
            "දත්ත සහ පාලනය."
        ],
        correctAnswerIndex: 0,
        explanation: "Half Adder යනු ද්විමය බිට් දෙකක් එකතු කිරීමට භාවිතා කරන පරිපථයකි. එයට ආදාන දෙකක් (A, B) සහ ප්‍රතිදාන දෙකක් ඇත: ඓක්‍යය (Sum) සහ ඉතිරිය (Carry). ඓක්‍යය සඳහා XOR ද්වාරයක්ද, ඉතිරිය සඳහා AND ද්වාරයක්ද භාවිතා වේ."
    },
    {
        questionText: "Full Adder (පූර්ණාකලකය) පරිපථයක ආදාන මොනවාද?",
        options: [
            "ආදාන බිට් දෙකක් (A, B) සහ පෙර ස්ථානයෙන් ලැබෙන ඉතිරිය (Carry In).",
            "ආදාන බිට් දෙකක් (A, B) පමණි.",
            "ඉතිරිය (Carry In) පමණි.",
            "ආදාන බිට් තුනක් (A, B, C) පමණි.",
            "ප්‍රතිදාන ඉතිරිය (Carry Out) පමණි."
        ],
        correctAnswerIndex: 0,
        explanation: "Full Adder යනු ද්විමය බිට් තුනක් එකතු කිරීමට භාවිතා කරන පරිපථයකි. එයට ආදාන බිට් දෙකක් (A, B) සහ පෙර ස්ථානයෙන් ලැබෙන ඉතිරිය (Carry In - Cin) යන ආදාන තුනක් ඇත. ප්‍රතිදාන දෙකක් ඇත: ඓක්‍යය (Sum) සහ පිටවන ඉතිරිය (Carry Out - Cout)."
    },
    {
        questionText: "මධ්‍ය සැකසුම් ඒකකය (CPU) තුළ Half Adder සහ Full Adder ප්‍රධාන වශයෙන් භාවිතා වන්නේ කුමන කාර්යය සඳහාද?",
        options: [
            "ද්විමය සංඛ්‍යා එකතු කිරීමේ මෙහෙයුම් සිදු කිරීමට.",
            "දත්ත ගබඩා කිරීමට.",
            "තීරණ ගැනීමට.",
            "ප්‍රතිලෝම මෙහෙයුම් සිදු කිරීමට.",
            "දත්ත වර්ගීකරණය කිරීමට."
        ],
        correctAnswerIndex: 0,
        explanation: "CPU හි Arithmetic Logic Unit (ALU) කොටස තුළ, Half Adder සහ Full Adder යනු ද්විමය සංඛ්‍යා එකතු කිරීමේ මෙහෙයුම් (addition) සිදු කිරීම සඳහා භාවිතා කරන මූලික තැනුම් ඒකක වේ. Full Adder කිහිපයක් එකට සම්බන්ධ කිරීමෙන් විශාල බිට් සංඛ්‍යා එකතු කළ හැකි 'රිපල්-කැරී ඇඩර්' වැනි පරිපථ නිර්මාණය කළ හැක."
    },
    {
        questionText: "අංකිත පරිපථයක බිට් ගබඩා කිරීම සඳහා 'ප්‍රතිපෝෂණ ලූපය' (Feedback Loop) යනු කුමක්ද?",
        options: [
            "ද්වාරයක ප්‍රතිදානය එහි ආදානයට නැවත සම්බන්ධ කිරීමෙන් තොරතුරු රඳවා තබා ගැනීමේ හැකියාව ඇති කරන ක්‍රියාවලියකි.",
            "ද්වාරයක ප්‍රතිදානය වෙනත් ද්වාරයක ප්‍රතිදානයට සම්බන්ධ කිරීම.",
            "ද්වාරයක ආදානය ප්‍රතිදානයට සම්බන්ධ කිරීම.",
            "ද්වාරයක බල සැපයුම එහි ආදානයට සම්බන්ධ කිරීම.",
            "ද්වාරයක ආදානයන් ප්‍රතිලෝම කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රතිපෝෂණ ලූපයක් යනු තාර්කික ද්වාරයක ප්‍රතිදානය එහි ආදානයට නැවත සම්බන්ධ කිරීමයි. මෙය ද්වාරයට එහි පෙර තත්වය 'මතක තබා ගැනීමට' උපකාරී වන අතර, Flip-Flops වැනි මතක මූලද්‍රව්‍යවල මූලික පදනම වේ. මෙම ලූපය මගින් අනුක්‍රමික පරිපථවලට තොරතුරු ගබඩා කිරීමේ හැකියාව ලැබේ."
    },
    {
        questionText: "ෆ්ලිප්-ෆ්ලොප් (Flip-Flop) එකක ප්‍රධාන කාර්යය කුමක්ද?",
        options: [
            "තනි ද්විමය බිට් එකක් (0 හෝ 1) ගබඩා කිරීම.",
            "ද්විමය සංඛ්‍යා එකතු කිරීම.",
            "තාර්කික මෙහෙයුම් සිදු කිරීම.",
            "ඇනලොග් සංඥා ඩිජිටල් සංඥා බවට පරිවර්තනය කිරීම.",
            "සංඥා විස්තාරණය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "ෆ්ලිප්-ෆ්ලොප් යනු අංකිත ඉලෙක්ට්‍රොනික්ස් වල මූලික මතක ඒකකයකි. එයට තනි ද්විමය බිට් එකක් (0 හෝ 1) ගබඩා කර තබා ගැනීමේ හැකියාව ඇත. මෙය රෙජිස්ටර් (Registers), කවුන්ටර් (Counters) සහ මතක ඒකක (Memory Units) වැනි සංකීර්ණ අනුක්‍රමික පරිපථවල තැනුම් ඒකකය වේ."
    },
    {
        questionText: "Half Adder පරිපථයක Sum (ඓක්‍යය) ප්‍රතිදානය සඳහා තාර්කික ප්‍රකාශනය කුමක්ද?",
        options: [
            "A XOR B",
            "A AND B",
            "A OR B",
            "NOT A",
            "A NOR B"
        ],
        correctAnswerIndex: 0,
        explanation: "Half Adder හි Sum ප්‍රතිදානය A සහ B ආදානවල XOR මෙහෙයුමෙන් ලබා ගනී. එනම්, Sum = A $\oplus$ B. මෙයට හේතුව A සහ B යන ආදාන දෙක එකිනෙකට වෙනස් වූ විට පමණක් (එනම් එකක් 0 අනෙක 1) ඓක්‍යය 1 වීමයි."
    },
    {
        questionText: "Half Adder පරිපථයක Carry (ඉතිරිය) ප්‍රතිදානය සඳහා තාර්කික ප්‍රකාශනය කුමක්ද?",
        options: [
            "A AND B",
            "A XOR B",
            "A OR B",
            "NOT A",
            "A NAND B"
        ],
        correctAnswerIndex: 0,
        explanation: "Half Adder හි Carry ප්‍රතිදානය A සහ B ආදානවල AND මෙහෙයුමෙන් ලබා ගනී. එනම්, Carry = A $\cdot$ B. මෙයට හේතුව Carry ප්‍රතිදානය 1 වන්නේ A සහ B යන ආදාන දෙකම 1 වූ විට පමණි."
    },
    {
        questionText: "Full Adder පරිපථයක Sum (ඓක්‍යය) ප්‍රතිදානය සඳහා තාර්කික ප්‍රකාශනය කුමක්ද?",
        options: [
            "(A XOR B) XOR CarryIn",
            "(A AND B) OR CarryIn",
            "(A OR B) XOR CarryIn",
            "A XOR B",
            "A AND B AND CarryIn"
        ],
        correctAnswerIndex: 0,
        explanation: "Full Adder හි Sum ප්‍රතිදානය සඳහා සත්‍යතා වගුව විශ්ලේෂණය කිරීමෙන් $(A \oplus B) \oplus Cin$ යන ප්‍රකාශනය ලැබේ. මෙය Half Adder දෙකක් භාවිතා කර Full Adder එකක් නිර්මාණය කරන ආකාරයටද අනුරූප වේ."
    },
    {
        questionText: "Full Adder පරිපථයක Carry Out (පිටවන ඉතිරිය) ප්‍රතිදානය සඳහා තාර්කික ප්‍රකාශනය කුමක්ද?",
        options: [
            "(A AND B) OR (CarryIn AND (A XOR B))",
            "(A OR B) AND (CarryIn OR (A XOR B))",
            "(A XOR B) OR (CarryIn AND A)",
            "A AND B AND CarryIn",
            "A OR B OR CarryIn"
        ],
        correctAnswerIndex: 0,
        explanation: "Full Adder හි Carry Out ප්‍රතිදානය $(A \cdot B) + (Cin \cdot (A \oplus B))$ ලෙස ප්‍රකාශ කළ හැක. මෙයට හේතුව, ආදාන A, B සහ Cin අතරින් අවම වශයෙන් දෙකක් 1 වූ විට Carry Out 1 වීමයි."
    },
    {
        questionText: "Half Adder පරිපථයක අඩුපාඩුව කුමක්ද?",
        options: [
            "පෙර ස්ථානයෙන් ලැබෙන ඉතිරිය (Carry In) හැසිරවීමට නොහැකි වීම.",
            "එයට ද්විමය බිට් දෙකකට වඩා එකතු කළ නොහැකි වීම.",
            "එයට ඓක්‍යය (Sum) නිපදවීමට නොහැකි වීම.",
            "එයට ඉතිරිය (Carry) නිපදවීමට නොහැකි වීම.",
            "එය ඉතා වේගවත් වීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Half Adder හට බිට් දෙකක් එකතු කළ හැකි නමුත්, බහු-බිට් සංඛ්‍යා එකතු කිරීමේදී එක් ස්ථානයකින් තවත් ස්ථානයකට සම්ප්‍රේෂණය වන Carry In අගය හැසිරවීමට එයට නොහැක. මෙම අඩුපාඩුව Full Adder මගින් විසඳා ඇත."
    },
    {
        questionText: "Full Adder පරිපථයක් Half Adder පරිපථ කීයක් භාවිතයෙන් තැනිය හැකිද?",
        options: [
            "දෙකක් (2)",
            "එකක් (1)",
            "තුනක් (3)",
            "හතරක් (4)",
            "කිසිවක් නොවේ."
        ],
        correctAnswerIndex: 0,
        explanation: "Full Adder පරිපථයක් Half Adder පරිපථ දෙකක් සහ එක් OR ද්වාරයක් භාවිතයෙන් නිර්මාණය කළ හැක. පළමු Half Adder A සහ B එකතු කරන අතර, දෙවන Half Adder එහි Sum ප්‍රතිදානය සහ Carry In එකතු කරයි. OR ද්වාරය Half Adder දෙකේ Carry ප්‍රතිදාන සම්බන්ධ කරයි."
    },
    {
        questionText: "පරිගණකයක CPU තුළ Registers (රෙජිස්ටර්) යනු කුමක්ද?",
        options: [
            "සැකසීම සඳහා දත්ත සහ උපදෙස් තාවකාලිකව ගබඩා කරන කුඩා මතක ඒකක.",
            "ගණිතමය මෙහෙයුම් සිදු කරන පරිපථ.",
            "පරිගණකයේ බල සැපයුම පාලනය කරන ඒකක.",
            "දත්ත ප්‍රවාහනය කරන මාර්ග.",
            "පරිගණකයේ පිටතට සම්බන්ධ වන උපාංග."
        ],
        correctAnswerIndex: 0,
        explanation: "Registers යනු CPU තුළ ඇති ඉතා කුඩා, අධි වේගී මතක ඒකක වේ. ඒවා CPU මගින් සැකසීමට අවශ්‍ය දත්ත සහ උපදෙස් ක්ෂණිකව ගබඩා කර තබා ගැනීමට භාවිතා කරයි. Registers සාමාන්‍යයෙන් Flip-Flops භාවිතයෙන් නිර්මාණය වේ."
    },
    {
        questionText: "Flip-Flop එකක් 'ලැච්' (Latch) එකකින් වෙනස් වන්නේ කෙසේද?",
        options: [
            "Flip-Flop එකක් Clock සංඥාවකට සංවේදී වන අතර, Latch එකක් සංවේදී නොවේ.",
            "Latch එකකට වඩා Flip-Flop එකක් තොරතුරු ගබඩා කළ හැක.",
            "Latch එකක් Flip-Flop එකකට වඩා වේගවත්ය.",
            "Flip-Flop එකකට වඩා Latch එකකට බලශක්තිය වැඩිපුර අවශ්‍ය වේ.",
            "ඒවා අතර වෙනසක් නොමැත."
        ],
        correctAnswerIndex: 0,
        explanation: "Flip-Flop සහ Latch යන දෙකම තනි බිට් එකක් ගබඩා කළ හැකි මූලික මතක ඒකක වේ. ප්‍රධාන වෙනස වන්නේ Flip-Flop එකක් 'Clock' සංඥාවකට (edge-triggered) සංවේදී වීමයි, එනම් එහි තත්වය වෙනස් වන්නේ Clock සංඥාවේ යම්කිසි දාරයකදී (rising edge හෝ falling edge) පමණි. Latch එකක් 'level-triggered' වන අතර, Clock සංඥාවේ යම් මට්ටමක් (high හෝ low) පවතින තාක් කල් එහි ප්‍රතිදානය ආදානයට අනුව වෙනස් වේ."
    },
    {
        questionText: "S-R Flip-Flop එකක 'අවසර නැති' (Invalid) තත්වය ඇති වන්නේ කුමන ආදාන සංයෝජනය සඳහාද?",
        options: [
            "S = 1, R = 1",
            "S = 0, R = 0",
            "S = 1, R = 0",
            "S = 0, R = 1",
            "S = 1, R = 2"
        ],
        correctAnswerIndex: 0,
        explanation: "S-R (Set-Reset) Flip-Flop එකක S=1 සහ R=1 යන ආදාන සංයෝජනය 'අවසර නැති' (Invalid) හෝ 'තීරණය කළ නොහැකි' තත්වයක් ලෙස හැඳින්වේ. මෙම අවස්ථාවේදී Q සහ Q' ප්‍රතිදාන දෙකම 0 හෝ දෙකම 1 විය හැකි අතර, එය Flip-Flop හි නිවැරදි ක්‍රියාකාරීත්වයට බාධා කරයි."
    },
    {
        questionText: "පරිගණක මතකය (Computer Memory) ගොඩනැගීමට Flip-Flops භාවිතා කරන්නේ කෙසේද?",
        options: [
            "එක් එක් මතක සෛලය (Memory Cell) ලෙස ක්‍රියා කිරීමට තනි Flip-Flop එකක් භාවිතා කිරීමෙන්.",
            "සංඛ්‍යා එකතු කිරීම සඳහා.",
            "තාර්කික මෙහෙයුම් සිදු කිරීම සඳහා.",
            "දත්ත සම්ප්‍රේෂණය කිරීම සඳහා.",
            "පරිගණකයේ වේගය වැඩි කිරීම සඳහා."
        ],
        correctAnswerIndex: 0,
        explanation: "පරිගණක මතකය (RAM - Random Access Memory) සෑදී ඇත්තේ බිලියන ගණනක් කුඩා මතක සෛල වලිනි. මෙම එක් එක් මතක සෛලය තනි ද්විමය බිට් එකක් (0 හෝ 1) ගබඩා කර ගැනීමට හැකියාව ඇති Flip-Flop එකක් මගින් නිරූපණය කළ හැක. මේ අනුව, Flip-Flops මතක ඒකකවල මූලික තැනුම් ඒකක වේ."
    },
    {
        questionText: "Clocked S-R Flip-Flop එකක Clock (CLK) ආදානයේ වැදගත්කම කුමක්ද?",
        options: [
            "Flip-Flop හි තත්වය වෙනස් වන්නේ Clock සංඥාවේ නිශ්චිත දාරයකදී (edge) පමණක් බව සහතික කිරීම.",
            "Flip-Flop හි බලශක්ති පරිභෝජනය පාලනය කිරීම.",
            "Flip-Flop හි භෞතික ප්‍රමාණය තීරණය කිරීම.",
            "Flip-Flop හි ආදාන සංඛ්‍යාව පාලනය කිරීම.",
            "Flip-Flop හි වේගය අඩු කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Clocked Flip-Flops වලදී, Clock (CLK) ආදානය ඉතා වැදගත් වේ. එය Flip-Flop හි තත්වය වෙනස් විය හැක්කේ Clock සංඥාවේ rising edge (0 සිට 1 ට) හෝ falling edge (1 සිට 0 ට) වැනි නිශ්චිත සංක්‍රාන්ති ලක්ෂ්‍යයකදී පමණක් බව සහතික කරයි. මෙය සමමුහුර්ත පරිපථවලදී (Synchronous Circuits) දත්ත ප්‍රවාහය පාලනය කිරීමට උපකාරී වේ."
    },
    {
        questionText: "D Flip-Flop එකක ප්‍රධාන කාර්යය කුමක්ද?",
        options: [
            "Clock සංඥාවේ නිශ්චිත දාරයකදී D ආදානයේ අගය Q ප්‍රතිදානයට ගබඩා කිරීම.",
            "ද්විමය සංඛ්‍යා එකතු කිරීම.",
            "තාර්කික මෙහෙයුම් සිදු කිරීම.",
            "සංඥා ප්‍රතිලෝම කිරීම.",
            "දත්ත සංසන්දනය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "D (Data or Delay) Flip-Flop එකක් යනු තොරතුරු ගබඩා කිරීම සඳහා බහුලව භාවිතා වන Flip-Flop වර්ගයකි. එහි ප්‍රධාන කාර්යය වන්නේ Clock සංඥාවේ නිශ්චිත දාරයකදී D (data) ආදානයේ අගය Q ප්‍රතිදානයට ගබඩා කිරීමයි. මෙය මතක රෙජිස්ටර් සහ ෂිෆ්ට් රෙජිස්ටර් (Shift Registers) තැනීම සඳහා ඉතා වැදගත් වේ."
    },
    {
        questionText: "J-K Flip-Flop එකක S-R Flip-Flop එකේ 'අවසර නැති' තත්වය විසඳා ඇත්තේ කෙසේද?",
        options: [
            "J=1, K=1 වන විට Flip-Flop හි පෙර තත්වය ප්‍රතිලෝම කිරීම (Toggle) මගින්.",
            "J=1, K=1 වන විට Flip-Flop හි තත්වය 0 ලෙස සැකසීම මගින්.",
            "J=1, K=1 වන විට Flip-Flop හි තත්වය 1 ලෙස සැකසීම මගින්.",
            "J=1, K=1 වන විට Flip-Flop හි ක්‍රියාකාරීත්වය නැවැත්වීම මගින්.",
            "J=1, K=1 යන ආදාන තත්වය ඉවත් කිරීම මගින්."
        ],
        correctAnswerIndex: 0,
        explanation: "J-K Flip-Flop එක S-R Flip-Flop හි වැඩි දියුණු කළ අනුවාදයකි. එහි J=1, K=1 යන ආදාන සංයෝජනය 'අවසර නැති' තත්වය ඇති නොකරයි. ඒ වෙනුවට, මෙම ආදාන තත්වය යටතේ Flip-Flop හි පෙර තත්වය ප්‍රතිලෝම වේ (Toggle). එනම්, පෙර 0 නම් 1 වේ, පෙර 1 නම් 0 වේ."
    },
    {
        questionText: "T Flip-Flop එකක ප්‍රධාන කාර්යය කුමක්ද?",
        options: [
            "T ආදානය 1 වන විට Flip-Flop හි තත්වය ප්‍රතිලෝම කිරීම (Toggle).",
            "T ආදානයේ අගය ගබඩා කිරීම.",
            "ද්විමය සංඛ්‍යා එකතු කිරීම.",
            "තාර්කික මෙහෙයුම් සිදු කිරීම.",
            "සංඥා ප්‍රමාද කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "T (Toggle) Flip-Flop යනු J-K Flip-Flop එකක J සහ K ආදාන දෙකම එකට සම්බන්ධ කිරීමෙන් සෑදූ Flip-Flop වර්ගයකි. එහි ප්‍රධාන කාර්යය වන්නේ Clock සංඥාවේ නිශ්චිත දාරයකදී T ආදානය 1 වන විට Flip-Flop හි තත්වය ප්‍රතිලෝම කිරීමයි (toggle). මෙය කවුන්ටර් (Counters) පරිපථ තැනීම සඳහා ඉතා ප්‍රයෝජනවත් වේ."
    },
    {
        questionText: "Sequential Logic Circuits (අනුක්‍රමික තාර්කික පරිපථ) ප්‍රධාන වශයෙන් භාවිතා වන්නේ කුමන කාර්යයන් සඳහාද?",
        options: [
            "දත්ත ගබඩා කිරීම, කවුන්ටර් සහ රෙජිස්ටර් තැනීම.",
            "අංක ගණිතමය මෙහෙයුම් පමණක් සිදු කිරීම.",
            "තාර්කික මෙහෙයුම් පමණක් සිදු කිරීම.",
            "ඇනලොග් සංඥා පාලනය කිරීම.",
            "ස්ථිතික තොරතුරු ප්‍රදර්ශනය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "අනුක්‍රමික තාර්කික පරිපථවලට මතක ගබඩා කිරීමේ හැකියාව ඇති බැවින්, ඒවා දත්ත ගබඩා කිරීම (මතකය), සිදුවීම් ගණන් කිරීම (කවුන්ටර්) සහ දත්ත ස්ථාන මාරු කිරීම (රෙජිස්ටර්) වැනි කාර්යයන් සඳහා අත්‍යවශ්‍ය වේ. මේවා සියල්ලම පරිගණකයක මූලික ක්‍රියාකාරීත්වයට දායක වේ."
    },
    {
        questionText: "CPU හි Arithmetic Logic Unit (ALU) කොටස මගින් ප්‍රධාන වශයෙන් සිදු කරනු ලබන කාර්යයන් මොනවාද?",
        options: [
            "අංක ගණිතමය (Arithmetic) සහ තාර්කික (Logic) මෙහෙයුම් සිදු කිරීම.",
            "පරිගණකයට දත්ත ආදානය කිරීම.",
            "පරිගණකයෙන් දත්ත ප්‍රතිදානය කිරීම.",
            "පරිගණකයේ බල සැපයුම පාලනය කිරීම.",
            "පරිගණකයේ ගබඩා කිරීමේ ක්‍රියාකාරීත්වය පාලනය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "ALU (Arithmetic Logic Unit) යනු CPU හි ඉතා වැදගත් කොටසකි. එයට අංක ගණිතමය මෙහෙයුම් (එකතු කිරීම, අඩු කිරීම, ගුණ කිරීම, බෙදීම) සහ තාර්කික මෙහෙයුම් (AND, OR, NOT, XOR වැනි) යන දෙකම සිදු කළ හැකිය. Half Adder සහ Full Adder යනු ALU හි අංක ගණිතමය මෙහෙයුම් සඳහා භාවිතා වන මූලික තැනුම් ඒකක වේ."
    },
    {
        questionText: "පරිගණක මතකයේ 'Access Time' (ප්‍රවේශ කාලය) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "මතක ඒකකයකින් දත්ත කියවීමට හෝ ලිවීමට ගතවන කාලය.",
            "මතක ඒකකයක් ක්‍රියාත්මක කිරීමට ගතවන කාලය.",
            "මතක ඒකකයක් නිෂ්පාදනය කිරීමට ගතවන කාලය.",
            "මතක ඒකකයක ධාරිතාව.",
            "මතක ඒකකයක භෞතික ප්‍රමාණය."
        ],
        correctAnswerIndex: 0,
        explanation: "Access Time යනු පරිගණක මතකයෙන් දත්ත කියවීමට හෝ මතකයට දත්ත ලිවීමට ගතවන කාලයයි. අඩු ප්‍රවේශ කාලයක් යනු මතකය වඩා වේගවත් බවයි, එය සමස්ත පරිගණක ක්‍රියාකාරීත්වයට සෘජුවම බලපායි."
    },
    {
        questionText: "CPU හි Program Counter (වැඩසටහන් කවුන්ටරය) යනු කුමක්ද?",
        options: [
            "ක්‍රියාත්මක කළ යුතු ඊළඟ උපදෙසෙහි මතක ලිපිනය ගබඩා කරන රෙජිස්ටරයකි.",
            "වත්මන් උපදෙස ගබඩා කරන රෙජිස්ටරයකි.",
            "ගණිතමය මෙහෙයුම් සිදු කරන රෙජිස්ටරයකි.",
            "දත්ත ගබඩා කරන රෙජිස්ටරයකි.",
            "පරිගණකයේ වේගය ගණනය කරන රෙජිස්ටරයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "Program Counter (PC) යනු CPU හි ඇති විශේෂ රෙජිස්ටරයකි. එහි ප්‍රධාන කාර්යය වන්නේ ක්‍රියාත්මක කළ යුතු ඊළඟ උපදෙසෙහි මතක ලිපිනය (address) ගබඩා කර තබා ගැනීමයි. මෙය වැඩසටහන් ප්‍රවාහය පාලනය කිරීමට අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "පරිගණකයක 'ප්‍රොසෙසර බිට් පළල' (Processor Bit Width) යනු කුමක්ද? (උදා: 32-bit, 64-bit)",
        options: [
            "ප්‍රොසෙසරයට එකවර සැකසිය හැකි දත්ත ප්‍රමාණය (බිට් වලින්).",
            "ප්‍රොසෙසරයේ භෞතික ප්‍රමාණය.",
            "ප්‍රොසෙසරයේ වේගය.",
            "ප්‍රොසෙසරයේ මතක ධාරිතාව.",
            "ප්‍රොසෙසරයේ බලශක්ති පරිභෝජනය."
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රොසෙසර බිට් පළල යනු ප්‍රොසෙසරයට එකවර හැසිරවිය හැකි දත්ත බිට් ගණනයි. උදාහරණයක් ලෙස, 64-bit ප්‍රොසෙසරයක් යනු එයට එකවර දත්ත බිට් 64ක් සැකසිය හැකි බවයි. මෙය ප්‍රොසෙසරයේ කාර්ය සාධනයට සෘජුවම බලපාන අතර, විශාල සංඛ්‍යා එකතු කිරීමට හෝ ගණනය කිරීමට ඉඩ සලසයි."
    },
    {
        questionText: "පරිගණකයක 'Cache Memory' (හැඹිලි මතකය) යනු කුමක්ද?",
        options: [
            "CPU සහ ප්‍රධාන මතකය (RAM) අතර පිහිටා ඇති, අධි වේගී කුඩා මතකයකි.",
            "පරිගණකයේ ප්‍රධාන මතකය (RAM).",
            "පරිගණකයේ දෘඪ තැටිය (Hard Disk).",
            "පරිගණකයේ ස්ථිර මතකය (ROM).",
            "පරිගණකයේ බල සැපයුම."
        ],
        correctAnswerIndex: 0,
        explanation: "Cache Memory යනු CPU සහ ප්‍රධාන මතකය (RAM) අතර පිහිටා ඇති ඉතා වේගවත්, නමුත් සාපේක්ෂව කුඩා මතකයකි. එය CPU මගින් නිතර භාවිතා කරන දත්ත සහ උපදෙස් තාවකාලිකව ගබඩා කර තබා ගනී. මෙය CPU හට ප්‍රධාන මතකයෙන් දත්ත ලබා ගැනීමට ගතවන කාලය අඩු කර, සමස්ත පද්ධතියේ වේගය වැඩි කිරීමට උපකාරී වේ. Flip-Flops සහ ඒ හා සමාන මතක මූලද්‍රව්‍ය භාවිතා කර මෙය නිර්මාණය වේ."
    },
    {
        questionText: "Shift Register (ෂිෆ්ට් රෙජිස්ටර්) එකක ප්‍රධාන කාර්යය කුමක්ද?",
        options: [
            "ද්විමය දත්ත බිට් එකින් එක Shift කිරීම (මාරු කිරීම).",
            "ද්විමය සංඛ්‍යා එකතු කිරීම.",
            "තාර්කික මෙහෙයුම් සිදු කිරීම.",
            "සංඥා ප්‍රතිලෝම කිරීම.",
            "දත්ත සංසන්දනය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Shift Register යනු Flip-Flops කිහිපයකින් සමන්විත අනුක්‍රමික පරිපථයකි. එහි ප්‍රධාන කාර්යය වන්නේ ද්විමය දත්ත බිට් එකින් එක වමට හෝ දකුණට මාරු කිරීමයි. මෙය දත්ත අනුක්‍රමිකව (serial) සම්ප්‍රේෂණය කිරීම, සමාන්තර (parallel) දත්ත අනුක්‍රමික දත්ත බවට පරිවර්තනය කිරීම, හෝ ද්විමය සංඛ්‍යා ගුණ කිරීම සහ බෙදීම වැනි මෙහෙයුම් සඳහා භාවිතා වේ."
    },
    {
        questionText: "Counter (කවුන්ටරය) පරිපථයක ප්‍රධාන කාර්යය කුමක්ද?",
        options: [
            "පැමිණෙන Clock ස්පන්දන ගණන් කිරීම.",
            "ද්විමය සංඛ්‍යා ගබඩා කිරීම.",
            "තාර්කික මෙහෙයුම් සිදු කිරීම.",
            "සංඥා විස්තාරණය කිරීම.",
            "දත්ත වර්ගීකරණය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Counter යනු Flip-Flops කිහිපයකින් සමන්විත අනුක්‍රමික පරිපථයකි. එහි ප්‍රධාන කාර්යය වන්නේ Clock ස්පන්දන (pulses) හෝ සිදුවීම් ගණන් කිරීමයි. කවුන්ටර් පරිපථ මගින් ද්විමය සංඛ්‍යා ලෙස ගණන් කිරීමේ ප්‍රතිඵලය ප්‍රතිදානය කරයි. මේවා කාල ගණක (timers), සංඛ්‍යාත මිනුම් (frequency counters) සහ ඩිජිටල් ඔරලෝසු වැනි යෙදීම් වලදී බහුලව භාවිතා වේ."
    },
    {
        questionText: "Asynchronous Counter (අසමමුහුර්ත කවුන්ටරය) යනු කුමක්ද?",
        options: [
            "එක් එක් Flip-Flop එකේ Clock ආදානය එහි පෙර Flip-Flop එකේ ප්‍රතිදානයට සම්බන්ධ කර ඇති කවුන්ටරයකි.",
            "සියලුම Flip-Flops වල Clock ආදාන එකම Clock සංඥාවකට සම්බන්ධ කර ඇති කවුන්ටරයකි.",
            "එය ගණන් කිරීමක් සිදු නොකරන කවුන්ටරයකි.",
            "එය දත්ත ගබඩා කරන කවුන්ටරයකි.",
            "එය වේගය පාලනය කරන කවුන්ටරයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "Asynchronous Counter (හෝ Ripple Counter) එකක, එක් එක් Flip-Flop හි Clock ආදානය එහි පෙර Flip-Flop හි ප්‍රතිදානයට සම්බන්ධ කර ඇත. මේ නිසා, Flip-Flops එකින් එකට ස්පන්දනය වන අතර, Clock සංඥාව සියලුම Flip-Flops වලට එකවර නොලැබේ. මෙය 'ripple' ප්‍රමාදයකට හේතු විය හැක."
    },
    {
        questionText: "Synchronous Counter (සමමුහුර්ත කවුන්ටරය) යනු කුමක්ද?",
        options: [
            "සියලුම Flip-Flops වල Clock ආදාන එකම පොදු Clock සංඥාවකට සම්බන්ධ කර ඇති කවුන්ටරයකි.",
            "එක් එක් Flip-Flop එකේ Clock ආදානය එහි පෙර Flip-Flop එකේ ප්‍රතිදානයට සම්බන්ධ කර ඇති කවුන්ටරයකි.",
            "එය ගණන් කිරීමක් සිදු නොකරන කවුන්ටරයකි.",
            "එය දත්ත ගබඩා කරන කවුන්ටරයකි.",
            "එය වේගය අඩු කරන කවුන්ටරයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "Synchronous Counter එකක, සියලුම Flip-Flops වල Clock ආදාන එකම පොදු Clock සංඥාවකට (Global Clock) සම්බන්ධ කර ඇත. මේ නිසා, සියලුම Flip-Flops එකවර තත්වය වෙනස් කරයි, එමගින් Asynchronous Counter වල ඇති 'ripple' ප්‍රමාදය මඟ හරවා ගනී. මෙය වඩාත් වේගවත් හා විශ්වාසනීය කවුන්ටර් වර්ගයකි."
    },
    {
        questionText: "Memory Register (මතක රෙජිස්ටරය) යනු කුමක්ද?",
        options: [
            "බිට් සමූහයක් (word) ගබඩා කිරීමට භාවිතා කරන Flip-Flops සමූහයකි.",
            "තනි බිට් එකක් ගබඩා කරන උපකරණයකි.",
            "ද්විමය සංඛ්‍යා එකතු කරන පරිපථයකි.",
            "තාර්කික මෙහෙයුම් සිදු කරන ඒකකයකි.",
            "සංඥා ප්‍රතිලෝම කරන පරිපථයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "Memory Register යනු බිට් සමූහයක් (word) ගබඩා කිරීමට භාවිතා කරන Flip-Flops එකතුවකි. උදාහරණයක් ලෙස, 8-bit රෙජිස්ටරයක Flip-Flops 8ක් ඇති අතර, එයට 8-bit දත්ත වචනයක් ගබඩා කළ හැක. මේවා CPU තුළ සහ මතක පද්ධතිවල දත්ත ගබඩා කිරීමට අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "අංකිත පරිපථ තුළ 'ප්‍රමාද' (Delay) ඇතිවීමට හේතුව කුමක්ද?",
        options: [
            "තාර්කික ද්වාරවලට ආදානය වෙනස් වූ විට ප්‍රතිදානය වෙනස් වීමට යම් කාලයක් ගතවීම (ප්‍රචාරණ ප්‍රමාදය).",
            "ද්වාරවල බලශක්ති පරිභෝජනය වැඩි වීම.",
            "ද්වාරවල භෞතික ප්‍රමාණය කුඩා වීම.",
            "ද්වාරවල ආදාන සංඛ්‍යාව වැඩි වීම.",
            "පරිපථයේ පිරිවැය අඩු වීම."
        ],
        correctAnswerIndex: 0,
        explanation: "තාර්කික ද්වාර තුළ 'ප්‍රචාරණ ප්‍රමාදය' (Propagation Delay) හේතුවෙන් අංකිත පරිපථ තුළ 'ප්‍රමාද' ඇතිවේ. මෙය යම් ද්වාරයක ආදාන අගය වෙනස් වූ විට ප්‍රතිදානය වෙනස් වීමට ගතවන කුඩා කාලයයි. මෙම ප්‍රමාදයන් බහු ද්වාර පරිපථවල සමස්ත ක්‍රියාකාරීත්වයේ වේගයට බලපාන අතර, Synchronous Circuits වලදී මෙය වැදගත් වේ."
    },
    {
        questionText: "CPU හි 'Control Unit' (පාලන ඒකකය) හි ප්‍රධාන කාර්යය කුමක්ද?",
        options: [
            "CPU හි සියලුම මෙහෙයුම් පාලනය කිරීම සහ සම්බන්ධීකරණය කිරීම.",
            "ගණිතමය මෙහෙයුම් සිදු කිරීම.",
            "දත්ත ගබඩා කිරීම.",
            "දත්ත ආදානය කිරීම.",
            "දත්ත ප්‍රතිදානය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Control Unit යනු CPU හි ඉතා වැදගත් කොටසකි. එය CPU හි සියලුම මෙහෙයුම් (දත්ත ගබඩා කිරීම, කියවීම, ලිවීම, ගණිතමය මෙහෙයුම්) පාලනය කිරීම සහ සම්බන්ධීකරණය කිරීම සිදු කරයි. එය මතකයෙන් උපදෙස් ලබා ගෙන ඒවා විකේතනය කර, අනෙකුත් ඒකකවලට ක්‍රියාත්මක වීමට අවශ්‍ය පාලන සංඥා ජනනය කරයි. මේ සඳහා Sequential Logic Circuits බහුලව භාවිතා වේ."
    },
    {
        questionText: "අංකිත පරිපථ තුළ 'ලැච් කිරීම' (Latching) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "යම් සංඥාවක් හෝ දත්තයක් එහි අගය රඳවා තබා ගන්නා ලෙස ගබඩා කිරීම.",
            "සංඥාවක් වේගයෙන් සම්ප්‍රේෂණය කිරීම.",
            "සංඥාවක් ප්‍රතිලෝම කිරීම.",
            "සංඥාවක් විස්තාරණය කිරීම.",
            "සංඥාවක් පෙරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "ලැච් කිරීම යනු අංකිත පරිපථවල තොරතුරු ගබඩා කිරීමේ ක්‍රියාවලියකි. මෙය සාමාන්‍යයෙන් Flip-Flops වැනි මතක මූලද්‍රව්‍ය මගින් සිදු කරන අතර, යම් සංඥාවක් හෝ දත්තයක් එහි අගය වෙනස් වන තුරු හෝ පාලන සංඥාවක් ලැබෙන තුරු රඳවා තබා ගැනීමට (latch) ඉඩ සලසයි."
    },
    {
        questionText: "Registers (රෙජිස්ටර්) සහ Memory (මතකය) අතර ඇති ප්‍රධාන වෙනස කුමක්ද?",
        options: [
            "රෙජිස්ටර් CPU තුළ පිහිටා ඇති අතර අධි වේගී කුඩා මතක ඒකක වන අතර, මතකය CPU ට පිටතින් පිහිටා ඇති අතර සාපේක්ෂව අඩු වේගයකින් යුත් විශාල මතක ඒකකයකි.",
            "මතකය CPU තුළ පිහිටා ඇති අතර රෙජිස්ටර් CPU ට පිටතින් පිහිටා ඇත.",
            "රෙජිස්ටර්වලට වඩා මතකය වේගවත්ය.",
            "මතකයට වඩා රෙජිස්ටර්වලට දත්ත අඩු ප්‍රමාණයක් ගබඩා කළ හැක.",
            "රෙජිස්ටර් සහ මතකය යන දෙකම එකම ආකාරයෙන් ක්‍රියා කරයි."
        ],
        correctAnswerIndex: 0,
        explanation: "Registers යනු CPU තුළම පිහිටා ඇති ඉතා කුඩා, අධි වේගී තාවකාලික මතක ඒකක වේ. ඒවා CPU හට ක්ෂණිකව ප්‍රවේශ විය හැකි දත්ත ගබඩා කරයි. Memory (RAM වැනි) යනු CPU ට පිටතින් පිහිටා ඇති සාපේක්ෂව විශාල, නමුත් රෙජිස්ටර් වලට වඩා මන්දගාමී මතක ඒකකයකි. දෙකම දත්ත ගබඩා කරන නමුත්, ඒවායේ පිහිටීම, වේගය සහ ධාරිතාව අනුව වෙනස් වේ."
    },
    {
        questionText: "අර්ධකලක (Half Adder) පරිපථය සඳහා සත්‍යතා වගුවක් නිර්මාණය කිරීමේදී, ආදාන A=1, B=1 වන විට ඓක්‍යය (Sum) සහ ඉතිරිය (Carry) මොනවාද?",
        options: [
            "ඓක්‍යය = 0, ඉතිරිය = 1",
            "ඓක්‍යය = 1, ඉතිරිය = 0",
            "ඓක්‍යය = 1, ඉතිරිය = 1",
            "ඓක්‍යය = 0, ඉතිරිය = 0",
            "ඓක්‍යය = අර්ථ දක්වා නැත, ඉතිරිය = 1"
        ],
        correctAnswerIndex: 0,
        explanation: "ද්විමය සංඛ්‍යා එකතු කිරීමේ නීති අනුව, 1 + 1 = 10 (ද්විමය) වේ. මෙහි 0 යනු ඓක්‍යය වන අතර, 1 යනු ඉතිරිය (Carry) වේ. එබැවින්, Half Adder හි A=1, B=1 වන විට Sum = 0 සහ Carry = 1 වේ."
    },
    {
        questionText: "පූර්ණාකලක (Full Adder) පරිපථය සඳහා සත්‍යතා වගුවක් නිර්මාණය කිරීමේදී, ආදාන A=1, B=1, Carry In=1 වන විට ඓක්‍යය (Sum) සහ පිටවන ඉතිරිය (Carry Out) මොනවාද?",
        options: [
            "ඓක්‍යය = 1, පිටවන ඉතිරිය = 1",
            "ඓක්‍යය = 0, පිටවන ඉතිරිය = 0",
            "ඓක්‍යය = 0, පිටවන ඉතිරිය = 1",
            "ඓක්‍යය = 1, පිටවන ඉතිරිය = 0",
            "ඓක්‍යය = අර්ථ දක්වා නැත, පිටවන ඉතිරිය = 1"
        ],
        correctAnswerIndex: 0,
        explanation: "ද්විමය සංඛ්‍යා එකතු කිරීමේ නීති අනුව, 1 + 1 + 1 (Carry In) = 11 (ද්විමය) වේ. මෙහි 1 යනු ඓක්‍යය වන අතර, 1 යනු පිටවන ඉතිරිය (Carry Out) වේ. එබැවින්, Full Adder හි A=1, B=1, Carry In=1 වන විට Sum = 1 සහ Carry Out = 1 වේ."
    },
    {
        questionText: "CPU හි Instruction Register (උපදෙස් රෙජිස්ටරය) හි කාර්යය කුමක්ද?",
        options: [
            "දැනට ක්‍රියාත්මක වෙමින් පවතින උපදෙස ගබඩා කිරීම.",
            "ක්‍රියාත්මක කළ යුතු ඊළඟ උපදෙසෙහි ලිපිනය ගබඩා කිරීම.",
            "ගණිතමය මෙහෙයුම්වල ප්‍රතිඵල ගබඩා කිරීම.",
            "පරිගණකයට දත්ත ආදානය කිරීම.",
            "පරිගණකයෙන් දත්ත ප්‍රතිදානය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Instruction Register (IR) යනු CPU හි ඇති රෙජිස්ටරයකි. එහි ප්‍රධාන කාර්යය වන්නේ Memory වෙතින් ලබාගත්, දැනට ක්‍රියාත්මක වෙමින් පවතින උපදෙස ගබඩා කර තබා ගැනීමයි. Control Unit මගින් මෙම රෙජිස්ටරයේ ඇති උපදෙස විකේතනය කර ක්‍රියාත්මක කරයි."
    },
    {
        questionText: "Sequential logic circuits (අනුක්‍රමික තාර්කික පරිපථ) වලදී 'ස්ථාවර තත්වය' (Stable State) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "පරිපථයේ ප්‍රතිදානය ආදාන වෙනස් නොවන තාක් කල් ස්ථාවරව පවතින තත්වය.",
            "පරිපථයේ ආදාන නිරන්තරයෙන් වෙනස් වන තත්වය.",
            "පරිපථය ක්‍රියා විරහිත වන තත්වය.",
            "පරිපථය ආරම්භක තත්වයට පැමිණෙන තත්වය.",
            "පරිපථය දෝෂ සහිත වන තත්වය."
        ],
        correctAnswerIndex: 0,
        explanation: "Sequential logic circuits වලදී, 'ස්ථාවර තත්වය' යනු පරිපථයේ ප්‍රතිදානය (Q) ආදාන වෙනස් නොවන තාක් කල් හෝ Clock සංඥාවක් නොලැබෙන තාක් කල් ස්ථාවරව පවතින තත්වයයි. Flip-Flops වලට මෙම ස්ථාවර තත්වයන් දෙකෙන් එකක (Set හෝ Reset) පැවතිය හැක, එමගින් තොරතුරු ගබඩා කිරීමේ හැකියාව ලැබේ."
    },
    {
        questionText: "Memory (මතකය) සහ Storage (ගබඩා කිරීම) අතර වෙනස කුමක්ද?",
        options: [
            "Memory යනු CPU ට කෙටි කාලීනව ප්‍රවේශ විය හැකි අධි වේගී තාවකාලික ගබඩාවක් වන අතර, Storage යනු දත්ත ස්ථිරව ගබඩා කරන දිගු කාලීන, සාපේක්ෂව මන්දගාමී ගබඩාවකි.",
            "Memory යනු දෘඪ තැටිය වන අතර, Storage යනු RAM වේ.",
            "Memory යනු දත්ත ස්ථිරව ගබඩා කරන අතර, Storage යනු තාවකාලිකව ගබඩා කරයි.",
            "ඒවා අතර වෙනසක් නොමැත, පද දෙකම එකිනෙකට ආදේශ කළ හැක.",
            "Memory යනු ඇනලොග් වන අතර, Storage යනු ඩිජිටල් වේ."
        ],
        correctAnswerIndex: 0,
        explanation: "සාමාන්‍ය පරිගණක විද්‍යාවේදී, 'Memory' (මතකය) යන්නෙන් අදහස් කරන්නේ RAM (Random Access Memory) වැනි ප්‍රධාන මතකයයි, එය CPU ට කෙටි කාලීනව සහ අධි වේගයෙන් ප්‍රවේශ විය හැකි තාවකාලික දත්ත ගබඩාවකි. 'Storage' (ගබඩා කිරීම) යන්නෙන් අදහස් කරන්නේ දෘඪ තැටි, SSD, USB ඩ්‍රයිව් වැනි දත්ත ස්ථිරව ගබඩා කරන දිගු කාලීන, සාපේක්ෂව මන්දගාමී ගබඩා උපාංගයි."
    },
    {
        questionText: "RAM (Random Access Memory) හි 'Random Access' යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "මතකයේ ඕනෑම ස්ථානයකට ඕනෑම වේලාවක කෙලින්ම ප්‍රවේශ විය හැකි වීම.",
            "මතකයේ දත්ත අහඹු ලෙස ගබඩා කිරීම.",
            "මතකයෙන් දත්ත අහඹු ලෙස කියවීම.",
            "මතකය ඕනෑම අනුපිළිවෙලකට ප්‍රවේශ විය යුතු වීම.",
            "මතකයට ඕනෑම අගයක් ගබඩා කළ හැකි වීම."
        ],
        correctAnswerIndex: 0,
        explanation: "RAM හි 'Random Access' යන්නෙන් අදහස් කරන්නේ මතකයේ ඕනෑම මතක ස්ථානයකට (address) සමාන වේලාවකින් කෙලින්ම ප්‍රවේශ විය හැකි බවයි, දත්ත අනුපිළිවෙලින් කියවීම හෝ ලිවීම අවශ්‍ය නොවේ. මෙය දෘඪ තැටි වැනි අනුක්‍රමික ප්‍රවේශ උපාංගවලට වඩා වෙනස් වේ."
    },
    {
        questionText: "පරිගණකයක 'ROM' (Read-Only Memory) හි ප්‍රධාන කාර්යය කුමක්ද?",
        options: [
            "පරිගණකය ආරම්භ කිරීමට අවශ්‍ය මූලික උපදෙස් (BIOS/UEFI) ගබඩා කිරීම.",
            "ක්‍රියාත්මක වන වැඩසටහන්වල දත්ත ගබඩා කිරීම.",
            "CPU මගින් භාවිතා කරන තාවකාලික දත්ත ගබඩා කිරීම.",
            "පරිශීලක දත්ත ස්ථිරව ගබඩා කිරීම.",
            "පරිගණකයේ බල සැපයුම පාලනය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "ROM (Read-Only Memory) යනු පරිගණකයේ බලය විසන්ධි කළ විටද එහි දත්ත රඳවා තබා ගන්නා ස්ථිර මතකයකි. එහි ප්‍රධාන කාර්යය වන්නේ පරිගණකය ආරම්භ කිරීමට අවශ්‍ය මූලික උපදෙස් (BIOS - Basic Input/Output System හෝ UEFI) ගබඩා කිරීමයි. මෙම උපදෙස් නිෂ්පාදනය කිරීමේදී ROM තුළ ලියා ඇති අතර සාමාන්‍යයෙන් වෙනස් කළ නොහැක."
    },
    {
        questionText: "පරිගණකයක දත්ත 'බස්' (Bus) යනු කුමක්ද?",
        options: [
            "පරිගණකයේ විවිධ සංරචක අතර දත්ත සම්ප්‍රේෂණය කරන විද්‍යුත් මාර්ග සමූහයකි.",
            "පරිගණකයේ බල සැපයුම් ඒකකයකි.",
            "පරිගණකයේ ප්‍රධාන මතකය.",
            "පරිගණකයේ CPU එක.",
            "පරිගණකයේ ආදාන උපාංගයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "පරිගණකයක 'බස්' යනු CPU, මතකය, සහ ආදාන/ප්‍රතිදාන උපාංග වැනි විවිධ සංරචක අතර දත්ත, ලිපින සහ පාලන සංඥා සම්ප්‍රේෂණය කරන විද්‍යුත් මාර්ග සමූහයකි. එය පරිගණකය තුළ තොරතුරු ගලා යාම සඳහා මධ්‍යම සන්නිවේදන මාර්ගයක් ලෙස ක්‍රියා කරයි."
    },
    {
        questionText: "CPU හි 'Address Bus' (ලිපින බසය) හි කාර්යය කුමක්ද?",
        options: [
            "මතක ස්ථානයක ලිපිනය හෝ I/O උපාංගයක ලිපිනය සම්ප්‍රේෂණය කිරීම.",
            "දත්ත සම්ප්‍රේෂණය කිරීම.",
            "පාලන සංඥා සම්ප්‍රේෂණය කිරීම.",
            "බල සැපයුම් සංඥා සම්ප්‍රේෂණය කිරීම.",
            "සංඛ්‍යා ගණනය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Address Bus යනු CPU මගින් මතකයේ හෝ ආදාන/ප්‍රතිදාන (I/O) උපාංගවල නිශ්චිත ස්ථානයක් තෝරා ගැනීම සඳහා භාවිතා කරන මාර්ග සමූහයකි. CPU එකට දත්ත කියවීමට හෝ ලිවීමට අවශ්‍ය ලිපිනය Address Bus හරහා යවනු ලැබේ."
    },
    {
        questionText: "CPU හි 'Data Bus' (දත්ත බසය) හි කාර්යය කුමක්ද?",
        options: [
            "CPU, මතකය සහ I/O උපාංග අතර දත්ත සම්ප්‍රේෂණය කිරීම.",
            "මතක ස්ථානයක ලිපිනය සම්ප්‍රේෂණය කිරීම.",
            "පාලන සංඥා සම්ප්‍රේෂණය කිරීම.",
            "බල සැපයුම් සංඥා සම්ප්‍රේෂණය කිරීම.",
            "කාල සංඥා සම්ප්‍රේෂණය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Data Bus යනු CPU, මතකය සහ ආදාන/ප්‍රතිදාන (I/O) උපාංග අතර ද්විමය දත්ත (උපදෙස් හෝ තොරතුරු) සම්ප්‍රේෂණය කිරීමට භාවිතා කරන මාර්ග සමූහයකි. එය දත්ත කියවීමට සහ ලිවීමට භාවිතා වේ."
    },
    {
        questionText: "CPU හි 'Control Bus' (පාලන බසය) හි කාර්යය කුමක්ද?",
        options: [
            "සංරචක අතර ක්‍රියාකාරීත්වයන් සමමුහුර්ත කිරීමට සහ මෙහෙයුම් වර්ගය (කියවීම/ලිවීම) පාලනය කිරීමට සංඥා සම්ප්‍රේෂණය කිරීම.",
            "දත්ත සම්ප්‍රේෂණය කිරීම.",
            "ලිපිනයන් සම්ප්‍රේෂණය කිරීම.",
            "බල සැපයුම් සංඥා සම්ප්‍රේෂණය කිරීම.",
            "කාල සංඥා සම්ප්‍රේෂණය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Control Bus යනු පරිගණක පද්ධතියේ විවිධ සංරචක අතර ක්‍රියාකාරීත්වයන් සමමුහුර්ත කිරීමට සහ මෙහෙයුම් වර්ගය (උදා: මතකයෙන් කියවීම, මතකයට ලිවීම, I/O මෙහෙයුම) පාලනය කිරීමට භාවිතා කරන සංඥා මාර්ග සමූහයකි. එය CPU මගින් අනෙකුත් උපාංග වෙත විවිධ පාලන සංඥා යැවීමට භාවිතා කරයි."
    },
    {
        questionText: "අංකිත පරිපථයක 'Multiplexer' (බහුවරණකය) හි කාර්යය කුමක්ද?",
        options: [
            "ආදාන කිහිපයකින් එකක් තෝරාගෙන තනි ප්‍රතිදානයකට යැවීම.",
            "තනි ආදානයක් ආදාන කිහිපයකට බෙදා හැරීම.",
            "දත්ත ගබඩා කිරීම.",
            "ද්විමය සංඛ්‍යා එකතු කිරීම.",
            "සංඥාවක් ප්‍රතිලෝම කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Multiplexer (හෝ MUX) යනු තේරීම් ආදානයක් (select input) මගින් පාලනය වන, ආදාන කිහිපයකින් එකක් තෝරාගෙන එම තෝරාගත් ආදානය තනි ප්‍රතිදානයකට යවන ඒකාබද්ධ තාර්කික පරිපථයකි. මෙය දත්ත තේරීම් (data selection) සහ දත්ත මාර්ගගත කිරීමේ (data routing) යෙදීම් වලදී බහුලව භාවිතා වේ."
    },
    {
        questionText: "අංකිත පරිපථයක 'Demultiplexer' (ද්වි-බහුවරණකය) හි කාර්යය කුමක්ද?",
        options: [
            "තනි ආදානයක් තේරීම් ආදාන අනුව ප්‍රතිදාන කිහිපයකින් එකකට යැවීම.",
            "ආදාන කිහිපයකින් එකක් තෝරාගෙන තනි ප්‍රතිදානයකට යැවීම.",
            "දත්ත ගබඩා කිරීම.",
            "ද්විමය සංඛ්‍යා එකතු කිරීම.",
            "සංඥාවක් ප්‍රතිලෝම කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Demultiplexer (හෝ DEMUX) යනු Multiplexer එකේ ප්‍රතිලෝම ක්‍රියාකාරීත්වය සිදු කරන පරිපථයකි. එය තනි ආදානයක් ලබාගෙන, තේරීම් ආදානයක් මගින් පාලනය වන පරිදි, එම ආදානය ප්‍රතිදාන මාර්ග කිහිපයකින් එකකට යවයි. මෙය දත්ත බෙදා හැරීමේ (data distribution) යෙදීම් වලදී භාවිතා වේ."
    },
    {
        questionText: "අංකිත පරිපථ තුළ 'Encoder' (කේතකාරකය) හි කාර්යය කුමක්ද?",
        options: [
            "ආදාන කිහිපයකින්, ක්‍රියාකාරී (active) තත්වයේ ඇති ආදානයට අනුරූප වන ද්විමය කේතයක් ජනනය කිරීම.",
            "ද්විමය කේතයක් විකේතනය කර ආදාන කිහිපයකින් එකක් ක්‍රියාත්මක කිරීම.",
            "ද්විමය සංඛ්‍යා එකතු කිරීම.",
            "දත්ත ගබඩා කිරීම.",
            "සංඥා ප්‍රතිලෝම කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Encoder යනු ආදාන කිහිපයක් ඇති ඒකාබද්ධ තාර්කික පරිපථයකි. එහි ප්‍රතිදානය වන්නේ, ක්‍රියාකාරී (active) තත්වයේ ඇති ආදානයට අනුරූප වන ද්විමය කේතයකි. උදාහරණයක් ලෙස, Decimal to Binary Encoder එකක් ඩිජිටල් යතුරු පුවරුවක යතුරක් එබූ විට එයට අනුරූප ද්විමය කේතය ජනනය කරයි."
    },
    {
        questionText: "අංකිත පරිපථ තුළ 'Decoder' (විකේතකාරකය) හි කාර්යය කුමක්ද?",
        options: [
            "ද්විමය කේතයක් ආදානයක් ලෙස ලබාගෙන, එයට අනුරූප වන එක් ප්‍රතිදානයක් පමණක් ක්‍රියාත්මක කිරීම.",
            "ආදාන කිහිපයකින්, ක්‍රියාකාරී තත්වයේ ඇති ආදානයට අනුරූප වන ද්විමය කේතයක් ජනනය කිරීම.",
            "ද්විමය සංඛ්‍යා එකතු කිරීම.",
            "දත්ත ගබඩා කිරීම.",
            "සංඥා ප්‍රතිලෝම කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Decoder යනු Encoder එකේ ප්‍රතිලෝම ක්‍රියාකාරීත්වය සිදු කරන ඒකාබද්ධ තාර්කික පරිපථයකි. එය ද්විමය කේතයක් ආදානයක් ලෙස ලබාගෙන, එම කේතයට අනුරූප වන එක් ප්‍රතිදාන මාර්ගයක් පමණක් ක්‍රියාත්මක කරයි (active කරයි). Seven-Segment Display පාලනය කිරීම වැනි යෙදීම් වලදී මේවා බහුලව භාවිතා වේ."
    },
    {
        questionText: "පරිගණකයක 'Microprocessor' (ක්ෂුද්‍ර සකසනය) යනු කුමක්ද?",
        options: [
            "පරිගණකයක සියලුම CPU ක්‍රියාකාරීත්වයන් තනි Integrated Circuit (IC) චිපයක් මත ඒකාබද්ධ කර ඇති උපාංගයකි.",
            "පරිගණකයේ ප්‍රධාන මතකය.",
            "පරිගණකයේ බල සැපයුම් ඒකකය.",
            "පරිගණකයේ ග්‍රැෆික් සැකසුම් ඒකකය.",
            "පරිගණකයේ ආදාන/ප්‍රතිදාන පාලක ඒකකය."
        ],
        correctAnswerIndex: 0,
        explanation: "Microprocessor යනු පරිගණකයක සියලුම CPU ක්‍රියාකාරීත්වයන් (ALU, Control Unit, Registers) තනි Integrated Circuit (IC) චිපයක් මත ඒකාබද්ධ කර ඇති උපාංගයකි. නවීන පරිගණකවල මධ්‍ය සැකසුම් ඒකකය ලෙස ක්‍රියා කරන්නේ ක්ෂුද්‍ර සකසනයයි."
    },
    {
        questionText: "CPU හි 'Register File' (රෙජිස්ටර ගොනුව) යනු කුමක්ද?",
        options: [
            "CPU තුළ ඇති වේගවත් රෙජිස්ටර සමූහයක්, දත්ත සහ ලිපින ක්ෂණිකව ප්‍රවේශ කර ගැනීම සඳහා.",
            "පරිගණකයේ දෘඪ තැටියේ ඇති ගොනු සමූහයක්.",
            "පරිගණකයේ RAM මතකයේ ඇති දත්ත.",
            "CPU තුළ ඇති උපදෙස් කට්ටලයක්.",
            "CPU හි සිසිලන පද්ධතිය."
        ],
        correctAnswerIndex: 0,
        explanation: "Register File යනු CPU තුළ ඇති වේගවත් රෙජිස්ටර සමූහයකි. CPU මගින් නිතර භාවිතා කරන දත්ත සහ ලිපින මෙහි තාවකාලිකව ගබඩා කර ඇති අතර, එමගින් දත්ත ලබා ගැනීමේ වේගය සැලකිය යුතු ලෙස වැඩි කරයි. මේවාද Flip-Flops භාවිතයෙන් තනා ඇත."
    },
    {
        questionText: "Full Adder පරිපථයක තාර්කික ප්‍රකාශන නිර්මාණය කිරීමේදී, 'Carry In' (පෙර ස්ථානයෙන් ලැබෙන ඉතිරිය) හි වැදගත්කම කුමක්ද?",
        options: [
            "ද්විමය එකතු කිරීමේදී බහු බිට් සංඛ්‍යා හැසිරවීමට එය ඉඩ සලසයි.",
            "එය එකතු කිරීමේ මෙහෙයුම සරල කරයි.",
            "එය එකතු කිරීමේ මෙහෙයුමේ වේගය වැඩි කරයි.",
            "එය එකතු කිරීමේ මෙහෙයුමේ බලශක්ති පරිභෝජනය අඩු කරයි.",
            "එය එකතු කිරීමේ මෙහෙයුමේ දෝෂ නිවැරදි කරයි."
        ],
        correctAnswerIndex: 0,
        explanation: "Full Adder හි Carry In ආදානය යනු Half Adder හි නොමැති ප්‍රධාන ලක්ෂණයකි. මෙම Carry In ආදානය මගින් පෙර ස්ථානයකින් ජනනය වන ඉතිරිය (carry) වත්මන් එකතු කිරීමේ ස්ථානයට ඇතුළත් කිරීමට ඉඩ සලසයි. මෙය බහු-බිට් ද්විමය සංඛ්‍යා එකතු කිරීමේ පරිපථ (Multi-bit Adders) නිර්මාණය කිරීම සඳහා අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "Sequential logic circuits (අනුක්‍රමික තාර්කික පරිපථ) වලදී 'Timing Diagram' (කාල රූප සටහන) භාවිතා කිරීමේ වැදගත්කම කුමක්ද?",
        options: [
            "Clock සංඥාවට සාපේක්ෂව ආදාන සහ ප්‍රතිදාන සංඥාවල අගයන් කාලයත් සමඟ වෙනස් වන ආකාරය දෘශ්‍යමය වශයෙන් නිරූපණය කිරීම.",
            "පරිපථයේ භෞතික ප්‍රමාණය දැක්වීම.",
            "පරිපථයේ බලශක්ති පරිභෝජනය ගණනය කිරීම.",
            "පරිපථයේ පිරිවැය ඇස්තමේන්තු කිරීම.",
            "පරිපථය සෑදීමට භාවිතා කරන ද්‍රව්‍ය පෙන්වීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Timing Diagram යනු අනුක්‍රමික තාර්කික පරිපථවල ආදාන සහ ප්‍රතිදාන සංඥාවල තත්වයන් (උසස්/පහළ) කාලයත් සමඟ වෙනස් වන ආකාරය නිරූපණය කරන චිත්‍රමය නිරූපණයකි. Clock සංඥාවට සාපේක්ෂව Flip-Flops වල තත්වය වෙනස් වන ආකාරය අවබෝධ කර ගැනීම සඳහා මෙය ඉතා වැදගත් වේ."
    },
    {
        questionText: "පරිගණකයක 'CPU Architecture' (CPU ගෘහ නිර්මාණ ශිල්පය) යනු කුමක්ද?",
        options: [
            "CPU හි අභ්‍යන්තර ව්‍යුහය, එහි සංරචක (ALU, Control Unit, Registers) සහ ඒවා එකට ක්‍රියා කරන ආකාරය විස්තර කිරීම.",
            "CPU හි භෞතික ප්‍රමාණය.",
            "CPU හි නිෂ්පාදන ක්‍රියාවලිය.",
            "CPU හි මිල.",
            "CPU හි වර්ණය."
        ],
        correctAnswerIndex: 0,
        explanation: "CPU Architecture යනු CPU හි අභ්‍යන්තර ව්‍යුහය, එහි ප්‍රධාන සංරචක (Arithmetic Logic Unit - ALU, Control Unit - CU, Registers), ඒවා එකිනෙක සම්බන්ධ වන ආකාරය සහ ඒවා උපදෙස් ක්‍රියාත්මක කරන ආකාරය විස්තර කරන සැලැස්මයි. Von Neumann Architecture සහ Harvard Architecture ප්‍රධාන CPU ගෘහ නිර්මාණ ශිල්ප වර්ග දෙකකි."
    },
    {
        questionText: "CPU හි 'Instruction Set Architecture' (උපදෙස් කට්ටල ගෘහ නිර්මාණ ශිල්පය) යනු කුමක්ද?",
        options: [
            "ප්‍රොසෙසරයට තේරුම් ගත හැකි සහ ක්‍රියාත්මක කළ හැකි සියලුම උපදෙස් (commands) සමූහය.",
            "ප්‍රොසෙසරයේ භෞතික ප්‍රමාණය.",
            "ප්‍රොසෙසරයේ බලශක්ති පරිභෝජනය.",
            "ප්‍රොසෙසරයේ වේගය.",
            "ප්‍රොසෙසරයේ මතක ධාරිතාව."
        ],
        correctAnswerIndex: 0,
        explanation: "Instruction Set Architecture (ISA) යනු ප්‍රොසෙසරයකට තේරුම් ගත හැකි සහ ක්‍රියාත්මක කළ හැකි සියලුම මූලික උපදෙස් (commands) සමූහයයි. මේවාට ගණිතමය මෙහෙයුම්, දත්ත චලනය කිරීමේ මෙහෙයුම්, තාර්කික මෙහෙයුම්, සහ පාලන ප්‍රවාහ මෙහෙයුම් ඇතුළත් වේ. ISA මගින් දෘඪාංග සහ මෘදුකාංග අතර අතුරුමුහුණත (interface) අර්ථ දක්වයි."
    },
    {
        questionText: "අංකිත පරිපථ තුළ 'Gated Latch' (ගේටඩ් ලැච්) එකක ප්‍රයෝජනය කුමක්ද?",
        options: [
            "යම් පාලන සංඥාවක් (gate enable) ක්‍රියාත්මක වූ විට පමණක් ආදානයෙන් දත්ත ග්‍රහණය කර ගැනීමට එය ඉඩ සලසයි.",
            "එය සෑම විටම ආදාන අගය ගබඩා කරයි.",
            "එය සෑම විටම ප්‍රතිදාන අගය ප්‍රතිලෝම කරයි.",
            "එය ද්විමය සංඛ්‍යා ගණනය කරයි.",
            "එය සංඥා විස්තාරණය කරයි."
        ],
        correctAnswerIndex: 0,
        explanation: "Gated Latch යනු Latch එකක වැඩි දියුණු කළ අනුවාදයකි. එයට අමතර පාලන ආදානයක් (Enable or Gate) ඇත. මෙම පාලන සංඥාව ක්‍රියාත්මක වූ විට පමණක් (උදා: 1 වූ විට), Latch එක ආදානයට සංවේදී වන අතර, එහි තත්වය වෙනස් කළ හැක. පාලන සංඥාව අක්‍රිය වූ විට, Latch එක එහි වත්මන් තත්වය රඳවා ගනී, ආදානයේ වෙනස්වීම් නොසලකා හරිමින්."
    },
    {
        questionText: "CPU හි 'Data Path' (දත්ත මාර්ගය) යනු කුමක්ද?",
        options: [
            "දත්ත ගලා යන CPU හි සංරචක සහ ඒවා සම්බන්ධ කරන මාර්ග සමූහය.",
            "CPU හි උපදෙස් ගබඩා කරන ස්ථානය.",
            "CPU හි බල සැපයුම් මාර්ග.",
            "CPU හි සිසිලන පද්ධතිය.",
            "CPU හි භෞතික ප්‍රමාණය."
        ],
        correctAnswerIndex: 0,
        explanation: "Data Path යනු CPU හි අංක ගණිතමය හා තාර්කික මෙහෙයුම් සිදු කරන සංරචක (ALU, Registers) සහ ඒවා අතර දත්ත ගලා යන මාර්ග (buses) සමූහයයි. එය උපදෙස් ක්‍රියාත්මක කිරීමේදී දත්ත ප්‍රවාහනය සහ සැකසීම සඳහා වගකිව යුතුය."
    },
    {
        questionText: "අංකිත පරිපථ තුළ 'Metastability' (අස්ථායි තත්වය) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "Flip-Flop එකක ප්‍රතිදානය 0 හෝ 1 යන නිවැරදි තාර්කික තත්වයට ඉක්මනින් පදිංචි නොවන අවිනිශ්චිත තත්වයකි.",
            "Flip-Flop එකක ප්‍රතිදානය සැමවිටම 0 වන තත්වයකි.",
            "Flip-Flop එකක ප්‍රතිදානය සැමවිටම 1 වන තත්වයකි.",
            "Flip-Flop එකක ආදානය නිරන්තරයෙන් වෙනස් වන තත්වයකි.",
            "Flip-Flop එකක බලශක්ති පරිභෝජනය වැඩි වන තත්වයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "Metastability යනු Flip-Flop එකක ප්‍රතිදානය 0 හෝ 1 යන නිවැරදි තාර්කික තත්වයට ඉක්මනින් පදිංචි නොවන අවිනිශ්චිත තත්වයකි. මෙය සාමාන්‍යයෙන් සිදුවන්නේ Flip-Flop එකක ආදාන (data) සහ Clock සංඥාව එකවරම පාහේ වෙනස් වූ විට (Setup Time සහ Hold Time කොන්දේසි උල්ලංඝනය වන විට) ය. මෙය පරිපථයේ විශ්වසනීයත්වයට බලපාන බැවින් සැලසුම් කිරීමේදී වැළැක්විය යුතුය."
    },
    {
        questionText: "පරිගණකයක 'Fetch-Decode-Execute Cycle' (උපදෙස් ලබා ගැනීම - විකේතනය කිරීම - ක්‍රියාත්මක කිරීමේ චක්‍රය) යනු කුමක්ද?",
        options: [
            "CPU මගින් උපදෙස් ක්‍රියාත්මක කරන මූලික ක්‍රියාවලිය.",
            "CPU මගින් දත්ත ගබඩා කරන ක්‍රියාවලිය.",
            "CPU මගින් දත්ත ආදානය කරන ක්‍රියාවලිය.",
            "CPU මගින් දත්ත ප්‍රතිදානය කරන ක්‍රියාවලිය.",
            "CPU මගින් බලය කළමනාකරණය කරන ක්‍රියාවලිය."
        ],
        correctAnswerIndex: 0,
        explanation: "Fetch-Decode-Execute Cycle යනු CPU මගින් පරිගණක වැඩසටහන්වල උපදෙස් ක්‍රියාත්මක කරන මූලික හා පුනරාවර්තන ක්‍රියාවලියයි. 'Fetch' යනු මතකයෙන් උපදෙසක් ලබා ගැනීමයි. 'Decode' යනු උපදෙස කුමක්දැයි තේරුම් ගැනීමයි. 'Execute' යනු උපදෙස මගින් නියම කරන ලද ක්‍රියාවලිය සිදු කිරීමයි. මෙම චක්‍රය CPU හි Control Unit සහ ALU මගින් කළමනාකරණය වේ."
    },
    {
        questionText: "Half Adder පරිපථය ක්‍රියාත්මක කිරීමට අවශ්‍ය අවම තාර්කික ද්වාර මොනවාද?",
        options: [
            "එක් XOR ද්වාරයක් සහ එක් AND ද්වාරයක්.",
            "එක් OR ද්වාරයක් සහ එක් NOT ද්වාරයක්.",
            "එක් NAND ද්වාරයක් පමණි.",
            "එක් NOR ද්වාරයක් පමණි.",
            "එක් XNOR ද්වාරයක් පමණි."
        ],
        correctAnswerIndex: 0,
        explanation: "Half Adder පරිපථයක් Sum ප්‍රතිදානය සඳහා XOR ද්වාරයක්ද, Carry ප්‍රතිදානය සඳහා AND ද්වාරයක්ද භාවිතා කරයි. එබැවින්, එය ක්‍රියාත්මක කිරීමට අවශ්‍ය වන්නේ එක් XOR ද්වාරයක් සහ එක් AND ද්වාරයක් පමණි."
    },
    {
        questionText: "Full Adder පරිපථය ක්‍රියාත්මක කිරීමට අවශ්‍ය මූලික ද්වාර (AND, OR, XOR) සංයෝජනයක් කුමක්ද?",
        options: [
            "දෙක XOR, දෙක AND, එක OR.",
            "එක XOR, එක AND, එක OR.",
            "තුන XOR, තුන AND, දෙක OR.",
            "දෙක XOR, එක AND, එක OR.",
            "එක XOR, දෙක AND, එක OR."
        ],
        correctAnswerIndex: 0,
        explanation: "Full Adder එකක් මූලික ද්වාර වලින් තැනීමේදී, Sum ප්‍රතිදානය සඳහා XOR ද්වාර දෙකක් සහ Carry Out ප්‍රතිදානය සඳහා AND ද්වාර දෙකක් සහ OR ද්වාරයක් අවශ්‍ය වේ."
    },
    {
        questionText: "පරිගණකයක 'Main Memory' (ප්‍රධාන මතකය) යනු කුමක්ද?",
        options: [
            "CPU මගින් සෘජුවම ප්‍රවේශ විය හැකි, ක්‍රියාත්මක වන වැඩසටහන් සහ දත්ත ගබඩා කරන මතකය.",
            "පරිගණකයේ ස්ථිරව දත්ත ගබඩා කරන මතකය (Hard Drive).",
            "CPU තුළ ඇති ඉතා වේගවත් මතකය (Registers).",
            "පරිගණකයේ ක්‍රියාත්මක වන යෙදුම් ගබඩා කරන මතකය (ROM).",
            "අන්තර්ජාලයෙන් දත්ත බාගත කරන මතකය."
        ],
        correctAnswerIndex: 0,
        explanation: "Main Memory, හෝ RAM (Random Access Memory), යනු පරිගණකයක CPU මගින් සෘජුවම ප්‍රවේශ විය හැකි, දැනට ක්‍රියාත්මක වෙමින් පවතින වැඩසටහන් (operating system ඇතුළුව) සහ දත්ත ගබඩා කරන මතකයයි. එය තාවකාලික මතකයක් වන අතර, බලය විසන්ධි කළ විට එහි අන්තර්ගතය නැති වී යයි."
    },
    {
        questionText: "Flip-Flop එකක් තනි බිට් එකක් ගබඩා කරන බැවින්, බහු බිට් දත්ත ගබඩා කිරීම සඳහා කුමක් භාවිතා කළ යුතුද?",
        options: [
            "Flip-Flops කිහිපයක් එකට සම්බන්ධ කිරීමෙන් සෑදූ රෙජිස්ටරයක්.",
            "තනි Flip-Flop එකක ධාරිතාව වැඩි කිරීම.",
            "Flip-Flop එකක ප්‍රවේශ කාලය අඩු කිරීම.",
            "Flip-Flop එකක බලශක්ති පරිභෝජනය අඩු කිරීම.",
            "Flip-Flop එකක භෞතික ප්‍රමාණය අඩු කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Flip-Flop එකකට ගබඩා කළ හැක්කේ එක් ද්විමය බිට් එකක් පමණි. 4-bit, 8-bit, 16-bit වැනි බහු බිට් දත්ත වචන ගබඩා කිරීම සඳහා Flip-Flops කිහිපයක් එකට සම්බන්ධ කර 'රෙජිස්ටර' (Registers) නිර්මාණය කරනු ලැබේ. උදාහරණයක් ලෙස, 8-bit රෙජිස්ටරයක් 8 D-Flip-Flops වලින් සමන්විත විය හැක."
    },
    {
        questionText: "CPU හි 'Program Counter' (වැඩසටහන් කවුන්ටරය) ෆ්ලිප්-ෆ්ලොප් (Flip-Flops) භාවිතයෙන් ගොඩනගා ඇත්තේ ඇයි?",
        options: [
            "ක්‍රියාත්මක කළ යුතු ඊළඟ උපදෙසෙහි ලිපිනය 'මතක තබා ගැනීමට' සහ පසුව යාවත්කාලීන කිරීමට ඇති හැකියාව නිසා.",
            "එය ගණිතමය මෙහෙයුම් සිදු කරන බැවිනි.",
            "එය දත්ත සංසන්දනය කරන බැවිනි.",
            "එය බලශක්තිය පාලනය කරන බැවිනි.",
            "එය භෞතික ප්‍රමාණය අඩු කරන බැවිනි."
        ],
        correctAnswerIndex: 0,
        explanation: "Program Counter යනු ඊළඟට ක්‍රියාත්මක විය යුතු උපදෙසේ මතක ලිපිනය ගබඩා කරන රෙජිස්ටරයකි. Flip-Flops යනු තොරතුරු ගබඩා කළ හැකි මූලික මතක ඒකක වන බැවින්, ඒවා Program Counter වැනි රෙජිස්ටර තැනීම සඳහා අත්‍යවශ්‍ය වේ. Program Counter හි අන්තර්ගතය වැඩසටහන් ප්‍රවාහය අනුව යාවත්කාලීන වේ (එනම් increments හෝ jumps)."
    },
    {
        questionText: "අංකිත පරිපථ තුළ 'Decade Counter' (දශක කවුන්ටරය) යනු කුමක්ද?",
        options: [
            "0 සිට 9 දක්වා ගණන් කරන කවුන්ටරයකි.",
            "0 සිට 10 දක්වා ගණන් කරන කවුන්ටරයකි.",
            "0 සිට 15 දක්වා ගණන් කරන කවුන්ටරයකි.",
            "0 සිට 7 දක්වා ගණන් කරන කවුන්ටරයකි.",
            "0 සිට 1 දක්වා ගණන් කරන කවුන්ටරයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "Decade Counter (හෝ BCD Counter) යනු 0 සිට 9 දක්වා ගණන් කරන කවුන්ටරයකි. එය 10 වැනි ස්පන්දනයේදී නැවත 0 වෙත යළි පිහිටුවනු ලැබේ. මේවා ඩිජිටල් ඔරලෝසු සහ සංදර්ශක පද්ධති වැනි දශම ගණන් කිරීම අවශ්‍ය වන යෙදීම් වලදී භාවිතා වේ."
    },
    {
        questionText: "අංකිත පරිපථයක 'Combinational Logic Circuit' සහ 'Sequential Logic Circuit' අතර ඇති ප්‍රධාන වෙනස කුමක්ද?",
        options: [
            "Combinational පරිපථවලට මතකයක් නොමැති අතර, Sequential පරිපථවලට මතකයක් ඇත.",
            "Combinational පරිපථවලට මතකයක් ඇති අතර, Sequential පරිපථවලට මතකයක් නොමැත.",
            "Combinational පරිපථ වේගවත් වන අතර, Sequential පරිපථ මන්දගාමී වේ.",
            "Combinational පරිපථවලට වඩා Sequential පරිපථවලට අඩු බලයක් අවශ්‍ය වේ.",
            "Combinational පරිපථ සරල වන අතර, Sequential පරිපථ සංකීර්ණ වේ."
        ],
        correctAnswerIndex: 0,
        explanation: "Combinational Logic Circuits (ඒකාබද්ධ තාර්කික පරිපථ) එහි වත්මන් ආදාන මත පමණක් රඳා පවතින අතර, පෙර ආදානවල බලපෑමක් නොමැත. Sequential Logic Circuits (අනුක්‍රමික තාර්කික පරිපථ) එහි වත්මන් ආදාන මත මෙන්ම මතකයේ ගබඩා කර ඇති පෙර තත්වයන් මතද රඳා පවතින අතර, මේවාට තොරතුරු ගබඩා කිරීමේ හැකියාව (Flip-Flops මගින්) ඇත. මෙය ප්‍රධාන වෙනසයි."
    },
    {
        questionText: "CPU හි 'Control Unit' (පාලන ඒකකය) හි ක්‍රියාකාරීත්වය සඳහා Flip-Flops දායක වන්නේ කෙසේද?",
        options: [
            "විවිධ පාලන සංඥා සහ තත්වයන් තාවකාලිකව ගබඩා කිරීම සඳහා.",
            "ගණිතමය මෙහෙයුම් සිදු කිරීම සඳහා.",
            "දත්ත සම්ප්‍රේෂණය කිරීම සඳහා.",
            "දත්ත විකේතනය කිරීම සඳහා.",
            "පරිපථයේ බලශක්ති පරිභෝජනය පාලනය කිරීම සඳහා."
        ],
        correctAnswerIndex: 0,
        explanation: "Control Unit යනු CPU හි 'මොළය' බඳුය. එයට උපදෙස් ක්‍රියාත්මක කිරීම සඳහා විවිධ පාලන සංඥා සහ අභ්‍යන්තර තත්වයන් 'මතක තබා ගැනීමට' අවශ්‍ය වේ. Flip-Flops මේ සඳහා අත්‍යවශ්‍ය වන අතර, පාලන ඒකකය තුළ ඇති State Registers සහ Control Registers වැනි මතක මූලද්‍රව්‍ය Flip-Flops භාවිතයෙන් ගොඩනගා ඇත."
    },
    {
        questionText: "CPU එකක 'Clock Speed' (Clock වේගය) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "CPU එක තත්පරයකට ක්‍රියාත්මක කළ හැකි චක්‍ර (cycles) සංඛ්‍යාව (Hertz වලින් මනිනු ලැබේ).",
            "CPU එක තත්පරයකට සැකසිය හැකි උපදෙස් ගණන.",
            "CPU එකේ බලශක්ති පරිභෝජනය.",
            "CPU එකේ භෞතික ප්‍රමාණය.",
            "CPU එකේ මතක ධාරිතාව."
        ],
        correctAnswerIndex: 0,
        explanation: "CPU එකක Clock Speed (හෝ Clock Rate) යනු CPU එක තත්පරයකට ක්‍රියාත්මක කළ හැකි චක්‍ර (cycles) ගණනයි. එය Hertz (Hz) වලින් මනිනු ලැබේ (MHz හෝ GHz). ඉහළ Clock Speed එකක් යනු CPU එකට වේගයෙන් උපදෙස් ක්‍රියාත්මක කළ හැකි බවයි, එමගින් සමස්ත පරිගණකයේ කාර්ය සාධනය වැඩි දියුණු වේ. Flip-Flops වැනි සමමුහුර්ත පරිපථ Clock සංඥාවට අනුව ක්‍රියා කරයි."
    },
    {
        questionText: "අංකිත පරිපථ නිර්මාණයේදී 'Hardware Description Language (HDL)' (දෘඪාංග විස්තර කිරීමේ භාෂා) වල කාර්යභාරය කුමක්ද?",
        options: [
            "අංකිත පරිපථවල හැසිරීම සහ ව්‍යුහය විස්තර කිරීමට භාවිතා කරන විශේෂිත වැඩසටහන්කරණ භාෂා.",
            "පරිගණක වැඩසටහන් ලිවීම සඳහා භාවිතා කරන භාෂා.",
            "දත්ත සමුදා කළමනාකරණය සඳහා භාවිතා කරන භාෂා.",
            "පරිශීලක අතුරුමුහුණත් නිර්මාණය කිරීම සඳහා භාවිතා කරන භාෂා.",
            "ජාලකරණය සඳහා භාවිතා කරන භාෂා."
        ],
        correctAnswerIndex: 0,
        explanation: "VHDL (Very High Speed Integrated Circuit Hardware Description Language) සහ Verilog වැනි Hardware Description Languages (HDLs) යනු අංකිත පරිපථවල හැසිරීම (behavior) සහ ව්‍යුහය (structure) විස්තර කිරීමට භාවිතා කරන විශේෂිත වැඩසටහන්කරණ භාෂා වේ. මෙම භාෂා භාවිතයෙන් ඉංජිනේරුවන්ට සංකීර්ණ පරිපථ සැලසුම් කර, අනුකරණය කර, අවසානයේදී භෞතික දෘඪාංග ලෙස සංස්ලේෂණය කළ හැක. මේවා අංකිත පරිපථ සැලසුම්කරණයේදී අත්‍යවශ්‍ය මෙවලම් වේ."
    },
    {
        questionText: "පරිපථයක් තුළ Flip-Flops භාවිතයෙන් 'Frequency Division' (සංඛ්‍යාත බෙදීම) සිදු කරන්නේ කෙසේද?",
        options: [
            "Flip-Flop එකක ප්‍රතිදානය එහි ආදානයට සම්බන්ධ කර Clock සංඥාවේ සංඛ්‍යාතය 2 න් බෙදීම මගින්.",
            "Flip-Flop එකක ආදානයට වෙනස් සංඛ්‍යාතයක් යැවීමෙන්.",
            "Flip-Flop එකක ප්‍රතිදානය වේගවත් කිරීමෙන්.",
            "Flip-Flop එකක බලශක්ති පරිභෝජනය වැඩි කිරීමෙන්.",
            "Flip-Flop එකක භෞතික ප්‍රමාණය අඩු කිරීමෙන්."
        ],
        correctAnswerIndex: 0,
        explanation: "T Flip-Flop (Toggle Flip-Flop) එකක් Clock සංඥාවේ සංඛ්‍යාතය 2 න් බෙදීමට (divide-by-2) භාවිතා කළ හැක. T ආදානය සැමවිටම 1 ලෙස තබා, Clock සංඥාව Flip-Flop එකට ලබා දෙන විට, එහි ප්‍රතිදානය Clock සංඥාවේ සංඛ්‍යාතයෙන් අඩකට Toggle වේ. Flip-Flops කිහිපයක් ශ්‍රේණිගතව සම්බන්ධ කිරීමෙන් ඊටත් වඩා විශාල සංඛ්‍යාත බෙදීම් (උදා: divide-by-4, divide-by-8) ලබා ගත හැක."
    },
    {
        questionText: "පරිගණකයක 'Pipe-lining' (පයිප්-ලයිනිං) සංකල්පය CPU කාර්ය සාධනයට බලපාන්නේ කෙසේද?",
        options: [
            "එකවර උපදෙස් කිහිපයක් ක්‍රියාත්මක කිරීමෙන් CPU හි කාර්යක්ෂමතාව සහ throughput වැඩි කිරීම.",
            "CPU හි බලශක්ති පරිභෝජනය අඩු කිරීම.",
            "CPU හි භෞතික ප්‍රමාණය අඩු කිරීම.",
            "CPU හි මතක ධාරිතාව වැඩි කිරීම.",
            "CPU හි දෝෂ නිවැරදි කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Pipe-lining (නල මාර්ගගත කිරීම) යනු CPU කාර්ය සාධනය වැඩි දියුණු කිරීම සඳහා භාවිතා කරන තාක්ෂණයකි. එය මගින් උපදෙසක් ක්‍රියාත්මක කිරීමේ ක්‍රියාවලිය කුඩා අදියර කිහිපයකට (උදා: fetch, decode, execute, write-back) බෙදා, එම අදියර එකවරම විවිධ උපදෙස් සඳහා සමාන්තරව ක්‍රියාත්මක කිරීමට ඉඩ සලසයි. මෙය මගින් CPU එකවර ක්‍රියාත්මක කළ හැකි උපදෙස් ගණන වැඩි කරන අතර, සමස්ත throughput වැඩි දියුණු කරයි. Sequential Logic Circuits මෙහිදී වැදගත් වේ."
    },
    {
        questionText: "Sequential logic circuits වල 'Race Condition' (තරඟකාරී තත්වය) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "සංඥා දෙකක් එකවරම Flip-Flop එකක ආදාන වෙත පැමිණෙන විට, ප්‍රතිදානය අවිනිශ්චිත වන තත්වය.",
            "සංඥා දෙකක් එකිනෙකා සමඟ තරඟ කරන තත්වය.",
            "Flip-Flop එකක් වේගයෙන් ක්‍රියාත්මක වන තත්වය.",
            "Flip-Flop එකක් මන්දගාමීව ක්‍රියාත්මක වන තත්වය.",
            "Flip-Flop එකක් බලය වැඩිපුර පරිභෝජනය කරන තත්වය."
        ],
        correctAnswerIndex: 0,
        explanation: "Race Condition යනු අනුක්‍රමික පරිපථයක, ආදාන සංඥා දෙකක් හෝ වැඩි ගණනක් එකවරම පාහේ වෙනස් වන විට, Flip-Flop හි අවසන් තත්වය එම සංඥාවල සාපේක්ෂ ප්‍රමාදයන් (propagation delays) මත රඳා පවතින තත්වයකි. මෙහි ප්‍රතිඵලයක් ලෙස, පරිපථයේ හැසිරීම අනපේක්ෂිත හෝ අවිනිශ්චිත විය හැකි අතර, මෙය සැලසුම් කිරීමේදී වැළැක්විය යුතුය."
    },
    {
        questionText: "අංකිත පරිපථ තුළ 'Glitches' (ග්ලිච්) යනු කුමක්ද?",
        options: [
            "පරිපථයේ ප්‍රතිදානයේ ඇති කෙටි, අනවශ්‍ය ස්පන්දන (pulses).",
            "පරිපථයේ ප්‍රතිදානයේ ඇති ස්ථාවර, නිවැරදි සංඥා.",
            "පරිපථයේ ආදාන සංඥාවල වෙනස්වීම්.",
            "පරිපථයේ බලශක්ති පරිභෝජනයේ වෙනස්වීම්.",
            "පරිපථයේ භෞතික හානි."
        ],
        correctAnswerIndex: 0,
        explanation: "Glitches යනු අංකිත පරිපථයක ප්‍රතිදානයේ ඇති ඉතා කෙටි, අනවශ්‍ය ස්පන්දන (pulses) වේ. මේවා සාමාන්‍යයෙන් සිදුවන්නේ පරිපථයේ විවිධ මාර්ගවල ඇති ප්‍රචාරණ ප්‍රමාදයන්හි වෙනස්කම් හේතුවෙන් ආදාන වෙනස්වන විට ප්‍රතිදානය තාවකාලිකව වැරදි අගයක් ගන්නා විටය. Glitches අනුක්‍රමික පරිපථවලදී ගැටලු ඇති කළ හැකි බැවින් ඒවා අවම කිරීම වැදගත් වේ."
    },
    {
        questionText: "CPU හි 'System Clock' (පද්ධති ඔරලෝසුව) හි කාර්යය කුමක්ද?",
        options: [
            "CPU සහ පරිගණකයේ අනෙකුත් සංරචකවල ක්‍රියාකාරීත්වයන් සමමුහුර්ත කිරීමට ස්පන්දන (pulses) ජනනය කිරීම.",
            "පරිගණකයේ කාලය පෙන්වීම.",
            "CPU හි උෂ්ණත්වය පාලනය කිරීම.",
            "CPU හි බලශක්ති පරිභෝජනය පාලනය කිරීම.",
            "CPU හි දත්ත ගබඩා කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "System Clock යනු CPU සහ පරිගණකයේ අනෙකුත් සංරචකවල ක්‍රියාකාරීත්වයන් සමමුහුර්ත කිරීම සඳහා නිරන්තරයෙන් ස්පන්දන (pulses) ජනනය කරන පරිපථයකි. මෙම ස්පන්දන CPU හි සෑම මෙහෙයුමක්ම පාහේ සිදු වන වේලාව තීරණය කරන අතර, සමස්ත පරිගණකයේ ක්‍රියාකාරීත්වය රඳා පවතින්නේ මෙම Clock සංඥාවේ වේගය මතය."
    },
    {
        questionText: "අංකිත පරිපථයක 'Combinational Adder' එකක ප්‍රතිදානය තීරණය වන්නේ කුමක් මතද?",
        options: [
            "එහි වත්මන් ආදාන බිට් මත පමණි.",
            "එහි පෙර ආදාන බිට් මත පමණි.",
            "එහි මතකයේ ගබඩා කර ඇති දත්ත මත පමණි.",
            "එහි බල සැපයුමේ අගය මත පමණි.",
            "එහි භෞතික ප්‍රමාණය මත පමණි."
        ],
        correctAnswerIndex: 0,
        explanation: "Combinational Adder (උදා: Half Adder, Full Adder) යනු එහි ප්‍රතිදානය (Sum සහ Carry Out) එහි වත්මන් ආදාන බිට් අගයන් මත පමණක් රඳා පවතින පරිපථයකි. එයට මතකයක් නොමැති අතර, පෙර එකතු කිරීම්වල බලපෑමක් නොමැත."
    },
    {
        questionText: "පරිගණකයක 'Registers' හි මූලික වැදගත්කම කුමක්ද?",
        options: [
            "CPU හට ක්ෂණිකව ප්‍රවේශ විය හැකි දත්ත සහ උපදෙස් ගබඩා කිරීමෙන් ක්‍රියාත්මක වීමේ වේගය වැඩි කිරීම.",
            "විශාල දත්ත ප්‍රමාණයක් ස්ථිරව ගබඩා කිරීම.",
            "පරිගණකයේ භෞතික ප්‍රමාණය අඩු කිරීම.",
            "පරිගණකයේ බලශක්ති පරිභෝජනය අඩු කිරීම.",
            "පරිගණකයේ ග්‍රැෆික් කාර්ය සාධනය වැඩි කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Registers යනු CPU තුළ ඇති ඉතා වේගවත්, කුඩා මතක ඒකක වේ. CPU හට වැඩසටහන් ක්‍රියාත්මක කිරීමේදී දත්ත සහ උපදෙස් ඉතා වේගයෙන් කියවීමට සහ ලිවීමට අවශ්‍ය වේ. Registers මගින් මෙම දත්ත ක්ෂණිකව ලබා ගත හැකි බැවින්, සමස්ත CPU ක්‍රියාත්මක වීමේ වේගය සැලකිය යුතු ලෙස වැඩි දියුණු වේ."
    },
    {
        questionText: "පරිපථයක Half Adder එකක Sum ප්‍රතිදානය 1 වන්නේ කවදාද?",
        options: [
            "ආදාන දෙක එකිනෙකට වෙනස් වූ විට (එනම් 0,1 හෝ 1,0).",
            "ආදාන දෙකම 0 වූ විට.",
            "ආදාන දෙකම 1 වූ විට.",
            "ආදාන එකක් පමණක් 0 වූ විට.",
            "ආදාන එකක් පමණක් 1 වූ විට."
        ],
        correctAnswerIndex: 0,
        explanation: "Half Adder හි Sum ප්‍රතිදානය XOR මෙහෙයුමෙන් ලබා ගන්නා බැවින්, එය 1 වන්නේ ආදාන දෙකම 0,1 හෝ 1,0 වන විට පමණි. 0+1=1 සහ 1+0=1."
    },
    {
        questionText: "පරිපථයක Half Adder එකක Carry ප්‍රතිදානය 1 වන්නේ කවදාද?",
        options: [
            "ආදාන දෙකම 1 වූ විට.",
            "ආදාන දෙක එකිනෙකට වෙනස් වූ විට (එනම් 0,1 හෝ 1,0).",
            "ආදාන දෙකම 0 වූ විට.",
            "ආදාන එකක් පමණක් 0 වූ විට.",
            "ආදාන එකක් පමණක් 1 වූ විට."
        ],
        correctAnswerIndex: 0,
        explanation: "Half Adder හි Carry ප්‍රතිදානය AND මෙහෙයුමෙන් ලබා ගන්නා බැවින්, එය 1 වන්නේ ආදාන දෙකම 1 වන විට පමණි. 1+1=10 වන අතර, මෙහි 1 යනු Carry වේ."
    },
    {
        questionText: "Full Adder එකක Carry Out ප්‍රතිදානය 1 වන්නේ කවදාද?",
        options: [
            "අවම වශයෙන් ආදාන දෙකක් (A, B, Carry In) 1 වූ විට.",
            "සියලුම ආදාන 0 වූ විට.",
            "සියලුම ආදාන 1 වූ විට පමණි.",
            "ආදාන එකක් පමණක් 1 වූ විට.",
            "ආදාන එකිනෙකට වෙනස් වූ විට."
        ],
        correctAnswerIndex: 0,
        explanation: "Full Adder හි Carry Out ප්‍රතිදානය 1 වන්නේ, ආදාන තුනෙන් (A, B, Carry In) අවම වශයෙන් දෙකක් 1 වූ විටය (උදා: A=1, B=1, Cin=0 හෝ A=1, B=1, Cin=1 වැනි අවස්ථා)."
    },
    {
        questionText: "D Flip-Flop එකක 'setup time' (සැකසුම් කාලය) යනු කුමක්ද?",
        options: [
            "Clock සංඥාවේ ක්‍රියාකාරී දාරය පැමිණීමට පෙර D ආදානය ස්ථාවරව පැවතිය යුතු අවම කාලය.",
            "Clock සංඥාවේ ක්‍රියාකාරී දාරය පැමිණීමෙන් පසු D ආදානය ස්ථාවරව පැවතිය යුතු අවම කාලය.",
            "Flip-Flop එකක ප්‍රතිදානය වෙනස් වීමට ගතවන කාලය.",
            "Flip-Flop එකක් බලය ලබා ගැනීමට ගතවන කාලය.",
            "Flip-Flop එකක් නිෂ්පාදනය කිරීමට ගතවන කාලය."
        ],
        correctAnswerIndex: 0,
        explanation: "Setup time යනු Flip-Flop හි නිවැරදි ක්‍රියාකාරීත්වය සඳහා අත්‍යවශ්‍ය වන කාල පරාමිතියකි. එය Clock සංඥාවේ ක්‍රියාකාරී දාරය (active edge) පැමිණීමට පෙර D ආදානයේ අගය ස්ථාවරව පැවතිය යුතු අවම කාලයයි. මෙම කාලය උල්ලංඝනය වුවහොත් Metastability තත්වය ඇති විය හැක."
    },
    {
        questionText: "D Flip-Flop එකක 'hold time' (රඳවා ගැනීමේ කාලය) යනු කුමක්ද?",
        options: [
            "Clock සංඥාවේ ක්‍රියාකාරී දාරය පැමිණීමෙන් පසු D ආදානය ස්ථාවරව පැවතිය යුතු අවම කාලය.",
            "Clock සංඥාවේ ක්‍රියාකාරී දාරය පැමිණීමට පෙර D ආදානය ස්ථාවරව පැවතිය යුතු අවම කාලය.",
            "Flip-Flop එකක ප්‍රතිදානය වෙනස් වීමට ගතවන කාලය.",
            "Flip-Flop එකක් බලය ලබා ගැනීමට ගතවන කාලය.",
            "Flip-Flop එකක් නිෂ්පාදනය කිරීමට ගතවන කාලය."
        ],
        correctAnswerIndex: 0,
        explanation: "Hold time යනු Flip-Flop හි නිවැරදි ක්‍රියාකාරීත්වය සඳහා අත්‍යවශ්‍ය වන කාල පරාමිතියකි. එය Clock සංඥාවේ ක්‍රියාකාරී දාරය (active edge) පැමිණීමෙන් පසු D ආදානයේ අගය ස්ථාවරව පැවතිය යුතු අවම කාලයයි. මෙම කාලය උල්ලංඝනය වුවහොත් Metastability තත්වය ඇති විය හැක."
    },
    {
        questionText: "Flip-Flop එකක 'Clock to Q delay' (Clock සිට Q ප්‍රමාදය) යනු කුමක්ද?",
        options: [
            "Clock සංඥාවේ ක්‍රියාකාරී දාරය සහ Q ප්‍රතිදානය වෙනස් වීම අතර ගතවන කාලය.",
            "Clock සංඥාවේ පැමිණීම සහ D ආදානය වෙනස් වීම අතර ගතවන කාලය.",
            "Flip-Flop එකක ප්‍රතිදානය ස්ථාවර වීමට ගතවන කාලය.",
            "Flip-Flop එකක් බලය ලබා ගැනීමට ගතවන කාලය.",
            "Flip-Flop එකක් නිෂ්පාදනය කිරීමට ගතවන කාලය."
        ],
        correctAnswerIndex: 0,
        explanation: "Clock to Q delay යනු Clock සංඥාවේ ක්‍රියාකාරී දාරය පැමිණි මොහොතේ සිට Flip-Flop හි Q ප්‍රතිදානය එහි නව ස්ථාවර අගයට වෙනස් වීමට ගතවන කාලයයි. මෙය Flip-Flop එකක වේගය මැනීමට භාවිතා කරන වැදගත් පිරිවිතරයකි."
    },
    {
        questionText: "පරිගණකයක 'Firmware' (ස්ථිරාංග) යනු කුමක්ද?",
        options: [
            "දෘඪාංග උපාංග පාලනය කරන, ROM වැනි ස්ථිර මතකයක ගබඩා කර ඇති වැඩසටහන්.",
            "පරිගණකයේ දෘඪ තැටියේ ස්ථාපනය කර ඇති මෘදුකාංග.",
            "RAM මතකයේ තාවකාලිකව ගබඩා කර ඇති වැඩසටහන්.",
            "පරිගණකයට දත්ත ආදානය කරන උපාංග.",
            "පරිගණකයෙන් දත්ත ප්‍රතිදානය කරන උපාංග."
        ],
        correctAnswerIndex: 0,
        explanation: "Firmware යනු දෘඪාංග උපාංගයක ක්‍රියාකාරීත්වය පාලනය කරන, ROM (Read-Only Memory) හෝ Flash Memory වැනි ස්ථිර මතකයක ගබඩා කර ඇති වැඩසටහන් සමූහයකි. පරිගණකයක BIOS/UEFI, රවුටරයක මෙහෙයුම් පද්ධතිය, හෝ මුද්‍රණ යන්ත්‍රයක අභ්‍යන්තර මෘදුකාංග මේ සඳහා උදාහරණ වේ. මේවා බොහෝ විට අනුක්‍රමික පරිපථ සහ මතක ඒකක භාවිතයෙන් නිර්මාණය වේ."
    },
    {
        questionText: "J-K Flip-Flop එකක් 'Toggle Mode' (ප්‍රතිලෝම ආකාරය) හි ක්‍රියාත්මක වන්නේ කවදාද?",
        options: [
            "J = 1 සහ K = 1 වන විට.",
            "J = 0 සහ K = 0 වන විට.",
            "J = 1 සහ K = 0 වන විට.",
            "J = 0 සහ K = 1 වන විට.",
            "T ආදානය 0 වන විට."
        ],
        correctAnswerIndex: 0,
        explanation: "J-K Flip-Flop එකක J = 1 සහ K = 1 වන විට, Clock සංඥාවේ ක්‍රියාකාරී දාරයේදී Flip-Flop හි පෙර තත්වය ප්‍රතිලෝම වේ (Toggle). එනම්, පෙර 0 නම් 1 වේ, පෙර 1 නම් 0 වේ. මෙය T Flip-Flop එකක ක්‍රියාකාරීත්වයට සමාන වේ."
    },
    {
        questionText: "පරිගණකයක 'Register Transfer Language' (රෙජිස්ටර හුවමාරු භාෂාව) යනු කුමක්ද?",
        options: [
            "පරිගණකයේ දත්ත එක් රෙජිස්ටරයකින් තවත් රෙජිස්ටරයකට මාරු වන ආකාරය විස්තර කිරීමට භාවිතා කරන සංකේතාත්මක භාෂාවක්.",
            "පරිගණකයේ යන්ත්‍ර කේතය.",
            "පරිගණකයේ උසස් මට්ටමේ වැඩසටහන්කරණ භාෂාවක්.",
            "පරිගණකයේ මෙහෙයුම් පද්ධතියේ භාෂාව.",
            "පරිගණකයේ දෘඪාංග විස්තර කිරීමේ භාෂාවක්."
        ],
        correctAnswerIndex: 0,
        explanation: "Register Transfer Language (RTL) යනු පරිගණකයක දත්ත රෙජිස්ටර අතර සහ මතකය සහ රෙජිස්ටර අතර මාරු වන ආකාරය විස්තර කිරීමට භාවිතා කරන සංකේතාත්මක භාෂාවකි. මෙය CPU හි මයික්‍රෝ-ක්‍රියාකාරීත්වයන් (micro-operations) සැලසුම් කිරීමට සහ විශ්ලේෂණය කිරීමට උපකාරී වේ."
    },
    {
        questionText: "CPU හි 'Program Status Word (PSW)' රෙජිස්ටරයේ ප්‍රධාන කාර්යය කුමක්ද?",
        options: [
            "CPU හි වත්මන් තත්වය (flags) සහ පාලන තොරතුරු ගබඩා කිරීම.",
            "ක්‍රියාත්මක කළ යුතු ඊළඟ උපදෙසෙහි ලිපිනය ගබඩා කිරීම.",
            "ගණිතමය මෙහෙයුම්වල ප්‍රතිඵල ගබඩා කිරීම.",
            "දත්ත ලිපිනයන් ගබඩා කිරීම.",
            "උපදෙස් ගබඩා කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Program Status Word (PSW) යනු CPU හි විශේෂ රෙජිස්ටරයකි. එය CPU හි වත්මන් තත්වය පිළිබඳ තොරතුරු (උදා: Carry flag, Zero flag, Overflow flag) සහ පාලන තොරතුරු (උදා: interrupt enable/disable) ගබඩා කරයි. මෙම flags ගණිතමය හා තාර්කික මෙහෙයුම්වල ප්‍රතිඵල පෙන්නුම් කරන අතර, වැඩසටහන් ප්‍රවාහය පාලනය කිරීමට උපකාරී වේ."
    },
    {
        questionText: "Half Adder හි Sum ප්‍රතිදානය සඳහා සත්‍යතා වගුවේ ද්විමය අගයන් මොනවාද? (ආදාන A, B)",
        options: [
            "0, 1, 1, 0",
            "0, 0, 0, 1",
            "1, 0, 0, 0",
            "1, 1, 1, 0",
            "0, 1, 0, 1"
        ],
        correctAnswerIndex: 0,
        explanation: "Half Adder හි Sum ප්‍රතිදානය (A $\oplus$ B) සඳහා සත්‍යතා වගුව මෙසේය: A=0, B=0 -> Sum=0; A=0, B=1 -> Sum=1; A=1, B=0 -> Sum=1; A=1, B=1 -> Sum=0. එබැවින් අනුපිළිවෙල 0, 1, 1, 0."
    },
    {
        questionText: "Half Adder හි Carry ප්‍රතිදානය සඳහා සත්‍යතා වගුවේ ද්විමය අගයන් මොනවාද? (ආදාන A, B)",
        options: [
            "0, 0, 0, 1",
            "0, 1, 1, 0",
            "1, 0, 0, 0",
            "1, 1, 1, 0",
            "0, 1, 0, 1"
        ],
        correctAnswerIndex: 0,
        explanation: "Half Adder හි Carry ප්‍රතිදානය (A $\cdot$ B) සඳහා සත්‍යතා වගුව මෙසේය: A=0, B=0 -> Carry=0; A=0, B=1 -> Carry=0; A=1, B=0 -> Carry=0; A=1, B=1 -> Carry=1. එබැවින් අනුපිළිවෙල 0, 0, 0, 1."
    },
    {
        questionText: "Full Adder හි Sum ප්‍රතිදානය සඳහා සත්‍යතා වගුවේ ද්විමය අගයන් මොනවාද? (ආදාන A, B, Cin)",
        options: [
            "0, 1, 1, 0, 1, 0, 0, 1",
            "0, 0, 0, 1, 0, 1, 1, 1",
            "1, 1, 1, 1, 0, 0, 0, 0",
            "0, 1, 0, 1, 0, 1, 0, 1",
            "1, 0, 1, 0, 1, 0, 1, 0"
        ],
        correctAnswerIndex: 0,
        explanation: "Full Adder හි Sum ප්‍රතිදානය ($(A \oplus B) \oplus Cin$) සඳහා සත්‍යතා වගුව මෙසේය (පිළිවෙලින් A, B, Cin: 000, 001, 010, 011, 100, 101, 110, 111): Sum = 0, 1, 1, 0, 1, 0, 0, 1. එබැවින් අනුපිළිවෙල 0, 1, 1, 0, 1, 0, 0, 1."
    },
    {
        questionText: "Full Adder හි Carry Out ප්‍රතිදානය සඳහා සත්‍යතා වගුවේ ද්විමය අගයන් මොනවාද? (ආදාන A, B, Cin)",
        options: [
            "0, 0, 0, 1, 0, 1, 1, 1",
            "0, 1, 1, 0, 1, 0, 0, 1",
            "1, 1, 1, 1, 0, 0, 0, 0",
            "0, 1, 0, 1, 0, 1, 0, 1",
            "1, 0, 1, 0, 1, 0, 1, 0"
        ],
        correctAnswerIndex: 0,
        explanation: "Full Adder හි Carry Out ප්‍රතිදානය ($(A \cdot B) + (Cin \cdot (A \oplus B))$) සඳහා සත්‍යතා වගුව මෙසේය (පිළිවෙලින් A, B, Cin: 000, 001, 010, 011, 100, 101, 110, 111): Carry Out = 0, 0, 0, 1, 0, 1, 1, 1. එබැවින් අනුපිළිවෙල 0, 0, 0, 1, 0, 1, 1, 1."
    },
    {
        questionText: "SR Flip-Flop එකක් NAND ද්වාර භාවිතයෙන් තැනීමේදී, Q සහ Q' ප්‍රතිදාන දෙකම 1 වන 'අවසර නැති' තත්වය වළක්වා ගන්නේ කෙසේද?",
        options: [
            "S සහ R ආදාන දෙකම එකවර 1 නොදීමෙන්.",
            "Clock සංඥාව භාවිතා කිරීමෙන්.",
            "T Flip-Flop එකක් භාවිතා කිරීමෙන්.",
            "D Flip-Flop එකක් භාවිතා කිරීමෙන්.",
            "J-K Flip-Flop එකක් භාවිතා කිරීමෙන්."
        ],
        correctAnswerIndex: 0,
        explanation: "NAND ද්වාර භාවිතයෙන් තැනූ SR Flip-Flop එකක S සහ R ආදාන දෙකම එකවර 0 වූ විට (එනම් NOT S සහ NOT R දෙකම 1 වූ විට) Q සහ Q' ප්‍රතිදාන දෙකම 1 වන 'අවසර නැති' තත්වය ඇති වේ. මෙම තත්වය වළක්වා ගැනීම සඳහා, ප්‍රායෝගිකව S සහ R ආදාන දෙකම එකවරම ක්‍රියාත්මක නොවන පරිදි පරිපථය සැලසුම් කළ යුතුය."
    },
    {
        questionText: "මධ්‍ය සැකසුම් ඒකකයේදී (CPU) Registers වල ඇති ප්‍රධාන වාසිය කුමක්ද?",
        options: [
            "අධි වේගී දත්ත ප්‍රවේශය.",
            "විශාල දත්ත ගබඩා කිරීමේ හැකියාව.",
            "ස්ථිර දත්ත ගබඩා කිරීමේ හැකියාව.",
            "අඩු බලශක්ති පරිභෝජනය.",
            "අඩු නිෂ්පාදන පිරිවැය."
        ],
        correctAnswerIndex: 0,
        explanation: "CPU Registers වල ප්‍රධාන වාසිය වන්නේ ඒවාට ඉතා වේගයෙන් දත්ත ප්‍රවේශ විය හැකි වීමයි. මේවා CPU හි මධ්‍යයේම පිහිටා ඇති අතර, Microprocessor හි ක්‍රියාකාරීත්වයට අවශ්‍ය දත්ත ක්ෂණිකව සපයයි, එමගින් සමස්ත සැකසුම් වේගය ඉහළ නංවයි."
    },
    {
        questionText: "පරිගණකයක 'ප්‍රොසෙසර බිට් පළල' (e.g., 32-bit vs. 64-bit) වැඩිවීමෙන් සිදුවන ප්‍රධාන වාසිය කුමක්ද?",
        options: [
            "එකවර සැකසිය හැකි දත්ත ප්‍රමාණය සහ ප්‍රවේශ විය හැකි මතක ප්‍රමාණය වැඩි වීම.",
            "ප්‍රොසෙසරයේ භෞතික ප්‍රමාණය අඩු වීම.",
            "ප්‍රොසෙසරයේ බලශක්ති පරිභෝජනය අඩු වීම.",
            "ප්‍රොසෙසරයේ නිෂ්පාදන පිරිවැය අඩු වීම.",
            "ප්‍රොසෙසරයේ සිසිලන අවශ්‍යතා අඩු වීම."
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රොසෙසරයේ බිට් පළල වැඩිවීමෙන් එයට එකවර සැකසිය හැකි දත්ත ප්‍රමාණය වැඩි වේ (උදා: 32-bit සිට 64-bit). මෙයට අමතරව, 64-bit ප්‍රොසෙසරයකට විශාල මතක ප්‍රමාණයක් (4GB ට වඩා වැඩි) සෘජුවම ප්‍රවේශ විය හැකි අතර, එය ඉහළ කාර්ය සාධනයක් අවශ්‍ය වන යෙදුම් (ග්‍රැෆික්, දත්ත සැකසීම) සඳහා වැදගත් වේ."
    },
    {
        questionText: "J-K Flip-Flop එකක් Clocked SR Flip-Flop එකට වඩා ප්‍රයෝජනවත් වන්නේ ඇයි?",
        options: [
            "එහි 'අවසර නැති' තත්වය නොමැති බැවින් සහ Toggle ක්‍රියාකාරීත්වය ඇති බැවින්.",
            "එය අඩු බලයක් පරිභෝජනය කරන බැවින්.",
            "එය වඩාත් සරල වන බැවින්.",
            "එය වැඩි දත්ත ගබඩා කළ හැකි බැවින්.",
            "එය Clock සංඥාවකට සංවේදී නොවන බැවින්."
        ],
        correctAnswerIndex: 0,
        explanation: "J-K Flip-Flop එක Clocked SR Flip-Flop එකට වඩා ප්‍රයෝජනවත් වන්නේ, SR Flip-Flop හි ඇති S=1, R=1 යන 'අවසර නැති' තත්වය J-K Flip-Flop හි නොමැති බැවිනි. J-K හි J=1, K=1 වන විට පෙර තත්වය ප්‍රතිලෝම වේ (Toggle), එමගින් කවුන්ටර් වැනි පරිපථ තැනීම සඳහා වැඩි නම්‍යශීලීත්වයක් ලැබේ."
    },
    {
        questionText: "Half Adder සහ Full Adder පරිපථ වල 'Combinational' ස්වභාවය යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "ඒවායේ ප්‍රතිදානය තීරණය වන්නේ ඒවායේ වත්මන් ආදාන අගයන් මත පමණක් වන අතර, පෙර තත්වයන් මත රඳා නොපවතින බැවින්.",
            "ඒවාට මතකයක් ඇති බැවින්.",
            "ඒවා කාලයත් සමඟ වෙනස් වන බැවින්.",
            "ඒවා සංඛ්‍යා ගණන් කරන බැවින්.",
            "ඒවා දත්ත ගබඩා කරන බැවින්."
        ],
        correctAnswerIndex: 0,
        explanation: "Half Adder සහ Full Adder යනු Combinational Logic Circuits වේ. මෙයින් අදහස් වන්නේ ඒවායේ Sum සහ Carry (Carry Out) ප්‍රතිදාන තීරණය වන්නේ ඒ මොහොතේ ඇති ආදාන අගයන් (A, B, සහ Full Adder සඳහා Carry In) මත පමණක් වන බවයි. ඒවාට තොරතුරු ගබඩා කර තබා ගැනීමේ හැකියාවක් නොමැති අතර, පෙර ආදානවල බලපෑමක් නොමැත."
    },
    {
        questionText: "පරිගණකයක 'Floating Point Unit (FPU)' හි කාර්යය කුමක්ද?",
        options: [
            "දශම සංඛ්‍යා (floating-point numbers) සම්බන්ධ ගණනය කිරීම් සිදු කිරීම.",
            "පූර්ණ සංඛ්‍යා (integers) සම්බන්ධ ගණනය කිරීම් සිදු කිරීම.",
            "තාර්කික මෙහෙයුම් සිදු කිරීම.",
            "දත්ත ගබඩා කිරීම.",
            "පාලන සංඥා ජනනය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Floating Point Unit (FPU) යනු CPU හි විශේෂිත කොටසකි, නැතහොත් CPU වෙත එකතු කළ හැකි සහයෝගී ප්‍රොසෙසරයකි. එහි ප්‍රධාන කාර්යය වන්නේ දශම සංඛ්‍යා (floating-point numbers) සම්බන්ධ ගණනය කිරීම් (එකතු කිරීම, අඩු කිරීම, ගුණ කිරීම, බෙදීම) කාර්යක්ෂමව සිදු කිරීමයි. විද්‍යාත්මක ගණනය කිරීම්, ග්‍රැෆික් සැකසීම සහ ක්‍රීඩා වැනි යෙදීම් සඳහා මෙය අත්‍යවශ්‍ය වේ. FPU තුළද Half Adder සහ Full Adder වැනි ඒකක බහුලව භාවිතා වේ."
    },
    {
        questionText: "පරිගණකයක 'Interrupt Controller' (බාධා පාලකය) හි කාර්යය කුමක්ද?",
        options: [
            "පරිගණක පද්ධතියේ විවිධ උපාංගවලින් (Keyboard, Mouse, Disk Drive) ලැබෙන බාධා ඉල්ලීම් (interrupt requests) කළමනාකරණය කිරීම.",
            "පරිගණකයේ බල සැපයුම පාලනය කිරීම.",
            "පරිගණකයේ මතකයට ප්‍රවේශය පාලනය කිරීම.",
            "පරිගණකයේ දත්ත සම්ප්‍රේෂණය පාලනය කිරීම.",
            "පරිගණකයේ උෂ්ණත්වය පාලනය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Interrupt Controller යනු පරිගණක පද්ධතියේ විවිධ උපාංගවලින් (Keyboard, Mouse, Disk Drive, Network Card) ලැබෙන බාධා ඉල්ලීම් (interrupt requests) කළමනාකරණය කරන පරිපථයකි. එය බාධා ඉල්ලීම්වල ප්‍රමුඛතාවය තීරණය කර, CPU වෙත දැනුම් දෙයි, එමගින් CPU හට විවිධ කාර්යයන් අතර මාරු වීමට ඉඩ සලසයි. මෙය අනුක්‍රමික පරිපථ සහ කවුන්ටර් භාවිතයෙන් නිර්මාණය විය හැක."
    },
    {
        questionText: "Flip-Flop එකක් 'Edge-triggered' (දාරය මගින් ක්‍රියාත්මක වන) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "Flip-Flop හි තත්වය වෙනස් වන්නේ Clock සංඥාවේ Rising Edge හෝ Falling Edge යන නිශ්චිත දාරයකදී පමණක් බව.",
            "Flip-Flop හි තත්වය වෙනස් වන්නේ Clock සංඥාවේ ඉහළ මට්ටමකදී පමණක් බව.",
            "Flip-Flop හි තත්වය වෙනස් වන්නේ Clock සංඥාවේ පහළ මට්ටමකදී පමණක් බව.",
            "Flip-Flop එකක් ආදාන වෙනස් වූ වහාම ක්‍රියාත්මක වන බව.",
            "Flip-Flop එකක් බලය ලැබුණු වහාම ක්‍රියාත්මක වන බව."
        ],
        correctAnswerIndex: 0,
        explanation: "Edge-triggered Flip-Flop එකක, Flip-Flop හි තත්වය වෙනස් වීමට ආදාන සංඥාවල අගයන් පමණක් නොව, Clock සංඥාවේ නිශ්චිත 'දාරයක්' (edge) ද අවශ්‍ය වේ. මෙම දාරය Rising Edge (Clock 0 සිට 1 ට මාරු වීම) හෝ Falling Edge (Clock 1 සිට 0 ට මාරු වීම) විය හැක. මෙය අනවශ්‍ය 'Glitches' සහ Race Conditions වළක්වා ගැනීමට උපකාරී වේ."
    },
    {
        questionText: "අංකිත පරිපථයක 'Combinational Logic' සහ 'Sequential Logic' අතර වෙනස අවබෝධ කර ගැනීම වැදගත් වන්නේ ඇයි?",
        options: [
            "පරිපථයක් නිර්මාණය කිරීමේදී මතකයක් අවශ්‍යද නැද්ද යන්න තීරණය කිරීමට සහ සුදුසු ද්වාර හා මූලද්‍රව්‍ය තෝරා ගැනීමට.",
            "පරිපථයේ බලශක්ති පරිභෝජනය ගණනය කිරීමට.",
            "පරිපථයේ භෞතික ප්‍රමාණය තීරණය කිරීමට.",
            "පරිපථයේ පිරිවැය ඇස්තමේන්තු කිරීමට.",
            "පරිපථය සිසිල් කිරීමේ ක්‍රමවේද තීරණය කිරීමට."
        ],
        correctAnswerIndex: 0,
        explanation: "Combinational Logic (මතකයක් නැත) සහ Sequential Logic (මතකයක් ඇත) අතර වෙනස අවබෝධ කර ගැනීම අංකිත පරිපථ නිර්මාණයේදී අත්‍යවශ්‍ය වේ. යම් යෙදීමකට තොරතුරු ගබඩා කිරීමේ හැකියාව අවශ්‍ය නම් (උදා: කවුන්ටර, රෙජිස්ටර්), Sequential Logic පරිපථ (Flip-Flops වැනි) භාවිතා කළ යුතුය. එසේ නොමැති නම් (උදා: ගණිතමය මෙහෙයුම්), Combinational Logic පරිපථ (AND, OR, Adders) ප්‍රමාණවත් වේ. නිවැරදි පරිපථ වර්ගය තෝරා ගැනීම කාර්යක්ෂම හා ඵලදායී සැලසුමක් සඳහා ඉතා වැදගත් වේ."
    },
    {
        questionText: "CPU හි 'Data Bus' (දත්ත බසය) හි බිට් පළල (e.g., 32-bit, 64-bit) වැඩිවීමෙන් සිදුවන ප්‍රධාන වාසිය කුමක්ද?",
        options: [
            "එකවර CPU සහ අනෙකුත් සංරචක අතර හුවමාරු කළ හැකි දත්ත ප්‍රමාණය වැඩි වීම.",
            "CPU හි වේගය අඩු වීම.",
            "CPU හි බලශක්ති පරිභෝජනය වැඩි වීම.",
            "CPU හි භෞතික ප්‍රමාණය අඩු වීම.",
            "CPU හි නිෂ්පාදන පිරිවැය අඩු වීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Data Bus හි බිට් පළල වැඩිවීමෙන්, CPU සහ අනෙකුත් සංරචක (මතකය, I/O උපාංග) අතර එකවර සම්ප්‍රේෂණය කළ හැකි දත්ත ප්‍රමාණය වැඩි වේ. උදාහරණයක් ලෙස, 64-bit Data Bus එකකට 32-bit Data Bus එකකට වඩා එකවර දත්ත ප්‍රමාණයක් යැවිය හැක. මෙය දත්ත හුවමාරු වේගය වැඩි කරන අතර, සමස්ත පද්ධති කාර්ය සාධනයට දායක වේ."
    },
    {
        questionText: "පරිගණකයක 'Pipeline Hazard' (පයිප්ලයින් බාධාව) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "පයිප්-ලයිනිං ක්‍රියාවලියේදී උපදෙස් ක්‍රියාත්මක වීමට ඇතිවන ගැටලුවක්, එමගින් කාර්ය සාධනය අඩු වීම.",
            "පයිප්-ලයිනිං ක්‍රියාවලියේදී උපදෙස් වේගයෙන් ක්‍රියාත්මක වීම.",
            "පයිප්-ලයිනිං ක්‍රියාවලියේදී බලශක්ති පරිභෝජනය අඩු වීම.",
            "පයිප්-ලයිනිං ක්‍රියාවලියේදී භෞතික ප්‍රමාණය අඩු වීම.",
            "පයිප්-ලයිනිං ක්‍රියාවලියේදී දෝෂ නිවැරදි වීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Pipeline Hazard යනු CPU හි Pipe-lining ක්‍රියාවලියේදී උපදෙස් ක්‍රියාත්මක වීමට ඇතිවන ගැටලුවකි. මෙය සාමාන්‍යයෙන් දත්ත පරායත්තතා (data dependencies), පාලන පරායත්තතා (control dependencies - jumps/branches), හෝ ව්‍යුහාත්මක ගැටලු (structural hazards - සම්පත් නොමැතිකම) හේතුවෙන් ඇතිවේ. Hazards මගින් Pipe-lining හි කාර්යක්ෂමතාව අඩු කරන අතර, CPU හට උපදෙස් ක්‍රියාත්මක කිරීම ප්‍රමාද කිරීමට හෝ නැවත ආරම්භ කිරීමට සිදුවිය හැක."
    },
    {
        questionText: "පරිපථයක් නිර්මාණය කිරීමේදී සත්‍යතා වගුවක් 'අසම්පූර්ණ' (incomplete) යැයි හැඳින්වෙන්නේ කුමන අවස්ථාවේදීද?",
        options: [
            "සියලුම හැකි ආදාන සංයෝජන සඳහා ප්‍රතිදානයන් නිර්වචනය කර නොමැති විට.",
            "සත්‍යතා වගුවේ ආදාන දෙකකට වඩා අඩුවෙන් ඇති විට.",
            "සත්‍යතා වගුවේ ප්‍රතිදාන දෙකකට වඩා අඩුවෙන් ඇති විට.",
            "සත්‍යතා වගුවේ 0s පමණක් අඩංගු වන විට.",
            "සත්‍යතා වගුවේ 1s පමණක් අඩංගු වන විට."
        ],
        correctAnswerIndex: 0,
        explanation: "අසම්පූර්ණ සත්‍යතා වගුවක් යනු සියලුම හැකි ආදාන සංයෝජන සඳහා අදාළ ප්‍රතිදානයන් පැහැදිලිව නිර්වචනය කර නොමැති වගුවකි. මෙය බූලීය ප්‍රකාශනය සරල කිරීමේදී දෝෂ සහිත ප්‍රතිදාන ලබා දිය හැකි බැවින් වැදගත් වේ. සත්‍යතා වගුව සම්පූර්ණ විය යුතුය, එනම් සියලුම ආදාන සංයෝජන සඳහා ප්‍රතිදානයන් නිර්වචනය කළ යුතුය."
    }
];
