export const originalQuestions = [
    {
        questionText: "පාසල් විභාගයකදී සිසුවෙකු ලබාගත් ලකුණු '95' ලෙස සටහන් කිරීම දත්තයක් ලෙසත්, එම ලකුණු 'ඉතා ඉහළ' ලෙස අර්ථකථනය කිරීම තොරතුරක් ලෙසත් සැලකීමේදී, දත්ත සහ තොරතුරු අතර මූලික වෙනස වඩාත් නිවැරදිව නිරූපණය කරන්නේ කුමක්ද?",
        options: [
            "දත්ත යනු සැකසූ කරුණු වන අතර, තොරතුරු යනු අමු කරුණු වේ.",
            "තොරතුරු යනු දත්තවලට කිසිදු සන්දර්භයක් නොමැති විට ඇතිවන ප්‍රතිඵලයක් වන අතර, දත්ත සැකසීමෙන් තොරවම තේරුම් ගත හැක.",
            "දත්ත යනු අමු කරුණු සහ සංඛ්‍යා වන අතර, තොරතුරු යනු එම දත්ත සැකසීමෙන්, අර්ථ නිරූපණය කිරීමෙන් හෝ සංවිධානය කිරීමෙන් පසු අර්ථවත් වන දෙයකි.",
            "දත්ත සහ තොරතුරු අතර කිසිදු වෙනසක් නොමැත; ඒවා එකිනෙකට හුවමාරු කළ හැකි පද වේ.",
            "තොරතුරු සැමවිටම දත්තවලට වඩා විශාල වන අතර, දත්ත සැමවිටම සංඛ්‍යාත්මක ස්වභාවයක් ගනී."
        ],
        correctAnswerIndex: 2,
        explanation: "දත්ත යනු සැකසීමකින් තොරව පවතින අමු කරුණු සහ සංඛ්‍යා වේ. උදාහරණයක් ලෙස '95' යනු දත්තයකි. තොරතුරු යනු එම දත්ත යම් සන්දර්භයකට අනුව සකස් කිරීමෙන්, විශ්ලේෂණය කිරීමෙන් හෝ අර්ථ නිරූපණය කිරීමෙන් පසු අර්ථවත් වන දෙයකි. '95' යනු ඉතා ඉහළ ලකුණක් යැයි පැවසීමෙන් එම දත්තයට අර්ථයක් හා වටිනාකමක් එකතු වේ."
    },
    {
        questionText: "ව්‍යුහගත දත්ත (Structured data) සහ ව්‍යුහගත නොවන දත්ත (Unstructured data) අතර ඇති ප්‍රධාන වෙනස්කම කුමක්ද?",
        options: [
            "ව්‍යුහගත දත්ත ගුණාත්මක වන අතර, ව්‍යුහගත නොවන දත්ත ප්‍රමාණාත්මක වේ.",
            "ව්‍යුහගත දත්ත පහසුවෙන් සෙවීමට හා විශ්ලේෂණය කිරීමට අපහසු වන අතර, ව්‍යුහගත නොවන දත්ත පහසුවෙන් කළමනාකරණය කළ හැක.",
            "ව්‍යුහගත දත්ත නිශ්චිත, පූර්ව-නිර්වචනය කළ ආකෘතියක් අනුගමනය කරන අතර, ව්‍යුහගත නොවන දත්තවලට එවැනි ආකෘතියක් නොමැත.",
            "ව්‍යුහගත නොවන දත්ත සම්පූර්ණයෙන්ම සකස් නොකළ තොරතුරු වන අතර, ව්‍යුහගත දත්ත සැමවිටම වගු ආකාරයෙන් ගබඩා වේ.",
            "ව්‍යුහගත දත්ත ගොනු පද්ධතිවල පමණක් ගබඩා කළ හැකි අතර, ව්‍යුහගත නොවන දත්ත දත්ත සමුදායවල පමණක් ගබඩා කළ හැක."
        ],
        correctAnswerIndex: 2,
        explanation: "ව්‍යුහගත දත්ත යනු දත්ත සමුදායන්හි පවතින වගු වැනි නිශ්චිත, පූර්ව-නිර්වචනය කළ ආකෘතියක් (schema) අනුගමනය කරන දත්ත වේ. මේවා පහසුවෙන් සෙවීමට, විශ්ලේෂණය කිරීමට හා වාර්තා කිරීමට හැකියාව ඇත. ව්‍යුහගත නොවන දත්ත යනු ඊමේල්, පින්තූර, වීඩියෝ, හඬ පට සහ පෙළ ලේඛන වැනි නිශ්චිත ආකෘතියක් නොමැති දත්ත වේ."
    },
    {
        questionText: "දත්ත සමුදායක් (Database) ලෙස වඩාත් නිවැරදිව නිර්වචනය කළ හැක්කේ කුමක්ද?",
        options: [
            "එකිනෙකට සම්බන්ධ නොවන දත්ත ගොනු සමූහයක්.",
            "තොරතුරු ගබඩා කිරීම සඳහා පමණක් භාවිතා කරන තනි විශාල ලිපිගොනුවක්.",
            "තොරතුරු කාර්යක්ෂමව ගබඩා කිරීම, ප්‍රතිසාධනය කිරීම, යාවත්කාලීන කිරීම සහ කළමනාකරණය කිරීම සඳහා සංවිධානය කරන ලද, එකිනෙකට සම්බන්ධිත දත්ත එකතුවක්.",
            "පරිගණකයක ස්ථාපනය කර ඇති ඕනෑම මෘදුකාංග පැකේජයක්.",
            "අන්තර්ජාලය හරහා පමණක් ප්‍රවේශ විය හැකි දත්ත සමූහයක්."
        ],
        correctAnswerIndex: 2,
        explanation: "දත්ත සමුදායක් යනු යම් සංවිධානයක හෝ යෙදුමක අවශ්‍යතා සපුරාලීම සඳහා කාර්යක්ෂමව ගබඩා කිරීම, ප්‍රතිසාධනය කිරීම, යාවත්කාලීන කිරීම සහ කළමනාකරණය කිරීම සඳහා සංවිධානය කරන ලද, එකිනෙකට සම්බන්ධිත දත්ත එකතුවකි."
    },
    {
        questionText: "Flat File System (ඒක ගොනු පද්ධති) දත්ත සමුදා ආකෘතියක ප්‍රධාන සීමාව කුමක්ද?",
        options: [
            "සංකීර්ණ දත්ත සම්බන්ධතා නිරූපණය කිරීමට ඇති හැකියාව.",
            "දත්ත පුනරාවර්තනය (Data Redundancy) අවම කිරීම.",
            "දත්ත අඛණ්ඩතාව (Data Integrity) පහසුවෙන් පවත්වා ගැනීම.",
            "දත්ත පුනරාවර්තනයට හා දත්ත අසංගතතාවට (Data Inconsistency) ඉඩ සැලසීම.",
            "විශාල දත්ත ප්‍රමාණයක් කාර්යක්ෂමව හැසිරවීමට ඇති හැකියාව."
        ],
        correctAnswerIndex: 3,
        explanation: "Flat File System යනු දත්ත තනි වගුවක හෝ ගොනුවක ගබඩා කරන සරල ක්‍රමයකි. මෙහිදී එකම දත්ත විවිධ ස්ථානවල නැවත නැවත ගබඩා වීමේ (Data Redundancy) අවදානමක් පවතින අතර, එමගින් දත්ත අසංගතතාව (Data Inconsistency) ඇති විය හැක. උදා: එක් සිසුවෙකුගේ තොරතුරු විවිධ ගොනු වල වෙන වෙනම පවත්වාගෙන යාම."
    },
    {
        questionText: "ධූරාවලි ආකෘතිය (Hierarchical Model) දත්ත සමුදා ආකෘතියේ දත්ත සංවිධානය කරන්නේ කෙසේද?",
        options: [
            "දත්ත පේළි (rows) සහ තීරු (columns) සහිත වගු ආකාරයෙන්.",
            "සෑම child node එකකටම parent node එකකට වඩා තිබිය හැකි ජාල ව්‍යුහයක් ලෙස.",
            "දත්ත ගසක ආකාරයට, එක් මව් (parent) නෝඩයකට එක් හෝ වැඩි පුත් (child) නෝඩ තිබිය හැකි නමුත්, පුත් නෝඩයකට එක් මව් නෝඩයක් පමණක් තිබිය හැකි ලෙස.",
            "වස්තූන් (objects) සහ ඒවායේ සම්බන්ධතා (relationships) මගින්.",
            "කිසිදු නිශ්චිත ව්‍යුහයක් නොමැතිව, අහඹු ලෙස."
        ],
        correctAnswerIndex: 2,
        explanation: "ධූරාවලි ආකෘතිය දත්ත ගසක ආකාරයට සංවිධානය කරයි, එහිදී එක් මව් නෝඩයකට එක් හෝ වැඩි පුත් නෝඩ තිබිය හැකි නමුත්, පුත් නෝඩයකට ඇත්තේ එක් මව් නෝඩයක් පමණි. මෙය 'එක්-බොහෝ' (One-to-Many) සම්බන්ධතා නිරූපණය කිරීමට වඩාත් සුදුසු වේ."
    },
    {
        questionText: "ජාල ආකෘතිය (Network Model) ධූරාවලි ආකෘතියට වඩා වෙනස් වන්නේ කෙසේද?",
        options: [
            "ජාල ආකෘතියේ දත්ත වගු ආකාරයෙන් ගබඩා වන අතර, ධූරාවලි ආකෘතියේ ගසක ආකාරයෙන් ගබඩා වේ.",
            "ජාල ආකෘතියේ සෑම child node එකකටම ඇත්තේ එක් parent node එකක් පමණක් වන අතර, ධූරාවලි ආකෘතියේ child node එකකට parent node කිහිපයක් තිබිය හැක.",
            "ජාල ආකෘතියේ සෑම child node එකකටම parent node එකකට වඩා තිබිය හැකි අතර, ධූරාවලි ආකෘතියේ child node එකකට ඇත්තේ එක් parent node එකක් පමණි.",
            "ජාල ආකෘතිය දත්ත පුනරාවර්තනයට වැඩි ඉඩක් සලසන අතර, ධූරාවලි ආකෘතිය එසේ නොවේ.",
            "ජාල ආකෘතිය ධූරාවලි ආකෘතියට වඩා සරල ව්‍යුහයක් භාවිතා කරයි."
        ],
        correctAnswerIndex: 2,
        explanation: "ධූරාවලි ආකෘතියේදී සෑම child node එකකටම ඇත්තේ එක් parent node එකක් පමණි. නමුත් ජාල ආකෘතියේදී සෑම child node එකකටම parent node එකකට වඩා තිබිය හැක. මෙය 'බොහෝ-බොහෝ' (Many-to-Many) සම්බන්ධතා නිරූපණය කිරීමට ඉඩ සලසයි, එය ධූරාවලි ආකෘතියේ සීමාවකි."
    },
    {
        questionText: "සම්බන්ධක ආකෘතිය (Relational Model) අද වන විට බහුලවම භාවිතා වන දත්ත සමුදා ආකෘතිය වීමට ප්‍රධාන හේතුව කුමක්ද?",
        options: [
            "දත්ත වගු ආකාරයෙන් ගබඩා නොකිරීම.",
            "සංකීර්ණ විමසුම් (complex queries) හැසිරවීමට ඇති සීමිත හැකියාව.",
            "දත්ත පුනරාවර්තනයට වැඩි ඉඩක් ලබා දීම.",
            "දත්ත වගු (tables) ආකාරයෙන් සංවිධානය කිරීම, සරල බව, නම්‍යශීලී බව සහ SQL (Structured Query Language) හරහා පහසුවෙන් දත්ත හැසිරවීමට ඇති හැකියාව.",
            "වස්තු-නැඹුරු (object-oriented) සංකල්ප සෘජුවම භාවිතා කිරීම."
        ],
        correctAnswerIndex: 3,
        explanation: "සම්බන්ධක ආකෘතිය දත්ත පේළි සහ තීරු සහිත වගු ආකාරයෙන් සංවිධානය කරයි. එහි සරල බව, ව්‍යුහගත විමසුම් භාෂාව (SQL) සමඟ ඇති ගැළපීම සහ දත්ත අඛණ්ඩතාව පවත්වා ගැනීමට ඇති හැකියාව නිසා එය වඩාත් ජනප්‍රිය වී ඇත."
    },
    {
        questionText: "වස්තු-සම්බන්ධක ආකෘතිය (Object-Relational Model) යනු කුමක්ද?",
        options: [
            "එය Flat File System හි තවත් නමකි.",
            "වස්තු-නැඹුරු දත්ත සමුදා ආකෘතියක් පමණි.",
            "සම්බන්ධක ආකෘතියේ හැකියාවන් ඉවත් කර, වස්තු-නැඹුරු සංකල්ප පමණක් එකතු කරන ආකෘතියකි.",
            "වස්තු-නැඹුරු දත්ත සමුදා ආකෘතියේ සහ සම්බන්ධක දත්ත සමුදා ආකෘතියේ ලක්ෂණ ඒකාබද්ධ කරන ආකෘතියකි.",
            "දත්ත ගසක ආකාරයට සංවිධානය කරන ආකෘතියකි."
        ],
        correctAnswerIndex: 3,
        explanation: "වස්තු-සම්බන්ධක ආකෘතිය (ORM) යනු සාම්ප්‍රදායික සම්බන්ධක දත්ත සමුදා ආකෘතියට වස්තු-නැඹුරු ක්‍රමලේඛන සංකල්ප (උදා: වස්තූන්, පන්ති, උරුමයන්) එක් කිරීමෙන් නිර්මාණය වූ දෙමුහුන් ආකෘතියකි. එය දත්ත සංකීර්ණ ලෙස නිරූපණය කිරීමට සහ හැසිරවීමට වැඩි නම්‍යශීලී බවක් ලබා දෙයි."
    },
    {
        questionText: "විවිධ දත්ත සමුදා ආකෘති (Hierarchical, Network, Relational) සැසඳීමේදී, දත්ත සම්බන්ධතා නිරූපණය කිරීමේ නම්‍යශීලී බව අනුව ඒවා නිවැරදිව වර්ගීකරණය කරන්නේ කෙසේද?",
        options: [
            "Hierarchical < Network < Relational",
            "Network < Hierarchical < Relational",
            "Relational < Hierarchical < Network",
            "Hierarchical = Network = Relational (සියල්ලම එක හා සමාන නම්‍යශීලී වේ)",
            "Relational < Network < Hierarchical"
        ],
        correctAnswerIndex: 0,
        explanation: "Hierarchical ආකෘතියට එක්-බොහෝ (One-to-Many) සම්බන්ධතා පමණක් නිරූපණය කළ හැකි අතර, Network ආකෘතියට බොහෝ-බොහෝ (Many-to-Many) සම්බන්ධතා නිරූපණය කළ හැක. Relational ආකෘතියට සියලු වර්ගවල සම්බන්ධතා වගු සහ යතුරු භාවිතයෙන් ඉතා නම්‍යශීලීව නිරූපණය කළ හැක. එබැවින්, නම්‍යශීලී බවේ අනුපිළිවෙල Hierarchical < Network < Relational වේ."
    },
    {
        questionText: "දත්ත සමුදායක ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "දත්ත ගබඩා කිරීම පමණක්.",
            "තොරතුරු ගබඩා කිරීම සහ ප්‍රතිසාධනය කිරීම.",
            "සංවිධානයක දත්ත කළමනාකරණය, සුරක්ෂිතභාවය සහ කාර්යක්ෂමතාව වැඩි දියුණු කිරීම.",
            "දත්ත විශ්ලේෂණය සඳහා පමණක් භාවිතා කිරීම.",
            "ඕනෑම දත්ත ගබඩා කිරීමේ පද්ධතියක් ප්‍රතිස්ථාපනය කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "දත්ත සමුදායක ප්‍රධාන අරමුණ වන්නේ සංවිධානයක දත්ත කාර්යක්ෂමව ගබඩා කිරීම, සංවිධානය කිරීම, ප්‍රතිසාධනය කිරීම, යාවත්කාලීන කිරීම සහ කළමනාකරණය කිරීමයි. එමගින් දත්ත පුනරාවර්තනය අවම කර, දත්ත අඛණ්ඩතාව පවත්වාගෙන ගොස්, දත්ත වෙත ප්‍රවේශ වීමේ කාර්යක්ෂමතාව සහ සුරක්ෂිතභාවය වැඩි දියුණු කිරීමයි."
    },
    {
        questionText: "පහත සඳහන් ඒවායින් දත්ත සමුදායක් භාවිතා කිරීමේ ප්‍රධාන වාසියක් නොවන කරුණ කුමක්ද?",
        options: [
            "දත්ත පුනරාවර්තනය අවම කිරීම.",
            "දත්ත අඛණ්ඩතාව (Data Integrity) වැඩි දියුණු කිරීම.",
            "දත්ත ආරක්ෂාව සහ පාලනය වැඩිදියුණු කිරීම.",
            "දත්ත කළමනාකරණය සඳහා සංකීර්ණ මෙහෙයුම් අවශ්‍ය වීම.",
            "බහු පරිශීලක ප්‍රවේශය සඳහා සහාය වීම."
        ],
        correctAnswerIndex: 3,
        explanation: "දත්ත සමුදායක් භාවිතා කිරීමේදී දත්ත පුනරාවර්තනය අවම කිරීම, දත්ත අඛණ්ඩතාව, ආරක්ෂාව, සහ බහු පරිශීලක ප්‍රවේශය වැනි බොහෝ වාසි ඇත. කෙසේ වෙතත්, දත්ත සමුදායන් සැලසුම් කිරීම, ක්‍රියාත්මක කිරීම සහ කළමනාකරණය කිරීම සඳහා විශේෂිත දැනුමක් සහ සංකීර්ණ මෙහෙයුම් අවශ්‍ය වීම යනු වාසියක් නොව, අවාසියක් හෝ අභියෝගයකි."
    },
    {
        questionText: "'අමු කරුණු' (Raw facts) ලෙස වඩාත් නිවැරදිව හඳුන්වන්නේ කුමක්ද?",
        options: [
            "විශ්ලේෂණය කර අර්ථවත් කර ඇති තොරතුරු.",
            "තීරණ ගැනීමට භාවිතා කරන දැනුම.",
            "කිසිදු සන්දර්භයක් හෝ සැකසීමක් නොමැතිව පවතින දත්ත.",
            "ග්‍රැෆික් හෝ රූප ආකෘතියෙන් ඉදිරිපත් කරන ලද තොරතුරු.",
            "පරිගණක පද්ධති මගින් පමණක් තේරුම් ගත හැකි තොරතුරු."
        ],
        correctAnswerIndex: 2,
        explanation: "අමු කරුණු යනු කිසිදු සන්දර්භයක් හෝ සැකසීමක් නොමැතිව පවතින දත්ත වේ. මේවා තොරතුරු බවට පත්වන්නේ සැකසීමකින් හෝ අර්ථ නිරූපණයකින් පසුවයි."
    },
    {
        questionText: "ආයතනයක සේවකයන්ගේ නම්, ලිපිනයන්, දුරකථන අංක, වැටුප් තොරතුරු වැනි දත්ත කාර්යක්ෂමව හා සුරක්ෂිතව ගබඩා කිරීම, යාවත්කාලීන කිරීම සහ අවශ්‍ය විටදී වාර්තා ලබා ගැනීම සඳහා වඩාත් සුදුසු පද්ධතිය කුමක්ද?",
        options: [
            "සරල වචන සකසන (Word Processor) ගොනු.",
            "විද්‍යුත් තැපැල් පද්ධතියක්.",
            "දත්ත සමුදාය කළමනාකරණ පද්ධතියක් (DBMS).",
            "තනි spreadsheet ගොනුවක්.",
            "ඡායාරූප ගැලරියක්."
        ],
        correctAnswerIndex: 2,
        explanation: "සේවක තොරතුරු වැනි සංකීර්ණ, එකිනෙකට සම්බන්ධිත දත්ත විශාල ප්‍රමාණයක් කාර්යක්ෂමව ගබඩා කිරීමට, කළමනාකරණය කිරීමට, සුරක්ෂිත කිරීමට සහ අවශ්‍ය විටදී විවිධ වාර්තා ලබා ගැනීමට දත්ත සමුදාය කළමනාකරණ පද්ධතියක් (DBMS) වඩාත් සුදුසු වේ. වචන සකසන හෝ spreadsheet වැනි සරල ගොනු පද්ධති දත්ත පුනරාවර්තනය, අඛණ්ඩතා ගැටළු සහ ආරක්ෂක අවදානම් ඇති කරයි."
    },
    {
        questionText: "දත්ත සමුදා ආකෘතියක් ලෙස Hierarchical Model භාවිතා කරන ප්‍රධාන සීමාව කුමක්ද?",
        options: [
            "එය Many-to-Many සම්බන්ධතා පහසුවෙන් නිරූපණය කිරීමේ හැකියාව.",
            "එය One-to-Many සම්බන්ධතා පමණක් කාර්යක්ෂමව කළමනාකරණය කිරීම.",
            "එහි දත්ත වෙත ප්‍රවේශ වීමේ වේගය ඉතා ඉහළ වීම.",
            "එය වගු මත පදනම් වීම නිසා දත්ත සංකීර්ණ වීම.",
            "එය වස්තු-නැඹුරු සංකල්ප සෘජුවම භාවිතා කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "Hierarchical Model හි ප්‍රධාන සීමාව වන්නේ එය One-to-Many (එක් මව් නෝඩයකට පුත් නෝඩ කිහිපයක්) සම්බන්ධතා පමණක් පහසුවෙන් නිරූපණය කිරීමට හැකි වීමයි. Many-to-Many සම්බන්ධතා නිරූපණය කිරීමට සංකීර්ණ විසඳුම් අවශ්‍ය වන අතර, එය දත්ත සමුදායේ ව්‍යුහය සංකීර්ණ කරයි."
    },
    {
        questionText: "පහත සඳහන් දත්ත සමුදා ආකෘති අතුරින් 'schema-less' හෝ 'flexible schema' ලෙස හැඳින්විය හැකි දත්ත ආකෘතියකට සමීපතම වන්නේ කුමක්ද?",
        options: [
            "Relational Model",
            "Hierarchical Model",
            "Flat File System",
            "Object-Relational Model",
            "ව්‍යුහගත නොවන දත්ත සමුදායන් (NoSQL databases) සමඟ සම්බන්ධ දත්ත ආකෘති"
        ],
        correctAnswerIndex: 4,
        explanation: "සාම්ප්‍රදායික සම්බන්ධක දත්ත සමුදායන් (Relational Model) දැඩි schema එකක් (පූර්ව-නිර්වචනය කළ වගු ව්‍යුහයක්) මත පදනම් වේ. නමුත් NoSQL දත්ත සමුදායන් (උදා: Document databases, Key-value stores) ව්‍යුහගත නොවන හෝ අර්ධ-ව්‍යුහගත දත්ත සඳහා නිර්මාණය කර ඇති අතර, 'schema-less' හෝ 'flexible schema' ලෙස හැඳින්වේ. මේවා දත්ත ආකෘති නම්‍යශීලී බවක් ලබා දෙයි."
    },
    {
        questionText: "දත්ත සමුදායක දත්ත අඛණ්ඩතාව (Data Integrity) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "දත්ත වෙත ප්‍රවේශ විය හැක්කේ බලයලත් පරිශීලකයන්ට පමණක් බව.",
            "දත්ත සම්පූර්ණ, නිවැරදි සහ අඛණ්ඩව පවතින බව.",
            "දත්ත කිසි විටෙකත් යාවත්කාලීන නොවන බව.",
            "දත්ත සමුදාය සරල වගු වලින් පමණක් සමන්විත බව.",
            "දත්ත ගබඩා කිරීමේ පිරිවැය අවම බව."
        ],
        correctAnswerIndex: 1,
        explanation: "දත්ත අඛණ්ඩතාව යනු දත්ත සමුදායේ දත්ත සම්පූර්ණ, නිවැරදි සහ අඛණ්ඩව පවතින බව සහතික කිරීමයි. මෙය දත්ත පුනරාවර්තනය අවම කිරීම, නිවැරදි දත්ත වර්ග භාවිතා කිරීම සහ දත්ත සමුදා නීති (constraints) ක්‍රියාත්මක කිරීම මගින් සිදු කරයි."
    },
    {
        questionText: "ව්‍යුහගත නොවන දත්ත සඳහා උදාහරණයක් ලෙස සැලකිය හැක්කේ කුමක්ද?",
        options: [
            "බැංකු ගිණුම් අංක.",
            "සේවක වැටුප් වගුවක ඇති සේවක හැඳුනුම් අංක.",
            "වාර්තාමය චිත්‍රපටයක වීඩියෝ දසුන්.",
            "සිසුන්ගේ විභාග ප්‍රතිඵල වගුවක ඇති ලකුණු.",
            "ග්‍රාහකයන්ගේ නම සහ ලිපිනය ඇතුළත් දත්ත සමුදා වගුවක්."
        ],
        correctAnswerIndex: 2,
        explanation: "වාර්තාමය චිත්‍රපටයක වීඩියෝ දසුන්, ඊමේල්, පින්තූර, හඬ පට, සමාජ මාධ්‍ය සටහන් සහ පෙළ ලේඛන වැනි දත්තවලට නිශ්චිත, පූර්ව-නිර්වචනය කළ ආකෘතියක් නොමැත. මේවා ව්‍යුහගත නොවන දත්ත ලෙස හැඳින්වේ. අනෙක් විකල්ප ව්‍යුහගත දත්ත සඳහා උදාහරණ වේ."
    },
    {
        questionText: "දත්ත සමුදාය කළමනාකරණ පද්ධතියක් (DBMS) භාවිතා කිරීමේදී, දත්තවල ස්වාධීනත්වය (Data Independence) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "දත්ත කිසිදු යෙදුමකට සම්බන්ධ නොවන බව.",
            "දත්ත සමුදා ව්‍යුහයේ වෙනස්කම් යෙදුම් වැඩසටහන්වලට බලපාන්නේ නැති බව.",
            "එකම දත්ත සමුදාය විවිධ මෙහෙයුම් පද්ධති මත ක්‍රියාත්මක කළ නොහැකි බව.",
            "දත්ත සමුදාය වෙත ප්‍රවේශ වීමට සෑම විටම මුරපදයක් අවශ්‍ය බව.",
            "දත්ත වෙත ප්‍රවේශ වීමට අන්තර්ජාල සම්බන්ධතාවයක් අත්‍යවශ්‍ය බව."
        ],
        correctAnswerIndex: 1,
        explanation: "දත්ත ස්වාධීනත්වය යනු දත්ත සමුදායේ භෞතික (physical) හෝ තාර්කික (logical) ව්‍යුහයේ වෙනස්කම් දත්ත වෙත ප්‍රවේශ වන යෙදුම් වැඩසටහන්වලට බලපාන්නේ නැති හැකියාවයි. මෙය DBMS හි වැදගත් ලක්ෂණයක් වන අතර, එමගින් පද්ධතියේ නඩත්තුව සහ සංවර්ධනය පහසු කරයි."
    },
    {
        questionText: "දත්ත සමුදායක් නිර්මාණය කිරීමේදී 'දත්ත ආකෘතිය' (Data Model) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "දත්ත ගබඩා කිරීම සඳහා භාවිතා කරන පරිගණක දෘඩාංග වර්ගය.",
            "දත්ත සමුදාය කළමනාකරණය සඳහා භාවිතා කරන මෘදුකාංගය.",
            "දත්ත සමුදායක් තුළ දත්ත සංවිධානය කර ගබඩා කරන්නේ කෙසේද යන්න විස්තර කරන සංකල්පීය ව්‍යුහය.",
            "දත්ත සමුදාය වෙත ප්‍රවේශ විය හැකි පරිශීලකයන්ගේ ලැයිස්තුව.",
            "දත්ත සමුදායේ ගබඩා කර ඇති දත්තවල සත්‍ය අගයන්."
        ],
        correctAnswerIndex: 2,
        explanation: "දත්ත ආකෘතියක් යනු දත්ත සමුදායක් තුළ දත්ත සංවිධානය කර ගබඩා කරන්නේ කෙසේද යන්න විස්තර කරන සංකල්පීය ව්‍යුහයකි. එය දත්ත, දත්ත අතර සම්බන්ධතා සහ දත්ත සඳහා යෙදිය හැකි නීති (constraints) නිරූපණය කරයි."
    },
    {
        questionText: "Hierarchical Model සහ Network Model දත්ත සමුදා ආකෘති Relational Model ට වඩා පැරණි වුවද, ඒවාට Relational Model මෙන් පහසුවෙන් Many-to-Many සම්බන්ධතා කළමනාකරණය කළ නොහැක්කේ ඇයි?",
        options: [
            "Relational Model හි දත්ත වගු ලෙස ගබඩා නොවන නිසා.",
            "Hierarchical සහ Network ආකෘතිවලට SQL භාෂාව භාවිතා කළ නොහැකි නිසා.",
            "Hierarchical සහ Network ආකෘතිවල දත්ත ව්‍යුහය සීමිත බැවින්, සංකීර්ණ සම්බන්ධතා සඳහා බහු මාර්ග (multiple paths) හෝ පුනරාවර්තන (redundancy) අවශ්‍ය වන නිසා.",
            "Relational Model හි දත්ත ස්වාධීනත්වය නොමැති නිසා.",
            "Hierarchical සහ Network ආකෘතිවලට දත්ත ආරක්ෂාව සැපයිය නොහැකි නිසා."
        ],
        correctAnswerIndex: 2,
        explanation: "Hierarchical Model හි එක් child node එකකට ඇත්තේ එක් parent node එකක් පමණක් වන අතර, Network Model හි child node එකකට parent node කිහිපයක් තිබිය හැකි වුවද, දත්ත වෙත ප්‍රවේශ වීමේ මාර්ග නිශ්චිතව නිර්වචනය කළ යුතුය. Many-to-Many සම්බන්ධතා නිරූපණය කිරීමට මෙම ආකෘතිවල දත්ත ව්‍යුහය සීමිත බැවින්, Relational Model මෙන් පහසුවෙන් ඒවා කළමනාකරණය කළ නොහැක."
    },
    {
        questionText: "ඔන්ලයින් සාප්පුවක භාණ්ඩයක නම, මිල, සහ කේතය (e.g., 'ලැප්ටොප්', '150000', 'LPT001') යනු කුමක්ද?",
        options: [
            "තොරතුරු",
            "දත්ත",
            "පද්ධතිය",
            "දැනුම",
            "වාර්තාවක්"
        ],
        correctAnswerIndex: 1,
        explanation: "භාණ්ඩයක නම, මිල සහ කේතය වැනි තනි, අමු කරුණු දත්ත ලෙස හැඳින්වේ. මේවාට තනිවම විශේෂ අර්ථයක් නොමැත. මෙම දත්ත සැකසීමෙන් හෝ සන්දර්භගත කිරීමෙන් පසුව තොරතුරු බවට පත් වේ (උදා: 'LPT001 ලැප්ටොප් එකේ මිල රු. 150000 කි.')."
    },
    {
        questionText: "දත්ත සමුදායක් නිර්මාණය කිරීමේදී, දත්ත අසංගතතාව (Data Inconsistency) යනු කුමක්ද?",
        options: [
            "දත්ත සමුදායට ප්‍රවේශ වීමට නොහැකි වීම.",
            "එකම දත්තයේ විවිධ පිටපත් වල එකිනෙකට පටහැනි අගයන් තිබීම.",
            "දත්ත සමුදායේ දත්ත ආරක්ෂාව නොමැති වීම.",
            "දත්ත සමුදායේ ගබඩා කර ඇති දත්ත ප්‍රමාණය ඕනෑවට වඩා විශාල වීම.",
            "දත්ත සමුදායේ දත්ත යාවත්කාලීන කිරීමට නොහැකි වීම."
        ],
        correctAnswerIndex: 1,
        explanation: "දත්ත අසංගතතාව යනු එකම දත්තයේ විවිධ පිටපත් වල එකිනෙකට පටහැනි අගයන් තිබීමයි. මෙය බොහෝ විට දත්ත පුනරාවර්තනය (Data Redundancy) නිසා ඇති වේ. උදා: එක් සිසුවෙකුගේ දුරකථන අංකය විවිධ ගොනු වල විවිධ ආකාරයෙන් සටහන් වී තිබීම."
    },
    {
        questionText: "පරිගණක පද්ධතියක දත්ත ගබඩා කිරීමේදී Flat File System භාවිතා කිරීමේදී ඇතිවන ප්‍රධානතම ගැටළුවක් වන්නේ කුමක්ද?",
        options: [
            "දත්ත වෙත ප්‍රවේශ වීමේ වේගය ඉතා ඉහළ වීම.",
            "දත්ත පුනරාවර්තනය (Data Redundancy) සහ එයින් ඇතිවන දත්ත අසංගතතාව (Data Inconsistency) අවම වීම.",
            "දත්ත පුනරාවර්තනය (Data Redundancy) සහ එයින් ඇතිවන දත්ත අසංගතතාව (Data Inconsistency).",
            "දත්ත ගබඩා කිරීමේ පිරිවැය ඉතා ඉහළ වීම.",
            "අන්තර්ජාලය හරහා පමණක් දත්ත වෙත ප්‍රවේශ වීමට හැකි වීම."
        ],
        correctAnswerIndex: 2,
        explanation: "Flat File System යනු දත්ත තනි ගොනු වල ගබඩා කරන සරල ක්‍රමයකි. මෙහිදී එකම දත්ත විවිධ ගොනු වල නැවත නැවත ගබඩා වීමට ඉඩ ඇත (Data Redundancy). එමගින් දත්ත යාවත්කාලීන කිරීමේදී හෝ වෙනස් කිරීමේදී සියලුම පිටපත් නිවැරදිව වෙනස් නොකළහොත් දත්ත අසංගතතාව (Data Inconsistency) ඇති විය හැක. දත්ත සමුදායන් නිර්මාණය කර ඇත්තේ මෙම ගැටළු මඟහරවා ගැනීමටය."
    },
    {
        questionText: "පහත සඳහන් දත්ත සමුදා ආකෘති අතුරින්, දත්ත අතර 'Parent-Child' සම්බන්ධතාවයක් පමණක් නිරූපණය කිරීමට හොඳම ආකෘතිය කුමක්ද?",
        options: [
            "Relational Model",
            "Network Model",
            "Hierarchical Model",
            "Object-Relational Model",
            "Flat File System"
        ],
        correctAnswerIndex: 2,
        explanation: "Hierarchical Model යනු දත්ත ගසක ආකාරයට සංවිධානය කරන ආකෘතියකි. එහිදී එක් Parent node එකකට Multiple Child nodes තිබිය හැකි වුවද, සෑම Child node එකකටම ඇත්තේ එක් Parent node එකක් පමණි. මෙය ස්වභාවිකවම Parent-Child සම්බන්ධතා නිරූපණය කිරීමට වඩාත් සුදුසුය."
    },
    {
        questionText: "යම් සිදුවීමක් හෝ ක්‍රියාවක් පිළිබඳ තොරතුරු රැස්කරගැනීමේදී, එම සිදුවීම පිළිබඳව ලැබෙන අමු, සැකසූ නොමැති අගයන් 'දත්ත' ලෙසත්, එම අගයන් විශ්ලේෂණය කිරීමෙන් පසු ලැබෙන අර්ථවත් ප්‍රතිඵල 'තොරතුරු' ලෙසත් හඳුන්වන විට, එමගින් අවධාරණය වන්නේ කුමක්ද?",
        options: [
            "දත්ත සහ තොරතුරු අතර සැබෑ වෙනසක් නොමැති බව.",
            "දත්ත සැමවිටම සංඛ්‍යාත්මක ස්වභාවයක් ගන්නා බව.",
            "තොරතුරු යනු දත්ත සරල ලෙස ගබඩා කිරීමේ ප්‍රතිඵලයක් බව.",
            "දත්ත, තොරතුරු බවට පත්වීම සඳහා යම් සැකසීමක්, විශ්ලේෂණයක් හෝ සන්දර්භයක් අවශ්‍ය බව.",
            "තොරතුරු දත්තවලට වඩා විශාල ගබඩා ඉඩක් අවශ්‍ය වන බව."
        ],
        correctAnswerIndex: 3,
        explanation: "මෙම උදාහරණයෙන් පැහැදිලි වන්නේ දත්ත යනු අමු, සැකසූ නොමැති අගයන් වන අතර, ඒවා තොරතුරු බවට පත්වීමට නම් යම් ආකාරයක සැකසීමකට, විශ්ලේෂණයකට හෝ සන්දර්භගත කිරීමකට ලක් විය යුතු බවයි. එනම්, දත්තවලට අර්ථයක් ලබා දී තීරණ ගැනීමට හෝ අවබෝධයක් ලබා ගැනීමට හැකි වන්නේ එම සැකසීමෙන් පසුවයි."
    },
    {
        questionText: "දත්ත සමුදා ආකෘති අතරින් වඩාත් සංකීර්ණ දත්ත ව්‍යුහයන් සහ බහු සම්බන්ධතා නිරූපණය කිරීමට හැකි වන පරිදි, දත්ත වගු ලෙස සංවිධානය කරමින්, යතුරු (Keys) හරහා ඒවා සම්බන්ධ කරන ආකෘතිය කුමක්ද?",
        options: [
            "Hierarchical Model",
            "Flat File System",
            "Network Model",
            "Relational Model",
            "Object-Relational Model"
        ],
        correctAnswerIndex: 3,
        explanation: "Relational Model යනු දත්ත සමුදා ආකෘති අතරින් වඩාත් ප්‍රබල සහ නම්‍යශීලී එකකි. එය දත්ත වගු (relations) ලෙස සංවිධානය කරන අතර, ප්‍රාථමික යතුරු (Primary Keys) සහ ආගන්තුක යතුරු (Foreign Keys) හරහා වගු අතර සංකීර්ණ සම්බන්ධතා (One-to-One, One-to-Many, Many-to-Many) ඉතා කාර්යක්ෂමව නිරූපණය කිරීමට හා කළමනාකරණය කිරීමට හැකියාව ලබා දෙයි."
    },

    // 8.2 දත්ත සමුදායක සංකල්පීය රූපාත්මක සටහන (conceptual schema) සැලසුම් කරයි
    {
        questionText: "Entity-Relationship (ER) Diagram එකක 'Entity' (භූතාර්ථය) යනු කුමක්ද?",
        options: [
            "දත්ත අතර සම්බන්ධතාවයක්.",
            "දත්ත ගබඩා කරන ස්ථානය.",
            "තොරතුරු පද්ධතියක වැදගත් වන, සැබෑ ලෝකයේ පවතින වස්තුවක්, සංකල්පයක් හෝ සිදුවීමක්.",
            "භූතාර්ථයක ගුණාංගයකි.",
            "දත්ත සමුදාය කළමනාකරණය සඳහා භාවිතා කරන මෘදුකාංගයකි."
        ],
        correctAnswerIndex: 2,
        explanation: "ER Diagram එකක Entity (භූතාර්ථය) යනු තොරතුරු පද්ධතියක වැදගත් වන, සැබෑ ලෝකයේ පවතින, පැහැදිලිව හඳුනාගත හැකි වස්තුවක්, සංකල්පයක් හෝ සිදුවීමකි. උදාහරණයක් ලෙස, 'සිසුවා', 'ගුරුවරයා', 'පාඨමාලාව' යනාදිය භූතාර්ථ විය හැක."
    },
    {
        questionText: "ER Diagram එකක 'Attribute' (උපලක්ෂණ) යනු කුමක්ද?",
        options: [
            "Entities අතර ඇති සම්බන්ධතාවයකි.",
            "Entity එකක ඇති දත්ත ගුණාංගයකි.",
            "Entities ගබඩා කරන ස්ථානයකි.",
            "ER Diagram හි ප්‍රධාන සංරචකයකි.",
            "දත්ත සමුදාය යතුරකි."
        ],
        correctAnswerIndex: 1,
        explanation: "Attribute (උපලක්ෂණ) යනු Entity එකක ගුණාංගයක් හෝ ලක්ෂණයකි. උදාහරණයක් ලෙස, 'සිසුවා' යන Entity එකට 'සිසු අංකය', 'නම', 'ලිපිනය' වැනි උපලක්ෂණ තිබිය හැක."
    },
    {
        questionText: "ER Diagram එකක 'Entity Identifier' (භූතාර්ථ හඳුන්වනය) ලෙස හැඳින්වෙන්නේ කුමක්ද?",
        options: [
            "Entity එකක් නිර්මාණය කරන දිනය.",
            "Entity එකක් තවත් Entity එකක් සමඟ සම්බන්ධ කරන උපලක්ෂණය.",
            "Entity එකක් තුළ ඇති උපලක්ෂණ සමූහයක් හෝ තනි උපලක්ෂණයක්, එම Entity වර්ගයේ සෑම අවස්ථාවක්ම අද්විතීයව හඳුනා ගැනීමට භාවිතා කරන.",
            "Entity එකක ඇති සියලුම උපලක්ෂණ වල එකතුව.",
            "Entity එකක භූගෝලීය පිහිටීම."
        ],
        correctAnswerIndex: 2,
        explanation: "Entity Identifier (භූතාර්ථ හඳුන්වනය) යනු Entity එකක් තුළ ඇති උපලක්ෂණ සමූහයක් හෝ තනි උපලක්ෂණයක් වන අතර, එය එම Entity වර්ගයේ සෑම අවස්ථාවක්ම (instance) අද්විතීයව හඳුනා ගැනීමට භාවිතා කරයි. මෙය Relational Model හි Primary Key එකට සමාන වේ. උදා: 'සිසුවා' Entity හි 'සිසු අංකය'."
    },
    {
        questionText: "ER Diagram එකක 'Relationship' (සම්බන්ධතාව) යනු කුමක්ද?",
        options: [
            "Entity එකක් තවත් Entity එකකින් ස්වාධීන බව.",
            "එකක් හෝ වැඩි ගණනක් වන Entities එකිනෙක සම්බන්ධ වන ආකාරය.",
            "Entity එකක ගබඩා කර ඇති දත්ත වර්ගය.",
            "Entity එකක් දත්ත සමුදායක ගබඩා කරන ආකාරය.",
            "ER Diagram එකක උපලක්ෂණයක්."
        ],
        correctAnswerIndex: 1,
        explanation: "Relationship (සම්බන්ධතාව) යනු එකක් හෝ වැඩි ගණනක් වන Entities එකිනෙක සම්බන්ධ වන ආකාරයයි. උදාහරණයක් ලෙස, 'ගුරුවරයා' සහ 'පාඨමාලාව' යන Entities අතර 'උගන්වයි' (Teaches) යන සම්බන්ධතාවය තිබිය හැක."
    },
    {
        questionText: "ER Diagram එකක 'Cardinality' (ගණනීයතාව) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "Entity එකක ඇති උපලක්ෂණ ගණන.",
            "දත්ත සමුදායක ගබඩා කළ හැකි උපරිම දත්ත ප්‍රමාණය.",
            "සම්බන්ධතාවයකට සහභාගී විය හැකි එක් Entity වර්ගයක අවස්ථා ගණන.",
            "ER Diagram එකක් නිර්මාණය කිරීමට ගතවන කාලය.",
            "ER Diagram එකක ඇති Entities ගණන."
        ],
        correctAnswerIndex: 2,
        explanation: "Cardinality (ගණනීයතාව) යනු සම්බන්ධතාවයකට සහභාගී විය හැකි එක් Entity වර්ගයක අවස්ථා (instances) ගණනයි. එය One-to-One (1:1), One-to-Many (1:M), Many-to-One (M:1), හෝ Many-to-Many (M:N) විය හැක."
    },
    {
        questionText: "විභාගයකට ලියාපදිංචි වන සිසුන්ගේ තොරතුරු කළමනාකරණය සඳහා ER Diagram එකක් සැලසුම් කිරීමේදී, 'සිසුවා' සහ 'පාඨමාලාව' අතර ඇති සම්බන්ධතාවය සාමාන්‍යයෙන් කුමන ආකාරයේ ගණනීයතාවයකින් (Cardinality) නිරූපණය වේද?",
        options: [
            "One-to-One (1:1)",
            "One-to-Many (1:M)",
            "Many-to-One (M:1)",
            "Many-to-Many (M:N)",
            "Zero-to-Many (0:M)"
        ],
        correctAnswerIndex: 3,
        explanation: "සාමාන්‍යයෙන්, එක් සිසුවෙකුට පාඨමාලා කිහිපයකට ලියාපදිංචි විය හැකි අතර, එක් පාඨමාලාවකට සිසුන් කිහිප දෙනෙකුට ලියාපදිංචි විය හැක. එබැවින්, 'සිසුවා' සහ 'පාඨමාලාව' අතර ඇති සම්බන්ධතාවය 'Many-to-Many' (M:N) ගණනීයතාවයකින් නිරූපණය වේ."
    },
    {
        questionText: "ER Diagram එකක් මූලිකවම නිර්මාණය කරනු ලබන්නේ කුමන අරමුණක් සඳහාද?",
        options: [
            "දත්ත සමුදායක භෞතික ගබඩා කිරීමේ ව්‍යුහය නිර්මාණය කිරීමට.",
            "දත්ත සමුදායක තාර්කික රූපාත්මක සටහන (Relational Schema) නිර්මාණය කිරීමට.",
            "දත්ත සමුදායක දත්ත ගොනු ආරක්ෂා කිරීමට.",
            "සැබෑ ලෝකයේ තොරතුරු පද්ධතියක සංකල්පීය දත්ත ආකෘතිය නිරූපණය කිරීමට.",
            "පරිගණක වැඩසටහන් කේතය ලිවීමට."
        ],
        correctAnswerIndex: 3,
        explanation: "ER Diagram එකක් යනු සැබෑ ලෝකයේ තොරතුරු පද්ධතියක සංකල්පීය දත්ත ආකෘතිය (Conceptual Data Model) නිරූපණය කිරීම සඳහා භාවිතා කරන බලවත් මෙවලමකි. එය පද්ධතියේ Entities, ඒවායේ Attributes සහ Entities අතර Relationships පැහැදිලිව පෙන්වයි."
    },
    {
        questionText: "ER Diagram එකක Entity එකක් නිරූපණය කිරීමට භාවිතා කරන රූපමය සංකේතය කුමක්ද?",
        options: [
            "දියමන්ති හැඩය (Diamond shape)",
            "ඕවල් හැඩය (Oval shape)",
            "සෘජුකෝණාස්‍රය (Rectangle)",
            "ඉලිප්සය (Ellipse)",
            "ත්‍රිකෝණය (Triangle)"
        ],
        correctAnswerIndex: 2,
        explanation: "ER Diagram එකක Entity එකක් නිරූපණය කිරීමට සෘජුකෝණාස්‍රයක් (Rectangle) භාවිතා කරයි. දියමන්ති හැඩය සම්බන්ධතා සඳහාත්, ඕවල්/ඉලිප්ස හැඩය උපලක්ෂණ සඳහාත් භාවිතා වේ."
    },
    {
        questionText: "ER Diagram එකක Attribute එකක් නිරූපණය කිරීමට භාවිතා කරන රූපමය සංකේතය කුමක්ද?",
        options: [
            "සෘජුකෝණාස්‍රය (Rectangle)",
            "දියමන්ති හැඩය (Diamond shape)",
            "ඕවල් හැඩය (Oval shape) හෝ ඉලිප්සය (Ellipse)",
            "ත්‍රිකෝණය (Triangle)",
            "රවුම (Circle)"
        ],
        correctAnswerIndex: 2,
        explanation: "ER Diagram එකක Attribute එකක් නිරූපණය කිරීමට ඕවල් හැඩයක් (Oval shape) හෝ ඉලිප්සයක් (Ellipse) භාවිතා කරයි. Entity Identifier (Primary Key) Attributes සඳහා බොහෝ විට යටින් ඉරක් (underline) යොදනු ලැබේ."
    },
    {
        questionText: "ER Diagram එකක Relationship එකක් නිරූපණය කිරීමට භාවිතා කරන රූපමය සංකේතය කුමක්ද?",
        options: [
            "ඕවල් හැඩය (Oval shape)",
            "සෘජුකෝණාස්‍රය (Rectangle)",
            "දියමන්ති හැඩය (Diamond shape)",
            "රවුම (Circle)",
            "ත්‍රිකෝණය (Triangle)"
        ],
        correctAnswerIndex: 2,
        explanation: "ER Diagram එකක Relationship එකක් නිරූපණය කිරීමට දියමන්ති හැඩයක් (Diamond shape) භාවිතා කරයි. මෙම දියමන්ති හැඩය සම්බන්ධ වන Entities සමඟ රේඛා මගින් සම්බන්ධ වේ."
    },
    {
        questionText: "Extended ER Diagrams (විස්තෘත භූතාර්ථ සම්බන්ධතා රූප සටහන්) සාමාන්‍ය ER Diagrams වලින් වෙනස් වන්නේ කෙසේද?",
        options: [
            "ඒවාට Entities සහ Attributes ඇතුළත් නොවේ.",
            "ඒවා Relational Schema බවට පරිවර්තනය කළ නොහැක.",
            "ඒවා දත්ත සමුදා නිර්මාණයේ භෞතික අදියර සඳහා පමණක් භාවිතා වේ.",
            "ඒවා Sub-types/Super-types, Generalization, Specialization සහ Aggregation වැනි වඩාත් සංකීර්ණ සංකල්ප ඇතුළත් කිරීමට හැකියාව ලබා දෙයි.",
            "ඒවා කිසිදු රූපමය සංකේතයක් භාවිතා නොකරයි."
        ],
        correctAnswerIndex: 3,
        explanation: "Extended ER Diagrams (EERD) සාමාන්‍ය ER Diagrams වලට වඩා උසස් සංකල්පයන් වන Sub-types/Super-types (උදා: සේවක Entity එකට 'ස්ථිර සේවක' සහ 'තාවකාලික සේවක' sub-types), Generalization, Specialization, සහ Aggregation වැනි දත්ත ආකෘතිකරණ සංකල්ප ඇතුළත් කිරීමට හැකියාව ලබා දෙයි. මෙය වඩාත් සංකීර්ණ සහ යථාර්ථවාදී දත්ත ආකෘති නිර්මාණය කිරීමට උපකාරී වේ."
    },
    {
        questionText: "ලබා දී ඇති අවස්ථාවකට අදාළව ER Diagram එකක් නිර්මාණය කිරීමේදී, 'Weak Entity' (දුර්වල භූතාර්ථය) යනු කුමක්ද?",
        options: [
            "එයට ප්‍රාථමික යතුරක් (Primary Key) නොමැති Entity එකකි.",
            "එය අනිවාර්යයෙන්ම වෙනත් Entity එකක් මත රඳා පවතින, තමන්ගේම අද්විතීය හඳුන්වනයක් (Identifier) නොමැති Entity එකකි.",
            "එය වෙනත් Entity එකක් සමඟ කිසිදු සම්බන්ධතාවයක් නොමැති Entity එකකි.",
            "එය ස්වයංක්‍රීයව දත්ත සමුදායෙන් ඉවත් වන Entity එකකි.",
            "එය බොහෝ Attributes නොමැති Entity එකකි."
        ],
        correctAnswerIndex: 1,
        explanation: "Weak Entity (දුර්වල භූතාර්ථය) යනු තමන්ගේම අද්විතීය හඳුන්වනයක් (Primary Key) නොමැති, සහ එය අද්විතීයව හඳුනා ගැනීම සඳහා අනිවාර්යයෙන්ම වෙනත් (Strong) Entity එකක් මත රඳා පවතින Entity එකකි. උදා: රක්ෂණ ඔප්පුවක 'යැපෙන්නා' (Dependent) Entity එක 'රක්ෂණලාභියා' (Policyholder) Entity එක මත රඳා පවතී."
    },
    {
        questionText: "ER Diagram එකක 'Many-to-Many' (M:N) සම්බන්ධතාවයක් නිරූපණය කිරීමට භාවිතා කරන රූපමය සංකේතය කුමක්ද?",
        options: [
            "සම්බන්ධතා රේඛාව දෙපස '1' සලකුණු.",
            "සම්බන්ධතා රේඛාව එක් පසක '1' සහ අනෙක් පසක 'N' සලකුණු.",
            "සම්බන්ධතා රේඛාව දෙපස 'N' හෝ '*' (asterisk) සලකුණු.",
            "සම්බන්ධතා රේඛාව මත 'M' සහ 'N' අක්ෂර.",
            "දියමන්ති හැඩය අසල 'M' සහ 'N' අක්ෂර."
        ],
        correctAnswerIndex: 2,
        explanation: "Many-to-Many (M:N) සම්බන්ධතාවයක් නිරූපණය කිරීමේදී, සම්බන්ධතා රේඛාවේ දෙපස 'N' හෝ '*' (asterisk) සලකුණු (Crow's Foot notation හි) හෝ 'M' සහ 'N' අක්ෂර (Chen's notation හි) භාවිතා වේ. මෙය එක් Entity එකක අවස්ථා කිහිපයක් තවත් Entity එකක අවස්ථා කිහිපයක් සමඟ සම්බන්ධ විය හැකි බව පෙන්වයි."
    },
    {
        questionText: "ER Diagram එකක් සැලසුම් කිරීමේදී, 'Participating Entity' යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "සම්බන්ධතාවයකට සහභාගී නොවන Entity එකක්.",
            "සම්බන්ධතාවයකට සහභාගී වන Entity එකක්.",
            "Weak Entity එකකට සමාන Entity එකක්.",
            "ප්‍රධාන යතුරක් නොමැති Entity එකක්.",
            "Attributes නොමැති Entity එකක්."
        ],
        correctAnswerIndex: 1,
        explanation: "Participating Entity යනු Relationship එකකට සහභාගී වන Entity එකකි. ඕනෑම Relationship එකක් අවම වශයෙන් Entities දෙකක් හෝ වැඩි ගණනක් අතර විය හැක, එම Entities 'Participating Entities' ලෙස හැඳින්වේ."
    },
    {
        questionText: "ER Diagram එකක 'Recursive Relationship' යනු කුමක්ද?",
        options: [
            "Entities තුනක් හෝ වැඩි ගණනක් අතර ඇති සම්බන්ධතාවයක්.",
            "එකම Entity වර්ගයක් තමන් සමඟම සම්බන්ධ වන සම්බන්ධතාවයක්.",
            "Entities දෙකක් අතර ඇති One-to-One සම්බන්ධතාවයක්.",
            "Weak Entity එකක් සහ Strong Entity එකක් අතර ඇති සම්බන්ධතාවයක්.",
            "දත්ත සමුදායේ දත්ත නැවත නැවත ගබඩා කිරීම නිරූපණය කරන සම්බන්ධතාවයක්."
        ],
        correctAnswerIndex: 1,
        explanation: "Recursive Relationship යනු එකම Entity වර්ගයක් තමන් සමඟම සම්බන්ධ වන සම්බන්ධතාවයකි. උදා: 'සේවකයා' Entity එක තුළ, 'සේවකයා' තවත් 'සේවකයෙකුට' 'කළමනාකරණය කරයි' (Manages) යන සම්බන්ධතාවය."
    },
    {
        questionText: "සංකල්පීය රූපාත්මක සටහනක් (Conceptual Schema) නිර්මාණය කිරීමේදී එහි මූලික අරමුණ කුමක්ද?",
        options: [
            "පරිශීලකයින්ට නොතේරෙන සංකීර්ණ දත්ත ව්‍යුහයන් නිර්මාණය කිරීම.",
            "පද්ධතියේ අවසාන පරිශීලකයින්ට තේරුම් ගත හැකි ආකාරයෙන් පද්ධතියේ දත්ත පිළිබඳ ඉහළ මට්ටමේ දර්ශනයක් සැපයීම.",
            "දත්ත සමුදායේ දත්ත ගබඩා කිරීමේ භෞතික ක්‍රියාවලිය විස්තර කිරීම.",
            "දත්ත සමුදාය කළමනාකරණය සඳහා අවශ්‍ය මෘදුකාංග තෝරා ගැනීම.",
            "දත්ත සමුදාය වෙත ප්‍රවේශ වීමේ ආරක්ෂක යාන්ත්‍රණ නිර්ණය කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "සංකල්පීය රූපාත්මක සටහනක් (ER Diagram) නිර්මාණය කිරීමේ මූලික අරමුණ වන්නේ අවසාන පරිශීලකයින්ට සහ පද්ධති විශ්ලේෂකයන්ට තේරුම් ගත හැකි ආකාරයෙන්, පද්ධතියක දත්ත ව්‍යුහය පිළිබඳ ඉහළ මට්ටමේ, සැබෑ ලෝකයේ සංකල්ප මත පදනම් වූ දර්ශනයක් සැපයීමයි. එය තාක්ෂණික විස්තරවලට වඩා ව්‍යාපාරික අවශ්‍යතා කෙරෙහි අවධානය යොමු කරයි."
    },
    {
        questionText: "ER Diagram එකක 'Connectivity' යනු කුමක්ද?",
        options: [
            "Entities අතර සම්බන්ධතා ගණන.",
            "සම්බන්ධතාවයකට සහභාගී වන අවම Entities ගණන.",
            "සම්බන්ධතාවයකට සහභාගී වන එක් Entity එකක අවස්ථා ගණන (Cardinality) ලෙස හැඳින්වේ.",
            "සම්බන්ධතාවයකට සම්බන්ධ විය හැකි Entity වර්ග ගණන (Binary, Ternary, etc.).",
            "සම්බන්ධතාවයකට සම්බන්ධ විය හැකි උපරිම Entities ගණන."
        ],
        correctAnswerIndex: 2,
        explanation: "Connectivity (සම්බන්ධතාව) යන්න බොහෝ විට Cardinality (ගණනීයතාව) සමඟ එකට භාවිතා වේ. එය සම්බන්ධතාවයකට සහභාගී විය හැකි එක් Entity එකක අවස්ථා ගණන (1, Many) නිරූපණය කරයි. 'Connectivity' යනු 'Cardinality' හි තවත් පැතිකඩක් ලෙස සැලකිය හැක."
    },
    {
        questionText: "පද්ධති විශ්ලේෂකයෙකු පාරිභෝගික ඇණවුම් පද්ධතියක් සඳහා ER Diagram එකක් නිර්මාණය කරයි. මෙහිදී 'ඇණවුම' (Order) සහ 'නිෂ්පාදනය' (Product) අතර ඇති සම්බන්ධතාවය වඩාත් නිවැරදිව නිරූපණය කළ හැකි Cardinality මොකක්ද?",
        options: [
            "One-to-One (1:1)",
            "One-to-Many (1:M)",
            "Many-to-One (M:1)",
            "Many-to-Many (M:N)",
            "Zero-to-One (0:1)"
        ],
        correctAnswerIndex: 3,
        explanation: "එක් ඇණවුමකට නිෂ්පාදන කිහිපයක් තිබිය හැකි අතර (උදා: ඇණවුම් අංක 123 හි ලැප්ටොප්, මූසිකය, යතුරු පුවරුව ඇත), එක් නිෂ්පාදනයක් ඇණවුම් කිහිපයකට ඇතුළත් විය හැක (උදා: 'ලැප්ටොප්' නිෂ්පාදනය ඇණවුම් 123, 456, 789 හි ඇත). එබැවින්, 'ඇණවුම' සහ 'නිෂ්පාදනය' අතර සම්බන්ධතාවය 'Many-to-Many' (M:N) වේ."
    },
    {
        questionText: "ER Diagram එකක 'Total Participation' (සම්පූර්ණ සහභාගීත්වය) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "සම්බන්ධතාවයකට සහභාගී වන සියලුම Entities දුර්වල Entities බව.",
            "Entity වර්ගයක සෑම අවස්ථාවක්ම අනිවාර්යයෙන්ම සම්බන්ධතාවයකට සහභාගී විය යුතු බව.",
            "සම්බන්ධතාවයකට සහභාගී වන Entity වර්ගයක අවස්ථා කිහිපයක් පමණක් බව.",
            "සම්බන්ධතාවයකට සහභාගී වන Entity වර්ගයක අවස්ථා කිසිවක් සම්බන්ධ නොවන බව.",
            "සම්බන්ධතාවයකට සහභාගී වන Entity වර්ගයක එක් අවස්ථාවක් පමණක් බව."
        ],
        correctAnswerIndex: 1,
        explanation: "Total Participation (සම්පූර්ණ සහභාගීත්වය) යනු Entity වර්ගයක සෑම අවස්ථාවක්ම (instance) අනිවාර්යයෙන්ම සම්බන්ධතාවයකට සහභාගී විය යුතු බවයි. මෙය ER Diagram එකක Entity සහ Relationship අතර ද්විත්ව රේඛාවක් මගින් නිරූපණය කෙරේ. උදා: 'විද්‍යාලයේ සෑම සිසුවෙකුටම පාඨමාලාවකට ලියාපදිංචි විය යුතුය'."
    },
    {
        questionText: "ER Diagram එකක 'Partial Participation' (අර්ධ සහභාගීත්වය) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "Entity වර්ගයක සෑම අවස්ථාවක්ම අනිවාර්යයෙන්ම සම්බන්ධතාවයකට සහභාගී විය යුතු බව.",
            "සම්බන්ධතාවයකට සහභාගී වන සියලුම Entities දුර්වල Entities බව.",
            "Entity වර්ගයක අවස්ථා කිහිපයක් පමණක් සම්බන්ධතාවයකට සහභාගී විය හැකි බව.",
            "සම්බන්ධතාවයකට සහභාගී වන Entity වර්ගයක අවස්ථා කිසිවක් සම්බන්ධ නොවන බව.",
            "සම්බන්ධතාවයකට සහභාගී වන Entity වර්ගයක එක් අවස්ථාවක් පමණක් බව."
        ],
        correctAnswerIndex: 2,
        explanation: "Partial Participation (අර්ධ සහභාගීත්වය) යනු Entity වර්ගයක අවස්ථා කිහිපයක් පමණක් සම්බන්ධතාවයකට සහභාගී විය හැකි බවයි. මෙය ER Diagram එකක Entity සහ Relationship අතර තනි රේඛාවක් මගින් නිරූපණය කෙරේ. උදා: 'සියලුම ගුරුවරුන්ට පාඨමාලා ඉගැන්වීමට හැකිය, නමුත් සමහර ගුරුවරුන් පාඨමාලා උගන්වන්නේ නැත'."
    },
    {
        questionText: "ER Diagram එකක් නිර්මාණය කිරීමේ පියවරයන් අතර පහත දැක්වෙන ඒවායින් නිවැරදි අනුපිළිවෙල කුමක් විය හැකිද?",
        options: [
            "Relationships හඳුනා ගැනීම, Attributes හඳුනා ගැනීම, Entities හඳුනා ගැනීම.",
            "Attributes හඳුනා ගැනීම, Relationships හඳුනා ගැනීම, Entities හඳුනා ගැනීම.",
            "Entities හඳුනා ගැනීම, Attributes හඳුනා ගැනීම, Relationships හඳුනා ගැනීම, Cardinality නිර්ණය කිරීම.",
            "Cardinality නිර්ණය කිරීම, Entities හඳුනා ගැනීම, Attributes හඳුනා ගැනීම, Relationships හඳුනා ගැනීම.",
            "Entities හඳුනා ගැනීම, Cardinality නිර්ණය කිරීම, Attributes හඳුනා ගැනීම, Relationships හඳුනා ගැනීම."
        ],
        correctAnswerIndex: 2,
        explanation: "ER Diagram එකක් සැලසුම් කිරීමේ සාමාන්‍ය පියවරයන් වන්නේ: 1. Entities හඳුනා ගැනීම, 2. එම Entities වල Attributes හඳුනා ගැනීම, 3. Entities අතර Relationships හඳුනා ගැනීම, 4. එම Relationships වල Cardinality (ගණනීයතාව) සහ Participation Constraints (සහභාගීත්ව සීමා) නිර්ණය කිරීමයි."
    },
    {
        questionText: "Super-type සහ Sub-type Entities භාවිතය Extended ER Diagrams වල ප්‍රධාන වාසියක් වන්නේ ඇයි?",
        options: [
            "ඒවා දත්ත සමුදායට දත්ත ඇතුළත් කිරීමේ වේගය වැඩි කරන නිසා.",
            "ඒවා දත්ත සමුදායේ ආරක්ෂාව වැඩි දියුණු කරන නිසා.",
            "ඒවා දත්ත ආකෘතියේ සංකීර්ණත්වය අඩු කර, දත්තවල ධුරාවලී සම්බන්ධතා වඩාත් කාර්යක්ෂමව නිරූපණය කිරීමට හැකි වන නිසා.",
            "ඒවාට ගණනීයතාවන් (Cardinalities) අර්ථ දැක්විය නොහැකි නිසා.",
            "ඒවාට ප්‍රාථමික යතුරු (Primary Keys) නොමැති නිසා."
        ],
        correctAnswerIndex: 2,
        explanation: "Super-type සහ Sub-type Entities (Generalization/Specialization) භාවිතය Extended ER Diagrams වල ප්‍රධාන වාසියකි. එය දත්ත ආකෘතියේ සංකීර්ණත්වය අඩු කරමින්, පොදු ගුණාංග සහිත Entities Super-type එකක් ලෙසත්, විශේෂිත ගුණාංග සහිත Entities Sub-types ලෙසත් නිරූපණය කිරීමට ඉඩ සලසයි. මෙය දත්තවල ධුරාවලී සම්බන්ධතා වඩාත් කාර්යක්ෂමව සහ පැහැදිලිව නිරූපණය කිරීමට උපකාරී වේ."
    },
    {
        questionText: "ER Diagram එකක 'Composite Attribute' (සංයුක්ත උපලක්ෂණ) යනු කුමක්ද?",
        options: [
            "එය වෙනත් Attributes කිසිවක් නොමැති Attribute එකකි.",
            "එය අද්විතීයව Entity එකක් හඳුනා ගැනීමට භාවිතා කරන Attribute එකකි.",
            "එය තවදුරටත් කුඩා, අර්ථවත් කොටස් වලට බෙදිය නොහැකි Attribute එකකි.",
            "එය තවදුරටත් කුඩා, අර්ථවත් කොටස් වලට බෙදිය හැකි Attribute එකකි.",
            "එය එකවර Entities කිහිපයකට අයත් විය හැකි Attribute එකකි."
        ],
        correctAnswerIndex: 3,
        explanation: "Composite Attribute (සංයුක්ත උපලක්ෂණ) යනු තවදුරටත් කුඩා, අර්ථවත් කොටස් වලට බෙදිය හැකි Attribute එකකි. උදා: 'ලිපිනය' (Address) යන Attribute එක 'ගෙදර අංකය', 'වීදිය', 'නගරය' සහ 'තැපැල් කේතය' වැනි කොටස් වලට බෙදිය හැක."
    },
    {
        questionText: "ER Diagram එකක 'Derived Attribute' (ව්‍යුත්පන්න උපලක්ෂණ) යනු කුමක්ද?",
        options: [
            "එය වෙනත් Attribute එකක් මත රඳා නොපවතින Attribute එකකි.",
            "එය වෙනත් Attributes වලින් ගණනය කළ හැකි හෝ ව්‍යුත්පන්න කළ හැකි Attribute එකකි.",
            "එය දත්ත සමුදායේ සෘජුවම ගබඩා කර ඇති Attribute එකකි.",
            "එය Entity Identifier එකක් ලෙස භාවිතා කරන Attribute එකකි.",
            "එය බහු අගයන් තිබිය හැකි Attribute එකකි."
        ],
        correctAnswerIndex: 1,
        explanation: "Derived Attribute (ව්‍යුත්පන්න උපලක්ෂණ) යනු වෙනත් Attributes වලින් ගණනය කළ හැකි හෝ ව්‍යුත්පන්න කළ හැකි Attribute එකකි. මේවා සාමාන්‍යයෙන් දත්ත සමුදායේ සෘජුවම ගබඩා නොවේ. උදා: 'වයස' (Age) යනු 'උපන් දිනය' (Date of Birth) යන Attribute එකෙන් ව්‍යුත්පන්න කළ හැකි Attribute එකකි."
    },
    {
        questionText: "ER Diagram එකක 'Multivalued Attribute' (බහු අගයන් සහිත උපලක්ෂණ) යනු කුමක්ද?",
        options: [
            "එයට එක් අගයක් පමණක් තිබිය හැකි Attribute එකකි.",
            "එයට විවිධ දත්ත වර්ගවල අගයන් තිබිය හැකි Attribute එකකි.",
            "එයට එකම අවස්ථාවකදී අගයන් එකකට වඩා තිබිය හැකි Attribute එකකි.",
            "එය වෙනත් Attributes වලින් ව්‍යුත්පන්න කළ හැකි Attribute එකකි.",
            "එය Entity Identifier එකක් ලෙස භාවිතා කළ නොහැකි Attribute එකකි."
        ],
        correctAnswerIndex: 2,
        explanation: "Multivalued Attribute (බහු අගයන් සහිත උපලක්ෂණ) යනු එකම අවස්ථාවකදී අගයන් එකකට වඩා තිබිය හැකි Attribute එකකි. උදා: 'දුරකථන අංක' (Phone Numbers) යන Attribute එකට පුද්ගලයෙකුට දුරකථන අංක කිහිපයක් තිබිය හැකි නිසා එය Multivalued Attribute එකක් විය හැක."
    },
    {
        questionText: "ER Diagram එකක 'Ternary Relationship' (ත්‍රික සම්බන්ධතාවය) යනු කුමක්ද?",
        options: [
            "Entities දෙකක් අතර ඇති සම්බන්ධතාවයක්.",
            "Entities හතරක් අතර ඇති සම්බන්ධතාවයක්.",
            "Entities තුනක් අතර ඇති සම්බන්ධතාවයක්.",
            "එකම Entity වර්ගයක් තමන් සමඟම සම්බන්ධ වන සම්බන්ධතාවයක්.",
            "ප්‍රාථමික යතුරු තුනක් අතර ඇති සම්බන්ධතාවයක්."
        ],
        correctAnswerIndex: 2,
        explanation: "Ternary Relationship (ත්‍රික සම්බන්ධතාවය) යනු Entities තුනක් අතර ඇති සම්බන්ධතාවයකි. Binary Relationship (ද්විමය සම්බන්ධතාවය) යනු Entities දෙකක් අතර ඇති සම්බන්ධතාවයකි."
    },
    {
        questionText: "විද්‍යාලයක පන්ති කාමර කළමනාකරණය සඳහා ER Diagram එකක් සැලසුම් කිරීමේදී, 'ගුරුවරයා' (Teacher), 'පාඨමාලාව' (Course) සහ 'පන්ති කාමරය' (Classroom) යන Entities අතර ඇති සම්බන්ධතාවය කුමන ආකාරයේ සම්බන්ධතාවයක් ලෙස නිරූපණය කළ හැකිද?",
        options: [
            "Binary Relationship",
            "Unary Relationship",
            "Ternary Relationship",
            "Recursive Relationship",
            "Reflexive Relationship"
        ],
        correctAnswerIndex: 2,
        explanation: "මෙම අවස්ථාවේදී, 'ගුරුවරයා' (Teacher), 'පාඨමාලාව' (Course) සහ 'පන්ති කාමරය' (Classroom) යන Entities තුනම එක්ව 'උගන්වයි/පවත්වයි' (Teaches/Holds) වැනි පොදු සම්බන්ධතාවයකට සහභාගී වේ. මෙය Ternary Relationship එකක් ලෙස නිරූපණය කළ හැක, එහිදී එක් ගුරුවරයෙක් යම් පන්ති කාමරයක යම් පාඨමාලාවක් උගන්වයි."
    },
    {
        questionText: "ER Diagram එකක 'Generalization' (සාමාන්‍යකරණය) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "විශේෂිත Entity වර්ග කිහිපයක පොදු ලක්ෂණ සහිත, ඉහළ මට්ටමේ Super-type Entity එකක් හඳුනා ගැනීම.",
            "විශාල Entity එකක් කුඩා කොටස් වලට බෙදීම.",
            "Entity එකක් තවත් Entity එකක් සමඟ සම්බන්ධ කිරීම.",
            "දත්ත පුනරාවර්තනය ඉවත් කිරීම.",
            "Weak Entity එකක් Strong Entity එකක් බවට පත් කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Generalization (සාමාන්‍යකරණය) යනු විශේෂිත Entity වර්ග කිහිපයක (Sub-types) පොදු ලක්ෂණ හඳුනා ගෙන, ඒවා එකට ගොනු කර, ඉහළ මට්ටමේ Super-type Entity එකක් නිර්මාණය කිරීමේ ක්‍රියාවලියයි. උදා: 'ගුරුවරයා', 'සිසුවා' යන Entities වලින් 'පුද්ගලයා' යන Super-type Entity එක නිර්මාණය කිරීම."
    },
    {
        questionText: "ER Diagram එකක 'Specialization' (විශේෂීකරණය) යනු කුමක්ද?",
        options: [
            "විවිධ Entities අතර ඇති පොදු සම්බන්ධතා හඳුනා ගැනීම.",
            "ඉහළ මට්ටමේ Super-type Entity එකක් තවදුරටත් වෙන් වූ Sub-type Entities වලට බෙදීමේ ක්‍රියාවලිය.",
            "Weak Entity එකක් Strong Entity එකක් බවට පත් කිරීම.",
            "දත්ත සමුදායට නව දත්ත එකතු කිරීම.",
            "දත්ත සමුදායක දත්ත විශ්ලේෂණය කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "Specialization (විශේෂීකරණය) යනු Generalization ට ප්‍රතිවිරුද්ධ ක්‍රියාවලියයි. එය ඉහළ මට්ටමේ Super-type Entity එකක් තවදුරටත් වෙන් වූ, වඩාත් විශේෂිත ගුණාංග සහිත Sub-type Entities වලට බෙදීමේ ක්‍රියාවලියයි. උදා: 'සේවකයා' යන Super-type Entity එක 'ස්ථිර සේවක', 'තාවකාලික සේවක' ලෙස බෙදීම."
    },
    {
        questionText: "ER Diagram එකක 'Aggregation' (සමූහගත කිරීම) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "එකම Entity වර්ගයේ බහු අවස්ථා එකට ගොනු කිරීම.",
            "සම්බන්ධතාවයක් Entity එකක් ලෙස සැලකීම සහ එය තවත් Entity එකක් සමඟ සම්බන්ධ කිරීම.",
            "Multivalued Attribute එකක් නිර්මාණය කිරීම.",
            "Weak Entity එකක් හඳුනා ගැනීම.",
            "Composite Attribute එකක් නිර්මාණය කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "Aggregation (සමූහගත කිරීම) යනු ER ආකෘතියේ සංකල්පීය මට්ටම ඉහළ නැංවීමේ ක්‍රියාවලියකි. මෙහිදී සම්බන්ධතාවයක් (Relationship) Entity එකක් ලෙස සලකා, එය තවත් Entity එකක් සමඟ හෝ සම්බන්ධතාවයක් සමඟ සම්බන්ධ කළ හැක. මෙය සංකීර්ණ දත්ත ආකෘතිකරණ ගැටළු විසඳීමට උපකාරී වේ."
    },
    {
        questionText: "පාරිභෝගික ඇණවුම් පද්ධතියක ER Diagram එකේ, 'පාරිභෝගිකයා' (Customer) සහ 'ඇණවුම' (Order) යන Entities අතර ඇති සම්බන්ධතාවය කුමන ආකාරයේ Cardinality එකක් විය හැකිද?",
        options: [
            "One-to-One (1:1)",
            "One-to-Many (1:M)",
            "Many-to-One (M:1)",
            "Many-to-Many (M:N)",
            "Zero-to-Zero (0:0)"
        ],
        correctAnswerIndex: 1,
        explanation: "සාමාන්‍යයෙන්, එක් පාරිභෝගිකයෙකුට ඇණවුම් කිහිපයක් ලබා දිය හැකි නමුත්, එක් ඇණවුමක් ලබා දෙන්නේ එක් පාරිභෝගිකයෙකු පමණි. එබැවින්, 'පාරිභෝගිකයා' සහ 'ඇණවුම' අතර සම්බන්ධතාවය 'One-to-Many' (1:M) ගණනීයතාවයකින් නිරූපණය වේ. (Customer HAS_MANY Orders)"
    },
    {
        questionText: "ER Diagram එකක 'Mandatory Participation' (අනිවාර්ය සහභාගීත්වය) යන්නට සමාන අර්ථයක් දෙන තවත් වදනක් කුමක්ද?",
        options: [
            "Optional Participation",
            "Partial Participation",
            "Total Participation",
            "Recursive Participation",
            "Weak Participation"
        ],
        correctAnswerIndex: 2,
        explanation: "Mandatory Participation (අනිවාර්ය සහභාගීත්වය) යන්නෙන් අදහස් වන්නේ Entity වර්ගයක සෑම අවස්ථාවක්ම අනිවාර්යයෙන්ම සම්බන්ධතාවයකට සහභාගී විය යුතු බවයි. මෙය Total Participation (සම්පූර්ණ සහභාගීත්වය) ලෙසද හැඳින්වේ."
    },
    {
        questionText: "ER Diagram එකක් මගින් නිරූපණය කරන ලද සංකල්පීය දත්ත ආකෘතියක ප්‍රධාන වාසිය කුමක්ද?",
        options: [
            "දත්ත ගබඩා කිරීමේ භෞතික ක්‍රියාවලිය විස්තර කිරීම.",
            "තාක්ෂණික නොවන පරිශීලකයින්ට පවා දත්ත සමුදා ව්‍යුහය පහසුවෙන් අවබෝධ කර ගැනීමට උපකාර කිරීම.",
            "වැඩසටහන් කේතය ස්වයංක්‍රීයව ජනනය කිරීම.",
            "දත්ත සමුදායට ඇතුළත් කළ හැකි දත්ත ප්‍රමාණය සීමා කිරීම.",
            "දත්ත සමුදායේ දත්ත වර්ග පමණක් නිරූපණය කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "ER Diagram එකක ප්‍රධාන වාසිය වන්නේ එය දත්ත සමුදායේ සංකල්පීය ව්‍යුහය දෘශ්‍යමය වශයෙන් නිරූපණය කරන බැවින්, තාක්ෂණික නොවන පරිශීලකයින්ට පවා පද්ධතියේ දත්ත සහ ඒවා අතර ඇති සම්බන්ධතා පහසුවෙන් අවබෝධ කර ගැනීමට උපකාරී වීමයි. මෙය දත්ත සමුදා නිර්මාණ ක්‍රියාවලියේදී පාර්ශවකරුවන් අතර සන්නිවේදනය වැඩි දියුණු කරයි."
    },
    {
        questionText: "විද්‍යාලයක ශිෂ්‍ය තොරතුරු පද්ධතියක් සැලසුම් කිරීමේදී, 'සිසුවා' (Student) Entity හි 'උපන්දිනය' (DateOfBirth) Attribute එකෙන් 'වයස' (Age) Attribute එක ව්‍යුත්පන්න කළ හැකි විට, 'වයස' (Age) කුමන ආකාරයේ Attribute එකක් ලෙස සැලකේද?",
        options: [
            "Simple Attribute",
            "Composite Attribute",
            "Multivalued Attribute",
            "Derived Attribute",
            "Key Attribute"
        ],
        correctAnswerIndex: 3,
        explanation: "Derived Attribute (ව්‍යුත්පන්න උපලක්ෂණ) යනු වෙනත් Attributes වලින් ගණනය කළ හැකි හෝ ව්‍යුත්පන්න කළ හැකි Attribute එකකි. 'වයස' (Age) යනු 'උපන්දිනය' (DateOfBirth) යන Attribute එකෙන් වර්තමාන දිනය සමඟ ගණනය කළ හැකි අගයකි. මේවා සාමාන්‍යයෙන් දත්ත සමුදායේ සෘජුවම ගබඩා නොවේ."
    },
    {
        questionText: "ER Diagram එකක 'Weak Entity' එකක් නිරූපණය කිරීමට භාවිතා කරන සංකේතය කුමක්ද?",
        options: [
            "තනි සෘජුකෝණාස්‍රයක්.",
            "ද්විත්ව දියමන්ති හැඩයක්.",
            "ද්විත්ව සෘජුකෝණාස්‍රයක්.",
            "තනි දියමන්ති හැඩයක්.",
            "ඕවල් හැඩයක් යටින් ඉරක් සහිතව."
        ],
        correctAnswerIndex: 2,
        explanation: "Weak Entity (දුර්වල භූතාර්ථය) එකක් නිරූපණය කිරීමට ER Diagram එකක ද්විත්ව සෘජුකෝණාස්‍රයක් (Double Rectangle) භාවිතා කරයි. එමෙන්ම, Weak Entity එක සහ Identifying Relationship එක අතර සම්බන්ධතාවයද ද්විත්ව දියමන්ති හැඩයකින් නිරූපණය වේ."
    },
    {
        questionText: "ER Diagram එකක 'Key Attribute' යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "එය අද්විතීයව Entity එකක් හඳුනා ගැනීමට භාවිතා කරන Attribute එකකි.",
            "එය බහු අගයන් තිබිය හැකි Attribute එකකි.",
            "එය තවදුරටත් කුඩා කොටස් වලට බෙදිය හැකි Attribute එකකි.",
            "එය වෙනත් Attributes වලින් ව්‍යුත්පන්න කළ හැකි Attribute එකකි.",
            "එය කිසිදු Entity එකකට සම්බන්ධ නැති Attribute එකකි."
        ],
        correctAnswerIndex: 0,
        explanation: "Key Attribute (යතුරු උපලක්ෂණ) යනු Entity එකක් තුළ ඇති උපලක්ෂණ සමූහයක් හෝ තනි උපලක්ෂණයක් වන අතර, එය එම Entity වර්ගයේ සෑම අවස්ථාවක්ම (instance) අද්විතීයව හඳුනා ගැනීමට භාවිතා කරයි. මෙය Relational Model හි Primary Key එකට සමාන වේ. ER Diagram එකක Key Attribute එකක් සාමාන්‍යයෙන් යටින් ඉරක් ඇඳීමෙන් (underline) නිරූපණය කරයි."
    },
    {
        questionText: "ER Diagram එකක් 'Conceptual Schema' ලෙස හැඳින්වීමට හේතුව කුමක්ද?",
        options: [
            "එය දත්ත සමුදායේ භෞතික ගබඩා කිරීමේ විස්තර ඇතුළත් කරන නිසා.",
            "එය දත්ත සමුදායේ ක්‍රියාත්මක කිරීමේ භාෂාව තෝරා ගන්නා නිසා.",
            "එය සැබෑ ලෝකයේ සංකල්ප සහ ඒවා අතර ඇති සම්බන්ධතා දෘශ්‍යමය වශයෙන් නිරූපණය කරන නිසා, තාක්ෂණික විස්තරවලින් තොරව.",
            "එය පරිගණක පද්ධතියක දෘඪාංග ව්‍යුහය පමණක් නිරූපණය කරන නිසා.",
            "එය දත්ත සමුදායේ දත්ත වල ප්‍රමාණය පමණක් නිරූපණය කරන නිසා."
        ],
        correctAnswerIndex: 2,
        explanation: "ER Diagram එකක් 'Conceptual Schema' ලෙස හැඳින්වෙන්නේ එය සැබෑ ලෝකයේ සංකල්ප (Entities), ඒවායේ ගුණාංග (Attributes) සහ එම සංකල්ප අතර ඇති සම්බන්ධතා (Relationships) තාක්ෂණික ක්‍රියාත්මක කිරීමේ විස්තර (උදා: දත්ත වර්ග, ගබඩා කිරීමේ ක්‍රම) වලින් තොරව, ඉහළ මට්ටමින් සහ දෘශ්‍යමය වශයෙන් නිරූපණය කරන බැවිනි."
    },
    {
        questionText: "ER Diagram එකක 'Degree of Relationship' යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "සම්බන්ධතාවයකට සහභාගී වන උපරිම Entities ගණන.",
            "සම්බන්ධතාවයකට සහභාගී වන Entities ගණන.",
            "සම්බන්ධතාවයකට සහභාගී වන Entities හි Attributes ගණන.",
            "සම්බන්ධතාවයකට සහභාගී වන Entity වර්ගයක අවස්ථා ගණන.",
            "සම්බන්ධතාවයකට සහභාගී වන අවම Entities ගණන."
        ],
        correctAnswerIndex: 1,
        explanation: "Degree of Relationship (සම්බන්ධතාවයේ මට්ටම) යනු සම්බන්ධතාවයකට සහභාගී වන Entities ගණනයි. Binary (2 Entities), Ternary (3 Entities), n-ary (n Entities) ලෙස විය හැක. Unary/Recursive Relationship (1 Entity) ද පොදු වර්ගයකි."
    },
    {
        questionText: "ER Diagram එකක 'Role' යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "Entity එකක් දත්ත සමුදාය තුළ ඉටු කරන කාර්යය.",
            "සම්බන්ධතාවයකට සහභාගී වන විට Entity එකක් ඉටු කරන භූමිකාව.",
            "Attribute එකක දත්ත වර්ගය.",
            "දත්ත සමුදා පරිපාලකගේ වගකීම.",
            "Weak Entity එකක ප්‍රධාන Attribute එක."
        ],
        correctAnswerIndex: 1,
        explanation: "ER Diagram එකක Role (භූමිකාව) යනු සම්බන්ධතාවයකට සහභාගී වන විට Entity එකක් ඉටු කරන භූමිකාවයි. විශේෂයෙන් Recursive Relationship වලදී මෙය වැදගත් වේ. උදා: 'සේවකයා' තවත් 'සේවකයෙකුට' 'කළමනාකරණය කරයි' යන සම්බන්ධතාවයේදී, එක් 'සේවකයෙකු' 'කළමනාකරු'ගේ භූමිකාවත්, අනෙක් 'සේවකයා' 'කළමනාකරණය වන සේවකයා'ගේ භූමිකාවත් ඉටු කරයි."
    },
    {
        questionText: "ER Diagram එකක් මගින් දත්ත සමුදායක් නිර්මාණය කිරීමේදී 'Business Rules' (ව්‍යාපාරික නීති) නිරූපණය කරන්නේ කෙසේද?",
        options: [
            "ඒවා ER Diagram එකට ඇතුළත් නොවේ.",
            "Entities, Attributes, Relationships සහ Cardinality හරහා ව්‍යාපාරික නීති දෘශ්‍යමය වශයෙන් නිරූපණය වේ.",
            "ව්‍යාපාරික නීති වෙනම පෙළ ලේඛනයක ගබඩා වේ.",
            "ඒවා දත්ත සමුදා කේතය තුළ පමණක් අර්ථ දැක්වේ.",
            "ව්‍යාපාරික නීති ER Diagram හි කිසිදු අංගයකින් නිරූපණය කළ නොහැක."
        ],
        correctAnswerIndex: 1,
        explanation: "ER Diagram එකක් සැලසුම් කිරීමේදී, Entities, Attributes, Relationships, Cardinality (උදා: එක් සිසුවෙකුට පාඨමාලා කිහිපයකට ලියාපදිංචි විය හැක - One-to-Many) සහ Participation Constraints (උදා: සෑම පාඨමාලාවකටම අවම වශයෙන් එක් ගුරුවරයෙක් සිටිය යුතුය) වැනි සංරචක හරහා ව්‍යාපාරික නීති දෘශ්‍යමය වශයෙන් නිරූපණය කිරීමට හැකි වේ. මෙය දත්ත සමුදාය ව්‍යාපාරික අවශ්‍යතා සමඟ ගැළපෙන බව සහතික කිරීමට උපකාරී වේ."
    },

    // 8.3 දත්ත සමුදායක තාර්කික රූපාත්මක සටහන සැලසුම් කරයි
    {
        questionText: "දත්ත සමුදායක තාර්කික රූපාත්මක සටහන (Logical Schema) යනු කුමක්ද?",
        options: [
            "දත්ත සමුදායේ භෞතික ගබඩා කිරීමේ ව්‍යුහය විස්තර කිරීම.",
            "දත්ත සමුදායේ ඉහළ මට්ටමේ, සංකල්පීය නිරූපණය.",
            "දත්ත සමුදාය කළමනාකරණ පද්ධතියක් (DBMS) විසින් දත්ත ගබඩා කරන ආකාරය විස්තර කරන, දත්ත ආකෘතිය මත පදනම් වූ දත්තවල ව්‍යුහය.",
            "දත්ත සමුදායේ දත්තවල සත්‍ය අගයන්.",
            "දත්ත සමුදාය වෙත ප්‍රවේශ වීමට භාවිතා කරන පරිශීලක අතුරුමුහුණත."
        ],
        correctAnswerIndex: 2,
        explanation: "තාර්කික රූපාත්මක සටහන (Logical Schema) යනු දත්ත සමුදායක් තුළ දත්ත සංවිධානය කර ගබඩා කරන ආකාරය පිළිබඳ දත්ත ආකෘතිය මත පදනම් වූ විස්තරයකි. මෙය සංකල්පීය රූපාත්මක සටහනකින් (ER Diagram) පසුව නිර්මාණය වන අතර, Relational Model හි වගු, තීරු, දත්ත වර්ග සහ යතුරු වැනි විස්තර ඇතුළත් වේ. එය භෞතික ගබඩා කිරීමේ විස්තර ඇතුළත් නොකරයි."
    },
    {
        questionText: "සම්බන්ධතා රූපාත්මක සටහන (Relational Schema) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "දත්ත සමුදායක භෞතික ගබඩා කිරීමේ ව්‍යුහය.",
            "දත්ත සමුදායක ගබඩා කර ඇති දත්තවල සත්‍ය අගයන්.",
            "දත්ත සමුදායක වගු (relations), ඒවායේ තීරු (attributes), දත්ත වර්ග (data types) සහ යතුරු (keys) ඇතුළත් ව්‍යුහය පිළිබඳ විස්තරය.",
            "දත්ත සමුදාය වෙත ප්‍රවේශ වීමට භාවිතා කරන විමසුම් භාෂාව.",
            "දත්ත සමුදායේ සංකල්පීය නිරූපණය."
        ],
        correctAnswerIndex: 2,
        explanation: "සම්බන්ධතා රූපාත්මක සටහන (Relational Schema) යනු Relational Model හි දත්ත සමුදායක වගු (relations), ඒවායේ තීරු (attributes), එම තීරු වල දත්ත වර්ග (data types) සහ එම වගු වල ඇති යතුරු (keys) ඇතුළත් ව්‍යුහය පිළිබඳ විස්තරයයි. එය වගුවක ව්‍යුහය, එනම් එහි නම, තීරු, සහ ඒවායේ ගුණාංග විස්තර කරයි."
    },
    {
        questionText: "සම්බන්ධතා නිදර්ශන (Relational Instances) යනු කුමක්ද?",
        options: [
            "Relational Schema එකක ව්‍යුහය.",
            "දත්ත සමුදායක වගුවල තීරු වල නම්.",
            "Relational Schema එකකින් නිර්වචනය කරන ලද වගු වල නිශ්චිත මොහොතක පවතින සත්‍ය දත්ත හෝ පේළි (tuples/records) එකතුව.",
            "දත්ත සමුදායක යතුරු වර්ග.",
            "දත්ත සමුදා කළමනාකරණ පද්ධතියක් (DBMS)."
        ],
        correctAnswerIndex: 2,
        explanation: "සම්බන්ධතා නිදර්ශන (Relational Instances) යනු Relational Schema එකකින් නිර්වචනය කරන ලද වගු වල නිශ්චිත මොහොතක පවතින සත්‍ය දත්ත හෝ පේළි (tuples/records) එකතුවයි. Schema එක යනු වගුවේ ව්‍යුහය වන අතර, Instance එක යනු එම ව්‍යුහය තුළ ඇති සත්‍ය දත්තයි."
    },
    {
        questionText: "නිෂ්පාදක යතුර (Candidate Key) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "වගුවක ඇති ඕනෑම තීරුවක්.",
            "වගුවක සෑම පේළියක්ම අද්විතීයව හඳුනා ගත හැකි තනි තීරුවක් හෝ තීරු සමූහයක්.",
            "වගුවක ඇති ප්‍රාථමික යතුර (Primary Key) පමණක්.",
            "ආගන්තුක යතුර (Foreign Key) ලෙස භාවිතා කරන තීරුවක්.",
            "වගුවක දත්ත වර්ගය තීරණය කරන තීරුවක්."
        ],
        correctAnswerIndex: 1,
        explanation: "නිෂ්පාදක යතුර (Candidate Key) යනු වගුවක සෑම පේළියක්ම අද්විතීයව (Uniquely) හඳුනා ගත හැකි තනි තීරුවක් හෝ තීරු සමූහයකි. එයට අනවශ්‍ය (Redundant) තීරු අඩංගු නොවිය යුතුය. වගුවකට නිෂ්පාදක යතුරු එකකට වඩා තිබිය හැක."
    },
    {
        questionText: "ප්‍රාථමික යතුර (Primary Key) යනු කුමක්ද?",
        options: [
            "වගුවක ඇති ඕනෑම තීරු සමූහයක්.",
            "වගුවක සෑම පේළියක්ම අද්විතීයව හඳුනා ගන්නා, තෝරාගත් එක් නිෂ්පාදක යතුරක්.",
            "වෙනත් වගු සමඟ සම්බන්ධතා ඇති කර ගැනීමට භාවිතා කරන යතුරක්.",
            "සැමවිටම සංඛ්‍යාත්මක අගයක් ගත යුතු යතුරක්.",
            "කිසිවිටෙකත් Null අගයක් ගත නොහැකි යතුරක්."
        ],
        correctAnswerIndex: 1,
        explanation: "ප්‍රාථමික යතුර (Primary Key) යනු වගුවක ඇති නිෂ්පාදක යතුරු කිහිපයකින්, එම වගුවක සෑම පේළියක්ම අද්විතීයව හඳුනා ගැනීම සඳහා තෝරාගත් එක් නිෂ්පාදක යතුරකි. එය අද්විතීය විය යුතු අතර, Null අගයන් දැරිය නොහැක (NOT NULL)."
    },
    {
        questionText: "විකල්ප යතුර (Alternate Key) යනු කුමක්ද?",
        options: [
            "වගුවක Primary Key ලෙස තෝරාගත් යතුර.",
            "වගුවක Primary Key ලෙස තෝරා නොගත්, නමුත් නිෂ්පාදක යතුරක් (Candidate Key) ලෙස පවතින යතුරක්.",
            "වෙනත් වගුවක Primary Key එකට යොමු වන යතුරක්.",
            "වගුවක දත්ත සංකේතනය කිරීමට භාවිතා කරන යතුරක්.",
            "වගුවක ඇති ඕනෑම තීරුවක්."
        ],
        correctAnswerIndex: 1,
        explanation: "විකල්ප යතුර (Alternate Key) යනු වගුවකට නිෂ්පාදක යතුරු කිහිපයක් තිබෙන විට, ඒවා අතරින් Primary Key එක ලෙස තෝරා නොගත්, නමුත් තවමත් නිෂ්පාදක යතුරක් ලෙස පවතින යතුරකි. එනම්, එයට ද වගුවක සෑම පේළියක්ම අද්විතීයව හඳුනා ගැනීමේ හැකියාව ඇත."
    },
    {
        questionText: "ආගන්තුක යතුර (Foreign Key) යනු කුමක්ද?",
        options: [
            "වගුවක සෑම පේළියක්ම අද්විතීයව හඳුනා ගන්නා යතුරක්.",
            "තමන්ගේම වගුවේ Primary Key එකක් ලෙස ක්‍රියා කරන යතුරක්.",
            "එක් වගුවක ඇති තීරුවක් හෝ තීරු සමූහයක්, එය වෙනත් වගුවක Primary Key එකට යොමු වන විට, එම වගු දෙක අතර සම්බන්ධතාවයක් ඇති කරයි.",
            "සැමවිටම Null අගයක් ගත හැකි යතුරක්.",
            "වගුවක ඇති ඕනෑම තීරුවක්."
        ],
        correctAnswerIndex: 2,
        explanation: "ආගන්තුක යතුර (Foreign Key) යනු එක් වගුවක ඇති තීරුවක් හෝ තීරු සමූහයකි, එය වෙනත් වගුවක (හෝ එම වගුවේම) Primary Key එකට යොමු වේ. Foreign Key එක මගින් Relational Databases වල වගු අතර සම්බන්ධතා ඇති කරයි. Foreign Key එකට Null අගයන් දැරිය හැක."
    },
    {
        questionText: "වසම (Domain) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "දත්ත සමුදායක ඇති වගු ගණන.",
            "විමසුම් භාෂාවකින් දත්ත ලබා ගන්නා ප්‍රමාණය.",
            "Attribute එකකට ගත හැකි වලංගු අගයන් සමූහය.",
            "දත්ත සමුදායක ගබඩා කර ඇති දත්තවල සත්‍ය අගයන්.",
            "දත්ත සමුදායක ගබඩා කළ හැකි උපරිම දත්ත ප්‍රමාණය."
        ],
        correctAnswerIndex: 2,
        explanation: "වසම (Domain) යනු Attribute එකකට ගත හැකි වලංගු අගයන් සමූහයයි. එය Attribute එකකට ගබඩා කළ හැකි දත්ත වර්ගය (උදා: integer, string, date), එහි උපරිම දිග සහ වෙනත් සීමාවන් (උදා: 0-100 අතර අගයක්) නිර්ණය කරයි."
    },
    {
        questionText: "ප්‍රාථමික යතුරකට (Primary Key) තිබිය යුතු අනිවාර්ය ලක්ෂණ මොනවාද?",
        options: [
            "එය Null අගයන් දැරිය හැකි නමුත් අද්විතීය විය යුතුය.",
            "එය අද්විතීය විය යුතු අතර, Null අගයන් දැරිය නොහැක.",
            "එය වෙනත් වගු සමඟ සම්බන්ධතා ඇති කර ගැනීමට භාවිතා කළ යුතුය.",
            "එය සැමවිටම සංඛ්‍යාත්මක අගයක් විය යුතුය.",
            "එය තවදුරටත් කුඩා කොටස් වලට බෙදිය යුතුය."
        ],
        correctAnswerIndex: 1,
        explanation: "Primary Key එකක අනිවාර්ය ලක්ෂණ දෙකක් ඇත: 1. එය අද්විතීය විය යුතුය (Unique) - වගුවේ කිසිදු පේළි දෙකකට එකම Primary Key අගය තිබිය නොහැක. 2. එය Null අගයන් දැරිය නොහැක (NOT NULL) - එයට සෑම විටම අගයක් තිබිය යුතුය."
    },
    {
        questionText: "පහත සඳහන් ඒවායින් Relational Schema එකක කොටසක් නොවන කරුණ කුමක්ද?",
        options: [
            "වගුවේ නම.",
            "තීරු වල නම්.",
            "තීරු වල දත්ත වර්ග.",
            "වගු වල ගබඩා කර ඇති සත්‍ය දත්ත.",
            "Primary Keys සහ Foreign Keys."
        ],
        correctAnswerIndex: 3,
        explanation: "Relational Schema එකක් යනු වගුවේ ව්‍යුහය පිළිබඳ විස්තරයයි (වගුවේ නම, තීරු, දත්ත වර්ග, යතුරු). වගු වල ගබඩා කර ඇති සත්‍ය දත්ත Relational Instances ලෙස හැඳින්වේ, ඒවා Schema එකේ කොටසක් නොවේ."
    },
    {
        questionText: "දත්ත සමුදායක තාර්කික රූපාත්මක සටහනක් නිර්මාණය කිරීමේදී, 'Referential Integrity' (ආගන්තුක අඛණ්ඩතාව) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "සියලුම දත්ත Null අගයන් නොමැති බව.",
            "වගුවක ඇති සියලුම Primary Keys අද්විතීය බව.",
            "ආගන්තුක යතුරක (Foreign Key) අගයක් තිබේ නම්, එය යොමු වන ප්‍රාථමික යතුර (Primary Key) අදාළ වගුවේ තිබිය යුතු බව.",
            "දත්ත සමුදාය වෙත ප්‍රවේශ වීමට පරිශීලක අවසරයන් නිවැරදි බව.",
            "දත්ත සමුදායේ ගබඩා කර ඇති සියලුම දත්ත අකුරු වලින් සමන්විත බව."
        ],
        correctAnswerIndex: 2,
        explanation: "Referential Integrity (ආගන්තුක අඛණ්ඩතාව) යනු Relational Databases වල වැදගත් සංකල්පයකි. එයින් අදහස් වන්නේ ආගන්තුක යතුරක (Foreign Key) අගයක් තිබේ නම්, එය අනිවාර්යයෙන්ම යොමු වන Primary Key අදාළ වගුවේ තිබිය යුතු බවයි. මෙය වගු අතර සම්බන්ධතා වල අඛණ්ඩතාව සහතික කරයි."
    },
    {
        questionText: "පහත සඳහන් ඒවායින් Relational Database එකක 'Tuple' (ටුපල්) ලෙස හැඳින්වෙන්නේ කුමක්ද?",
        options: [
            "වගුවක තීරුවක නම.",
            "වගුවක දත්ත වර්ගය.",
            "වගුවක ඇති තනි පේළියක් (record).",
            "වගුවක ඇති යතුරු වර්ගය.",
            "වගුවක ඇති සියලුම තීරු වල එකතුව."
        ],
        correctAnswerIndex: 2,
        explanation: "Relational Database එකක 'Tuple' (ටුපල්) යනු වගුවක ඇති තනි පේළියක් (record) වේ. එය එක් Entity එකක (හෝ Entity Instance එකක) සියලුම Attributes වල අගයන් එකතුවකි."
    },
    {
        questionText: "Relational Database එකක 'Attribute' (ඇට්‍රිබියුට්) යනු කුමක්ද?",
        options: [
            "වගුවක ඇති පේළියක්.",
            "වගුවක ඇති තීරුවක් (column).",
            "වගුවක Primary Key එක.",
            "වගු අතර ඇති සම්බන්ධතාවයක්.",
            "දත්ත සමුදායේ නම."
        ],
        correctAnswerIndex: 1,
        explanation: "Relational Database එකක 'Attribute' (ඇට්‍රිබියුට්) යනු වගුවක ඇති තීරුවක් (column) වේ. එය Entity එකක විශේෂිත ගුණාංගයක් නිරූපණය කරයි."
    },
    {
        questionText: "පහත දැක්වෙන තීරු සමූහයන් අතුරින් 'Candidate Key' එකක් ලෙස සුදුසු නොවන කරුණ කුමක්ද? (වගුව: සිසුවා (Student) - තීරු: StudentID, NIC, Name, Address, ContactNo)",
        options: [
            "StudentID",
            "NIC",
            "StudentID, Name",
            "ContactNo",
            "StudentID, ContactNo"
        ],
        correctAnswerIndex: 3,
        explanation: "Candidate Key එකක් අද්විතීයව සෑම පේළියක්ම හඳුනාගත හැකි විය යුතු අතර, Redundant (අනවශ්‍ය) තීරු නොතිබිය යුතුය. StudentID සහ NIC යනු සිසුවෙකු අද්විතීයව හඳුනාගත හැකි Candidate Keys වේ. StudentID, Name හෝ StudentID, ContactNo වැනි සංයුක්ත යතුරු ද Candidate Keys විය හැක. නමුත් ContactNo පමණක් Candidate Key එකක් විය නොහැක, මන්ද සිසුන් කිහිප දෙනෙකුට එකම දුරකථන අංකයක් (උදා: නිවසේ දුරකථන අංකය) තිබිය හැකි අතර, එය අද්විතීය නොවිය හැක."
    },
    {
        questionText: "දත්ත සමුදායක තාර්කික රූපාත්මක සටහන (Logical Schema) සැලසුම් කිරීමේදී, 'Normalization' (සාමාන්‍යකරණය) ක්‍රියාවලියේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "දත්ත පුනරාවර්තනය (Data Redundancy) වැඩි කිරීම.",
            "දත්ත අසංගතතාව (Data Inconsistency) වැඩි කිරීම.",
            "දත්ත සමුදා ව්‍යුහය සරල කිරීම සහ දත්ත පුනරාවර්තනය, දත්ත අසංගතතාව සහ අසාමාන්‍යතා (Anomalies) අවම කිරීම.",
            "දත්ත වෙත ප්‍රවේශ වීමේ වේගය අඩු කිරීම.",
            "වගු අතර සම්බන්ධතා ඉවත් කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "Normalization (සාමාන්‍යකරණය) යනු දත්ත සමුදායක තාර්කික සැලසුම වැඩි දියුණු කිරීමේ ක්‍රියාවලියකි. එහි ප්‍රධාන අරමුණ වන්නේ දත්ත පුනරාවර්තනය අවම කිරීම, දත්ත අඛණ්ඩතාව වැඩි දියුණු කිරීම සහ දත්ත යාවත්කාලීන කිරීම, ඇතුළත් කිරීම හෝ මකා දැමීමේදී ඇතිවිය හැකි අසාමාන්‍යතා (Insertion, Deletion, Update Anomalies) වළක්වා ගැනීමයි."
    },
    {
        questionText: "Relational Database එකක 'Schema' යනු කුමක්ද?",
        options: [
            "දත්ත සමුදායේ ගබඩා කර ඇති සත්‍ය දත්ත.",
            "දත්ත සමුදායේ භෞතික ගබඩා කිරීමේ විස්තර.",
            "දත්ත සමුදායේ ව්‍යුහය, එනම් වගු, තීරු, දත්ත වර්ග සහ සීමාවන් (constraints) පිළිබඳ විස්තරය.",
            "දත්ත සමුදාය කළමනාකරණය සඳහා භාවිතා කරන පරිශීලක අතුරුමුහුණත.",
            "දත්ත සමුදාය වෙත ප්‍රවේශ වීමට භාවිතා කරන විමසුම්."
        ],
        correctAnswerIndex: 2,
        explanation: "Relational Database එකක 'Schema' යනු දත්ත සමුදායේ ව්‍යුහය පිළිබඳ විස්තරයයි. එය වගු (relations), ඒවායේ තීරු (attributes), දත්ත වර්ග (data types) සහ වගු අතර ඇති යතුරු (keys) සහ අනෙකුත් සීමාවන් (constraints) පිළිබඳ විස්තරයකි."
    },
    {
        questionText: "දත්ත සමුදායක තාර්කික රූපාත්මක සටහනට 'Null Values' (ශුන්‍ය අගයන්) ඇතුළත් විය හැක්කේ කුමන අවස්ථාවලදීද?",
        options: [
            "Primary Key එකක් සඳහා අගයක් නොමැති විට.",
            "Foreign Key එකක් යොමු වන Primary Key එකක් නොමැති විට.",
            "Attribute එකක් සඳහා අගයක් නොමැති විට සහ එය Null අගයන් දැරීමට ඉඩ දී ඇති විට.",
            "Numeric Data Type එකකට පමණක් Null අගයන් දැරිය හැකි විට.",
            "String Data Type එකකට පමණක් Null අගයන් දැරිය හැකි විට."
        ],
        correctAnswerIndex: 2,
        explanation: "Null Value (ශුන්‍ය අගය) යනු Attribute එකක් සඳහා අගයක් නොමැති බව හෝ නොදන්නා බව නිරූපණය කිරීමයි. Primary Key එකකට Null අගයන් දැරිය නොහැක. Foreign Key එකකට Null අගයන් දැරිය හැකි වුවද, Referential Integrity පවත්වා ගැනීම සඳහා එය යොමු වන Primary Key එක තිබිය යුතුය. Attribute එකක් Null අගයන් දැරීමට ඉඩ දී ඇත්නම්, එවැනි අවස්ථාවලදී Null අගයන් ඇතුළත් කළ හැක."
    },
    {
        questionText: "දත්ත සමුදායක 'Data Dictionary' (දත්ත ශබ්දකෝෂය) යනු කුමක්ද?",
        options: [
            "දත්ත සමුදායේ ගබඩා කර ඇති සත්‍ය දත්තවල පිටපතක්.",
            "දත්ත සමුදායේ ඇති සියලුම වගු, තීරු, දත්ත වර්ග, යතුරු සහ සීමාවන් පිළිබඳ පද්ධතිමය වශයෙන් ගබඩා කර ඇති විස්තරය.",
            "දත්ත සමුදායේ දත්ත විශ්ලේෂණය කිරීම සඳහා භාවිතා කරන මෙවලමක්.",
            "දත්ත සමුදාය පරිශීලක අතුරුමුහුණතේ කොටසක්.",
            "දත්ත සමුදායේ ආරක්ෂක ප්‍රතිපත්ති අඩංගු ගොනුවක්."
        ],
        correctAnswerIndex: 1,
        explanation: "Data Dictionary (දත්ත ශබ්දකෝෂය) යනු දත්ත සමුදායේ ඇති සියලුම වගු, තීරු, දත්ත වර්ග, යතුරු, සීමාවන් සහ සම්බන්ධතා පිළිබඳ පද්ධතිමය වශයෙන් ගබඩා කර ඇති විස්තරයකි. මෙය 'Metadata' (දත්ත පිළිබඳ දත්ත) අඩංගු වන අතර, දත්ත සමුදාය කළමනාකරණය සහ නඩත්තුව සඳහා අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "ප්‍රාථමික යතුරක් (Primary Key) තෝරා ගැනීමේදී සැලකිලිමත් විය යුතු කරුණු අතුරින් වැදගත්ම දේ කුමක්ද?",
        options: [
            "එය හැකි තරම් විශාල විය යුතුය.",
            "එය Null අගයන් දැරීමට ඉඩ දිය යුතුය.",
            "එය අද්විතීය (Unique) විය යුතු අතර, කිසිවිටෙකත් Null අගයන් නොදැරිය යුතුය.",
            "එය අනාගතයේදී වෙනස් විය හැකි අගයක් විය යුතුය.",
            "එය සංකීර්ණ දත්ත වර්ගයක් විය යුතුය."
        ],
        correctAnswerIndex: 2,
        explanation: "Primary Key එකක් තෝරා ගැනීමේදී එහි ප්‍රධානම ලක්ෂණය වන්නේ එය අද්විතීය (Unique) විය යුතු අතර, කිසිවිටෙකත් Null අගයන් නොදැරිය යුතු බවයි. එනම්, එයට සෑම විටම අගයක් තිබිය යුතු අතර, එම අගය වගුවේ ඇති වෙනත් කිසිදු පේළියකට නොතිබිය යුතුය. මෙය වගුවක සෑම පේළියක්ම නිවැරදිව හඳුනා ගැනීමට අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "Foreign Key එකක ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "වගුවක සෑම පේළියක්ම අද්විතීයව හඳුනා ගැනීම.",
            "වගුවක ඇති දත්ත වර්ගය තීරණය කිරීම.",
            "Relational Database එකක වගු දෙකක් හෝ වැඩි ගණනක් අතර සම්බන්ධතා ඇති කිරීම.",
            "දත්ත සමුදායේ දත්ත ආරක්ෂා කිරීම.",
            "වගුවක ඇති දත්ත පුනරාවර්තනය ඉවත් කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "Foreign Key එකක ප්‍රධාන අරමුණ වන්නේ Relational Database එකක වගු දෙකක් හෝ වැඩි ගණනක් අතර සම්බන්ධතා ඇති කිරීමයි. එය එක් වගුවක ඇති තීරුවක් හෝ තීරු සමූහයක්, වෙනත් වගුවක Primary Key එකට යොමු කිරීමෙන් මෙම සම්බන්ධතාවය ගොඩනඟයි."
    },
    {
        questionText: "යම් දත්ත සමුදායක් සඳහා නිර්මාණය කරන ලද තාර්කික රූපාත්මක සටහන (Logical Schema), එහි සංකල්පීය රූපාත්මක සටහනට (Conceptual Schema) වඩා විස්තරාත්මක වන්නේ ඇයි?",
        options: [
            "තාර්කික රූපාත්මක සටහනට Entities සහ Relationships ඇතුළත් නොවන නිසා.",
            "සංකල්පීය රූපාත්මක සටහනට දත්ත වර්ග ඇතුළත් වන නිසා.",
            "තාර්කික රූපාත්මක සටහනට දත්ත ආකෘතියට අදාළ (Relational Model වැනි) වගු, තීරු, දත්ත වර්ග සහ යතුරු වැනි තාක්ෂණික විස්තර ඇතුළත් වන නිසා.",
            "සංකල්පීය රූපාත්මක සටහන දත්ත සමුදායේ භෞතික ගබඩා කිරීම විස්තර කරන නිසා.",
            "තාර්කික රූපාත්මක සටහනට ව්‍යාපාරික නීති ඇතුළත් නොවන නිසා."
        ],
        correctAnswerIndex: 2,
        explanation: "තාර්කික රූපාත්මක සටහන (Logical Schema) යනු සංකල්පීය රූපාත්මක සටහනේ (Conceptual Schema) අන්තර්ගතය මත පදනම්ව, යම් දත්ත ආකෘතියකට (උදා: Relational Model) අනුකූලව නිර්මාණය කරන ලද විස්තරාත්මක සැලැස්මකි. එය වගු, තීරු, දත්ත වර්ග, Primary Keys, Foreign Keys, සහ Constraints වැනි තාක්ෂණික විස්තර ඇතුළත් කරයි. සංකල්පීය සටහන ඉහළ මට්ටමේ, තාක්ෂණික නොවන දසුනක් සපයන අතර, තාර්කික සටහන ක්‍රියාත්මක කිරීමට හැකි මට්ටමේ විස්තරයක් සපයයි."
    },
    {
        questionText: "පහත දැක්වෙන තත්ත්වය සලකා බලන්න: සිසුන්ගේ ලියාපදිංචි තොරතුරු (StudentID, StudentName) සහ ඔවුන් ලියාපදිංචි වී ඇති පාඨමාලා (CourseID, CourseName) පිළිබඳ දත්ත සමුදායක්. මෙහිදී 'StudentID' සහ 'CourseID' යන තීරු පිළිවෙලින් 'සිසුන්' වගුවේ සහ 'පාඨමාලා' වගුවේ ප්‍රාථමික යතුරු වේ. 'සිසුන්' වගුවේ 'StudentID' තීරුව, 'පාඨමාලා' වගුවේ 'CourseID' තීරුව, සහ 'Student_Course' යන මධ්‍යම වගුවේ 'StudentID' සහ 'CourseID' යන තීරු සම්බන්ධ වන්නේ කෙසේද?",
        options: [
            "'Student_Course' වගුවේ 'StudentID' සහ 'CourseID' යන තීරු Foreign Keys නොවේ.",
            "'Student_Course' වගුවේ 'StudentID' යනු 'සිසුන්' වගුවේ Primary Key එක වන අතර, 'CourseID' යනු 'පාඨමාලා' වගුවේ Primary Key එකයි.",
            "'Student_Course' වගුවේ 'StudentID' යනු 'සිසුන්' වගුවේ Primary Key එක වන අතර, 'CourseID' යනු 'පාඨමාලා' වගුවේ Foreign Key එකකි.",
            "'Student_Course' වගුවේ 'StudentID' යනු 'සිසුන්' වගුවට Foreign Key එකක් වන අතර, 'CourseID' යනු 'පාඨමාලා' වගුවට Foreign Key එකක් වන අතර, මෙම තීරු දෙක එක්ව 'Student_Course' වගුවේ Composite Primary Key එකක් සාදයි.",
            "කිසිදු සම්බන්ධතාවයක් නොමැත."
        ],
        correctAnswerIndex: 3,
        explanation: "මෙය Many-to-Many සම්බන්ධතාවයක් (සිසුවෙකුට පාඨමාලා කිහිපයක්, පාඨමාලාවකට සිසුන් කිහිපයක්) නිරූපණය කිරීමට භාවිතා කරන පොදු ක්‍රමයකි. 'Student_Course' යනු සම්බන්ධක (Junction/Associative) වගුවකි. එහි 'StudentID' තීරුව 'සිසුන්' වගුවේ Primary Key එකට Foreign Key එකක් ලෙසත්, 'CourseID' තීරුව 'පාඨමාලා' වගුවේ Primary Key එකට Foreign Key එකක් ලෙසත් ක්‍රියා කරයි. මෙම Foreign Keys දෙක එක්ව 'Student_Course' වගුවේ Composite Primary Key එකක් සාදයි, එමගින් එක් සිසුවෙකුගේ එක් පාඨමාලාවක ලියාපදිංචිය අද්විතීයව හඳුනා ගනී."
    },
    {
        questionText: "දත්ත සමුදායක 'Data Integrity Constraints' (දත්ත අඛණ්ඩතා සීමා) යනු කුමක්ද?",
        options: [
            "දත්ත සමුදායට ඇතුළත් කළ හැකි දත්ත ප්‍රමාණය සීමා කිරීම.",
            "දත්ත සමුදායේ ගබඩා කර ඇති දත්ත වර්ග සීමා කිරීම.",
            "දත්ත සමුදායේ දත්තවල වලංගු භාවය, නිවැරදි භාවය සහ අඛණ්ඩතාව සහතික කිරීම සඳහා යොදන නීති රීති.",
            "දත්ත සමුදාය වෙත ප්‍රවේශ විය හැකි පරිශීලකයන්ගේ ගණන සීමා කිරීම.",
            "දත්ත සමුදායේ ක්‍රියාකාරිත්වය සඳහා අවශ්‍ය දෘඪාංග අවශ්‍යතා."
        ],
        correctAnswerIndex: 2,
        explanation: "Data Integrity Constraints (දත්ත අඛණ්ඩතා සීමා) යනු දත්ත සමුදායේ දත්තවල වලංගු භාවය, නිවැරදි භාවය සහ අඛණ්ඩතාව සහතික කිරීම සඳහා යොදන නීති රීති වේ. උදා: Entity Integrity (Primary Key NOT NULL සහ Unique), Referential Integrity (Foreign Key වලංගු විය යුතුය), Domain Integrity (Attribute අගයන් වලංගු වසම තුළ තිබිය යුතුය)."
    },
    {
        questionText: "පහත දැක්වෙන ඒවායින් 'Domain Integrity' (වසම් අඛණ්ඩතාව) සඳහා උදාහරණයක් ලෙස සැලකිය හැක්කේ කුමක්ද?",
        options: [
            "සෑම සිසු හැඳුනුම් අංකයක්ම අද්විතීය විය යුතුය.",
            "ඇණවුම් වගුවේ ඇති CustomerID, Customer වගුවේ ඇති CustomerID ට අනුරූප විය යුතුය.",
            "සිසුවෙකුගේ ලකුණු 0 සිට 100 දක්වා පරාසයක තිබිය යුතුය.",
            "සිසුවෙකුගේ නම Null විය නොහැක.",
            "පන්ති කාමර අංකය නිඛිලයක් විය යුතුය."
        ],
        correctAnswerIndex: 2,
        explanation: "Domain Integrity (වසම් අඛණ්ඩතාව) යනු Attribute එකකට ගත හැකි වලංගු අගයන් සමූහය (domain) තුළ පමණක් අගයන් තිබිය යුතු බව සහතික කිරීමයි. 'සිසුවෙකුගේ ලකුණු 0 සිට 100 දක්වා පරාසයක තිබිය යුතුය' යනු ලකුණු Attribute එකේ වසම 0-100 බවයි, එය Domain Integrity ට උදාහරණයකි."
    },
    {
        questionText: "සම්බන්ධක ආකෘතියක 'Cardinality' (ගණනීයතාව) යන්න තාර්කික රූපාත්මක සටහනක නිරූපණය වන්නේ කෙසේද?",
        options: [
            "වගු අතර ඇති සම්බන්ධතා ගණන අනුව.",
            "Primary Keys සහ Foreign Keys භාවිතයෙන් වගු අතර සම්බන්ධතා මගින්.",
            "වගු වල පේළි ගණන අනුව.",
            "තීරු වල දත්ත වර්ග අනුව.",
            "Normalization මට්ටම අනුව."
        ],
        correctAnswerIndex: 1,
        explanation: "ER Diagram එකක Cardinality (ගණනීයතාව) යන්න තාර්කික රූපාත්මක සටහනක (Relational Schema) ප්‍රධාන වශයෙන් නිරූපණය වන්නේ Primary Keys සහ Foreign Keys භාවිතයෙන් වගු අතර සම්බන්ධතා මගිනි. උදා: One-to-Many සම්බන්ධතාවයක් Foreign Key එකක් මගින් නිරූපණය වේ."
    },
    {
        questionText: "දත්ත සමුදායක තාර්කික රූපාත්මක සටහනක් නිර්මාණය කිරීමේදී, 'Composite Primary Key' (සංයුක්ත ප්‍රාථමික යතුර) යනු කුමක්ද?",
        options: [
            "එය තනි තීරුවකින් සමන්විත Primary Key එකකි.",
            "එය Foreign Key එකක් ලෙස ක්‍රියා කරන Primary Key එකකි.",
            "එය තීරු දෙකක් හෝ වැඩි ගණනක් එකට එකතු වී වගුවක සෑම පේළියක්ම අද්විතීයව හඳුනා ගන්නා Primary Key එකකි.",
            "එය Null අගයන් දැරිය හැකි Primary Key එකකි.",
            "එය වෙනත් වගුවක යතුරක් මත රඳා පවතින Primary Key එකකි."
        ],
        correctAnswerIndex: 2,
        explanation: "Composite Primary Key (සංයුක්ත ප්‍රාථමික යතුර) යනු තීරු දෙකක් හෝ වැඩි ගණනක් එකට එකතු වී වගුවක සෑම පේළියක්ම අද්විතීයව හඳුනා ගන්නා Primary Key එකකි. මෙය බොහෝ විට Many-to-Many සම්බන්ධතා Relational Model එකට පරිවර්තනය කිරීමේදී නිර්මාණය වන සම්බන්ධක (Junction) වගු වල භාවිතා වේ."
    },
    {
        questionText: "Relational Schema එකක 'Arity' (ආරිටි) යනු කුමක්ද?",
        options: [
            "වගුවක ඇති පේළි ගණන.",
            "වගුවක ඇති තීරු ගණන.",
            "වගුවක ඇති Primary Keys ගණන.",
            "වගුවක ඇති Foreign Keys ගණන.",
            "වගුවකට සම්බන්ධ විය හැකි වෙනත් වගු ගණන."
        ],
        correctAnswerIndex: 1,
        explanation: "Relational Schema එකක 'Arity' (ආරිටි) යනු වගුවක ඇති තීරු ගණනයි (number of attributes/columns)."
    },
    {
        questionText: "Relational Schema එකක 'Degree' (ඩිග්‍රී) යනු කුමක්ද?",
        options: [
            "වගුවක ඇති පේළි ගණන.",
            "වගුවක ඇති තීරු ගණන.",
            "වගුවක ඇති Primary Keys ගණන.",
            "වගුවක ඇති Foreign Keys ගණන.",
            "වගුවකට සම්බන්ධ විය හැකි වෙනත් වගු ගණන."
        ],
        correctAnswerIndex: 1,
        explanation: "Relational Schema එකක 'Degree' (ඩිග්‍රී) යනු වගුවක ඇති තීරු ගණනයි (number of attributes/columns). මෙය Arity ලෙසද හැඳින්වේ. (සටහන: සමහර පොත්වල 'Degree' යනු 'Arity' ලෙසත්, 'Cardinality' යනු 'number of rows/tuples' ලෙසත් භාවිතා වේ.)"
    },
    {
        questionText: "Relational Database එකක 'Table' (වගුව) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "දත්ත සමුදාය කළමනාකරණ පද්ධතියක්.",
            "දත්ත ගබඩා කිරීම සඳහා භාවිතා කරන මෘදුකාංගයක්.",
            "දත්ත පේළි සහ තීරු ආකාරයෙන් සංවිධානය කර ගබඩා කරන ව්‍යුහයක්.",
            "දත්ත සමුදායේ ආරක්ෂක ප්‍රතිපත්තියක්.",
            "දත්ත විශ්ලේෂණය සඳහා භාවිතා කරන වාර්තාවක්."
        ],
        correctAnswerIndex: 2,
        explanation: "Relational Database එකක 'Table' (වගුව) යනු දත්ත පේළි (rows) සහ තීරු (columns) ආකාරයෙන් සංවිධානය කර ගබඩා කරන මූලික ව්‍යුහයයි. සෑම වගුවක්ම එක් Entity වර්ගයක දත්ත ගබඩා කරයි."
    },
    {
        questionText: "දත්ත සමුදායක තාර්කික රූපාත්මක සටහන සැලසුම් කිරීමේදී, 'Integrity Rules' (අඛණ්ඩතා නීති) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "දත්ත සමුදායට ප්‍රවේශ විය හැකි පරිශීලකයන්ගේ ගණන සීමා කිරීම.",
            "දත්ත සමුදායේ දත්තවල වලංගු භාවය සහ අඛණ්ඩතාව පවත්වා ගැනීමට අවශ්‍ය නීති.",
            "දත්ත සමුදායේ භෞතික ගබඩා කිරීමේ ක්‍රම.",
            "දත්ත සමුදායේ දත්ත වර්ග පමණක්.",
            "දත්ත සමුදායේ ඇති වගු ගණන."
        ],
        correctAnswerIndex: 1,
        explanation: "Integrity Rules (අඛණ්ඩතා නීති) යනු දත්ත සමුදායේ දත්තවල වලංගු භාවය, නිවැරදි භාවය සහ අඛණ්ඩතාව පවත්වා ගැනීමට අවශ්‍ය නීති වේ. මේවාට Entity Integrity (Primary Key වලට Null නොවිය යුතුය, අද්විතීය විය යුතුය), Referential Integrity (Foreign Key අගයන් වලංගු විය යුතුය), සහ Domain Integrity (Attribute අගයන් වසම තුළ තිබිය යුතුය) ඇතුළත් වේ."
    },
    {
        questionText: "දත්ත සමුදායක තාර්කික රූපාත්මක සටහන නිර්මාණය කිරීමේදී, 'Denormalization' (සාමාන්‍යකරණයෙන් ඉවත් කිරීම) යනු කුමක්ද?",
        options: [
            "දත්ත පුනරාවර්තනය සම්පූර්ණයෙන්ම ඉවත් කිරීමේ ක්‍රියාවලිය.",
            "දත්ත සමුදායේ කාර්ය සාධනය වැඩි දියුණු කිරීම සඳහා හිතාමතාම දත්ත පුනරාවර්තනය හඳුන්වා දීමේ ක්‍රියාවලිය.",
            "වගු අතර ඇති සියලුම සම්බන්ධතා ඉවත් කිරීමේ ක්‍රියාවලිය.",
            "ප්‍රාථමික යතුරු තෝරා ගැනීමේ ක්‍රියාවලිය.",
            "දත්ත සමුදායේ ආරක්ෂක යාන්ත්‍රණ ශක්තිමත් කිරීමේ ක්‍රියාවලිය."
        ],
        correctAnswerIndex: 1,
        explanation: "Denormalization (සාමාන්‍යකරණයෙන් ඉවත් කිරීම) යනු සාමාන්‍යකරණය කරන ලද දත්ත සමුදායකට දත්ත පුනරාවර්තනය (redundancy) හිතාමතාම හඳුන්වා දීමේ ක්‍රියාවලියයි. මෙය සිදු කරනු ලබන්නේ දත්ත වෙත ප්‍රවේශ වීමේ කාර්ය සාධනය (performance) වැඩි දියුණු කිරීම සඳහා, විශේෂයෙන්ම සංකීර්ණ විමසුම් (queries) සහ වාර්තා (reports) සඳහාය. කෙසේ වෙතත්, මෙය දත්ත අසංගතතාවයේ අවදානම වැඩි කරයි."
    },

    // 8.4 භූතාර්ථ සම්බන්ධතා අනුකෘතිය, තාර්කික රූපාත්මක සටහන බවට පරිවර්තනය කරයි
    {
        questionText: "ER Diagram එකක් Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී, සෑම Strong Entity (ශක්තිමත් භූතාර්ථය) එකක්ම Relational Schema එකක කුමක් බවට පත් වේද?",
        options: [
            "තීරුවක් (Attribute).",
            "පේළියක් (Tuple).",
            "වගුවක් (Table).",
            "Foreign Key එකක්.",
            "Primary Key එකක්."
        ],
        correctAnswerIndex: 2,
        explanation: "ER Diagram එකක් Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී, සෑම Strong Entity (ශක්තිමත් භූතාර්ථය) එකක්ම Relational Schema එකක වෙනම වගුවක් (Table) බවට පත් වේ. එම Entity හි Attributes වගුවේ තීරු බවට පත් වන අතර, Entity Identifier එක වගුවේ Primary Key එක බවට පත් වේ."
    },
    {
        questionText: "ER Diagram එකක Entity එකක Attributes (උපලක්ෂණ) Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී කුමක් බවට පත් වේද?",
        options: [
            "වෙනම වගු බවට.",
            "වගුවේ පේළි බවට.",
            "අදාළ වගුවේ තීරු (columns) බවට.",
            "Foreign Keys බවට.",
            "Primary Keys බවට."
        ],
        correctAnswerIndex: 2,
        explanation: "ER Diagram එකක Entity එකක Attributes (උපලක්ෂණ) Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී අදාළ වගුවේ තීරු (columns) බවට පත් වේ."
    },
    {
        questionText: "ER Diagram එකක Simple Attribute (සරල උපලක්ෂණ) Relational Schema එකක් බවට පරිවර්තනය කරන්නේ කෙසේද?",
        options: [
            "වෙනම වගුවක් ලෙස.",
            "අදාළ වගුවේ වෙනම තීරුවක් ලෙස.",
            "Foreign Key එකක් ලෙස.",
            "Primary Key එකක් ලෙස.",
            "එය ඉවත් කරනු ලැබේ."
        ],
        correctAnswerIndex: 1,
        explanation: "Simple Attribute (සරල උපලක්ෂණ) යනු තවදුරටත් බෙදිය නොහැකි Attribute එකකි. එය Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී අදාළ වගුවේ වෙනම තීරුවක් (column) ලෙස නිරූපණය වේ."
    },
    {
        questionText: "ER Diagram එකක Composite Attribute (සංයුක්ත උපලක්ෂණ) Relational Schema එකක් බවට පරිවර්තනය කරන්නේ කෙසේද?",
        options: [
            "එය වෙනම වගුවක් බවට පත් කරයි.",
            "එහි කොටස් (components) අදාළ වගුවේ වෙනම තීරු ලෙස නිරූපණය කරයි.",
            "එය Foreign Key එකක් ලෙස භාවිතා කරයි.",
            "එය Derived Attribute එකක් බවට පත් කරයි.",
            "එය ඉවත් කරනු ලැබේ."
        ],
        correctAnswerIndex: 1,
        explanation: "Composite Attribute (සංයුක්ත උපලක්ෂණ) යනු තවදුරටත් කුඩා කොටස් වලට බෙදිය හැකි Attribute එකකි. එය Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී, එහි එක් එක් කොටස (උදා: ලිපිනයක ගෙදර අංකය, වීදිය, නගරය) අදාළ වගුවේ වෙනම තීරු ලෙස නිරූපණය කරයි."
    },
    {
        questionText: "ER Diagram එකක Multivalued Attribute (බහු අගයන් සහිත උපලක්ෂණ) Relational Schema එකක් බවට පරිවර්තනය කරන්නේ කෙසේද?",
        options: [
            "අදාළ වගුවේ තනි තීරුවක් ලෙස.",
            "එය ඉවත් කරනු ලැබේ.",
            "අදාළ Entity හි Primary Key එක සමඟ වෙනම වගුවක් ලෙස නිරූපණය කරයි.",
            "Foreign Key එකක් ලෙස භාවිතා කරයි.",
            "Composite Primary Key එකක් ලෙස නිරූපණය කරයි."
        ],
        correctAnswerIndex: 2,
        explanation: "Multivalued Attribute (බහු අගයන් සහිත උපලක්ෂණ) යනු එකම අවස්ථාවකදී අගයන් එකකට වඩා තිබිය හැකි Attribute එකකි. එය Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී, අදාළ Entity හි Primary Key එක සමඟ වෙනම වගුවක් ලෙස නිරූපණය කරයි. මෙම නව වගුවේ Primary Key එක වන්නේ මුල් Entity හි Primary Key එක සහ Multivalued Attribute එකෙහි තීරුව යන දෙකෙහිම එකතුවයි (Composite Primary Key)."
    },
    {
        questionText: "ER Diagram එකක One-to-One (1:1) Relationship එකක් Relational Schema එකක් බවට පරිවර්තනය කරන්නේ කෙසේද?",
        options: [
            "වෙනම සම්බන්ධක වගුවක් නිර්මාණය කිරීමෙන්.",
            "Relationship එකට සහභාගී වන Entities දෙකෙන් එකක Primary Key එක අනෙක් වගුවේ Foreign Key එකක් ලෙස එකතු කිරීමෙන්.",
            "වගු දෙකම එක් වගුවකට ඒකාබ්‍රැහ්මණ කිරීමෙන්.",
            "Relationship එක ඉවත් කිරීමෙන්.",
            "Attributes දෙකක් එකතු කිරීමෙන්."
        ],
        correctAnswerIndex: 1,
        explanation: "One-to-One (1:1) Relationship එකක් Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී, Relationship එකට සහභාගී වන Entities දෙකෙන් එකක Primary Key එක අනෙක් වගුවේ Foreign Key එකක් ලෙස එකතු කරයි. කුමන වගුවට Foreign Key එක එකතු කරන්නේද යන්න තීරණය වන්නේ ඒවායේ සහභාගීත්ව සීමා (Participation Constraints) අනුවයි."
    },
    {
        questionText: "ER Diagram එකක One-to-Many (1:M) Relationship එකක් Relational Schema එකක් බවට පරිවර්තනය කරන්නේ කෙසේද?",
        options: [
            "වෙනම සම්බන්ධක වගුවක් නිර්මාණය කිරීමෙන්.",
            "Many පැත්තේ ඇති Entity එකේ වගුවට One පැත්තේ ඇති Entity එකේ Primary Key එක Foreign Key එකක් ලෙස එකතු කිරීමෙන්.",
            "වගු දෙකම එක් වගුවකට ඒකාබ්‍රැහ්මණ කිරීමෙන්.",
            "Relationship එකට සහභාගී වන Entities දෙකම Primary Keys ලෙස ප්‍රකාශ කිරීමෙන්.",
            "Attributes දෙකක් ඉවත් කිරීමෙන්."
        ],
        correctAnswerIndex: 1,
        explanation: "One-to-Many (1:M) Relationship එකක් Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී, 'Many' පැත්තේ ඇති Entity එකේ වගුවට 'One' පැත්තේ ඇති Entity එකේ Primary Key එක Foreign Key එකක් ලෙස එකතු කරයි. උදා: 'පාරිභෝගිකයා' (One) 'ඇණවුම්' (Many) කරයි නම්, 'Order' වගුවට 'Customer' වගුවේ Primary Key එක වන 'CustomerID' Foreign Key එකක් ලෙස එකතු වේ."
    },
    {
        questionText: "ER Diagram එකක Many-to-Many (M:N) Relationship එකක් Relational Schema එකක් බවට පරිවර්තනය කරන්නේ කෙසේද?",
        options: [
            "Relationship එකට සහභාගී වන එක් Entity එකක Primary Key එක අනෙක් වගුවේ Foreign Key එකක් ලෙස එකතු කිරීමෙන්.",
            "Relationships ඉවත් කිරීමෙන්.",
            "Entities දෙකම එක වගුවකට ඒකාබ්‍රැහ්මණ කිරීමෙන්.",
            "Relationships දෙක අතර නව සම්බන්ධක වගුවක් (Junction Table) නිර්මාණය කිරීමෙන්, එම වගුවේ Primary Key එක ලෙස මුල් Entities දෙකෙහිම Primary Keys Foreign Keys ලෙස භාවිතා කරමින්.",
            "Attributes දෙකක් Composite Primary Key එකක් ලෙස භාවිතා කිරීමෙන්."
        ],
        correctAnswerIndex: 3,
        explanation: "Many-to-Many (M:N) Relationship එකක් Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී, නව සම්බන්ධක වගුවක් (Junction Table) නිර්මාණය කරයි. මෙම නව වගුවේ Primary Key එක ලෙස, මුල් Entities දෙකෙහිම Primary Keys Foreign Keys ලෙස භාවිතා වේ (මේවා නව වගුවේ Composite Primary Key එක සාදයි). මෙමගින් M:N සම්බන්ධතාවය 1:M සම්බන්ධතා දෙකකට බෙදා හරියි."
    },
    {
        questionText: "ER Diagram එකක Weak Entity (දුර්වල භූතාර්ථය) Relational Schema එකක් බවට පරිවර්තනය කරන්නේ කෙසේද?",
        options: [
            "වෙනම වගුවක් ලෙස, තමන්ගේම Primary Key එකක් සමඟ.",
            "එය ඉවත් කර, එහි Attributes Strong Entity එකේ වගුවට එකතු කිරීමෙන්.",
            "Strong Entity එකේ Primary Key එක Foreign Key එකක් ලෙස Weak Entity එකේ වගුවට එකතු කිරීමෙන්, සහ එය Weak Entity එකේ Partial Key සමඟ Composite Primary Key එකක් ලෙස භාවිතා කිරීමෙන්.",
            "Weak Entity එකට තමන්ගේම Primary Key එකක් ලබා දීමෙන්.",
            "වෙනත් Strong Entities සමඟ සම්බන්ධතා ඇති කර ගැනීමෙන්."
        ],
        correctAnswerIndex: 2,
        explanation: "Weak Entity (දුර්වල භූතාර්ථය) Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී, එය වෙනම වගුවක් ලෙස නිර්මාණය කරයි. එම වගුවේ Primary Key එක වන්නේ, අදාළ Strong Entity එකේ Primary Key එක (එය Foreign Key එකක් ලෙස Weak Entity වගුවට පැමිණේ) සහ Weak Entity එකේ Partial Key (Discriminator) යන දෙකෙහිම එකතුවයි (Composite Primary Key)."
    },
    {
        questionText: "ER Diagram එකක Derived Attribute (ව්‍යුත්පන්න උපලක්ෂණ) Relational Schema එකක් බවට පරිවර්තනය කරන්නේ කෙසේද?",
        options: [
            "අදාළ වගුවේ වෙනම තීරුවක් ලෙස සෘජුවම ගබඩා කරයි.",
            "අදාළ වගුවේ වෙනම තීරුවක් ලෙස ගබඩා නොකර, අවශ්‍ය විටදී වෙනත් Attributes වලින් ගණනය කරනු ලැබේ.",
            "එය Foreign Key එකක් ලෙස භාවිතා කරයි.",
            "එය Primary Key එකක් ලෙස භාවිතා කරයි.",
            "එය වෙනම වගුවක් බවට පත් කරයි."
        ],
        correctAnswerIndex: 2,
        explanation: "Derived Attribute (ව්‍යුත්පන්න උපලක්ෂණ) යනු වෙනත් Attributes වලින් ගණනය කළ හැකි හෝ ව්‍යුත්පන්න කළ හැකි Attribute එකකි. මේවා සාමාන්‍යයෙන් Relational Schema එකක සෘජුවම ගබඩා නොවේ. අවශ්‍ය වූ විටදී (උදා: SQL Query එකක් මගින්) වෙනත් Attributes වලින් ඒවා ගණනය කරනු ලැබේ. මෙසේ කිරීමෙන් දත්ත පුනරාවර්තනය වළක්වා ගත හැක."
    },
    {
        questionText: "ER Diagram එකක් Relational Schema එකක් බවට පරිවර්තනය කිරීමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "දත්ත සමුදායේ භෞතික ගබඩා කිරීමේ විස්තර නිර්ණය කිරීම.",
            "සැබෑ ලෝකයේ දත්ත ආකෘතියට අදාළ සංකල්පීය ER Diagram එක Relational Database කළමනාකරණ පද්ධතියකට ක්‍රියාත්මක කළ හැකි ව්‍යුහයක් බවට පත් කිරීම.",
            "පරිගණක වැඩසටහන් කේතය ස්වයංක්‍රීයව ජනනය කිරීම.",
            "දත්ත සමුදායේ දත්ත ආරක්ෂාව වැඩි දියුණු කිරීම.",
            "දත්ත සමුදායට ඇතුළත් කළ හැකි දත්ත ප්‍රමාණය සීමා කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "ER Diagram එකක් Relational Schema එකක් බවට පරිවර්තනය කිරීමේ ප්‍රධාන අරමුණ වන්නේ, සැබෑ ලෝකයේ දත්ත ආකෘතියට අදාළ සංකල්පීය ER Diagram එක Relational Database කළමනාකරණ පද්ධතියකට (RDBMS) ක්‍රියාත්මක කළ හැකි ව්‍යුහයක් බවට පත් කිරීමයි. මෙම ක්‍රියාවලිය මගින් Entities, Attributes සහ Relationships, Relational Database වගු, තීරු, Primary Keys සහ Foreign Keys බවට පත් කෙරේ."
    },
    // 8.5 සම්බන්ධක දත්ත සමුදාය ආකෘතියේ ප්‍රධාන සංරචක විස්තර කරයි.
    {
        questionText: "සම්බන්ධක දත්ත සමුදායක 'උපලක්ෂණ' (Attributes) ලෙස හඳුන්වන්නේ කුමක්ද?",
        options: [
            "වගුවක ඇති දත්ත පේළි",
            "වගුවක ඇති අද්විතීය වාර්තා",
            "වගුවක ඇති තීරු",
            "වගු අතර සම්බන්ධතා අගයන්",
            "දත්තවල අඛණ්ඩතාව පවත්වා ගන්නා නීති"
        ],
        correctAnswerIndex: 2,
        explanation: "සම්බන්ධක දත්ත සමුදාය ආකෘතියේදී, 'උපලක්ෂණ' (Attributes) යනු වගුවක තීරු වේ. මෙම තීරු මගින් දත්ත වර්ගීකරණය කර ගබඩා කරයි. උදාහරණයක් ලෙස, 'සිසුවා' යන වගුවක 'නම', 'හැඳුනුම්පත', 'ලිපිනය' යනාදිය උපලක්ෂණ වේ."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදායක 'උපලැසි' (Tuples) යනු කුමක්ද?",
        options: [
            "වගුවක ඇති තීරු වල එකතුව",
            "වගුවක දත්ත අඩංගු වන එක් සම්පූර්ණ පේළියක් හෝ වාර්තාවක්",
            "වගු අතර සම්බන්ධතා ඇති කරන යතුරු",
            "දත්ත සමුදායක ඇති සියලුම වගු",
            "දත්තවල වලංගුභාවය පරීක්ෂා කරන නීති"
        ],
        correctAnswerIndex: 1,
        explanation: "සම්බන්ධක දත්ත සමුදාය ආකෘතියේදී, 'උපලැසි' (Tuples) යනු වගුවක ඇති එක් සම්පූර්ණ පේළියක් හෝ වාර්තාවකි. එය එක් එක් තීරු සඳහා අගයන් සමූහයකින් සමන්විත වේ. උදාහරණයක් ලෙස, 'සිසුන්' වගුවේ එක් සිසුවෙකු පිළිබඳ සම්පූර්ණ තොරතුරු අඩංගු එක් පේළියක් උපලැසියකි."
    },
    {
        questionText: "වගු දෙකක් අතර 'එකට-බොහෝ' (One-to-Many) සම්බන්ධතාවක් පිළිබඳ වඩාත් නිවැරදි විස්තරය කුමක්ද?",
        options: [
            "වගුවක එක් වාර්තාවක් තවත් වගුවක එකම වාර්තාවකට පමණක් සම්බන්ධ වීම.",
            "වගුවක එක් වාර්තාවක් තවත් වගුවක කිසිදු වාර්තාවකට සම්බන්ධ නොවීම.",
            "වගුවක එක් වාර්තාවක් තවත් වගුවක වාර්තා කිහිපයකට සම්බන්ධ වන අතර, අනෙක් වගුවේ වාර්තාවක් මේ වගුවේ එක් වාර්තාවකට පමණක් සම්බන්ධ වීම.",
            "වගුවක එක් වාර්තාවක් තවත් වගුවක වාර්තා කිහිපයකට සම්බන්ධ වන අතර, අනෙක් වගුවේ වාර්තාවක්ද මේ වගුවේ වාර්තා කිහිපයකට සම්බන්ධ වීම.",
            "වගුවක වාර්තා කිහිපයක් තවත් වගුවක වාර්තා කිහිපයකට සම්බන්ධ වීම."
        ],
        correctAnswerIndex: 2,
        explanation: "වගු දෙකක් අතර 'එකට-බොහෝ' (One-to-Many) සම්බන්ධතාවක් යනු එක් වගුවක එක් වාර්තාවක් (උදා: 'ගුරු' වගුවේ එක් ගුරුවරයෙක්) තවත් වගුවක වාර්තා කිහිපයකට (උදා: 'විෂයයන්' වගුවේ ඔහු උගන්වන විෂයයන් කිහිපයකට) සම්බන්ධ වන අතර, අනෙක් වගුවේ වාර්තාවක් (එක් විෂයයක්) මේ වගුවේ එක් වාර්තාවකට (එක් ගුරුවරයෙකුට) පමණක් සම්බන්ධ වීමයි. මෙය දත්ත සමුදා සැලසුම්කරණයේදී බහුලව භාවිතා වන සම්බන්ධතාවකි."
    },
    {
        questionText: "Primary Key Constraint (ප්‍රාථමික යතුරු සම්බාධකය) පිළිබඳව සත්‍ය නොවන ප්‍රකාශය කුමක්ද?",
        options: [
            "එය වගුවක සෑම පේළියක්ම අද්විතීයව හඳුනා ගැනීමට භාවිතා කරයි.",
            "ප්‍රාථමික යතුරක් NULL අගයන් (empty values) දැරිය නොහැක.",
            "එය Unique Constraint සහ NOT NULL Constraint එකතුවකි.",
            "වගුවකට ප්‍රාථමික යතුරු කිහිපයක් තිබිය හැක.",
            "එය වගුවේ දත්ත අඛණ්ඩතාව සහතික කරයි."
        ],
        correctAnswerIndex: 3,
        explanation: "වගුවකට තිබිය හැක්කේ එක් ප්‍රාථමික යතුරක් පමණි. එය තනි තීරුවකින් හෝ තීරු සමූහයකින් සෑදිය හැකි නමුත්, වගුවකට ඇත්තේ එක් ප්‍රාථමික යතුරු සම්බාධකයක් පමණි. ප්‍රාථමික යතුරක් අද්විතීය (Unique) විය යුතු අතර, NULL අගයන් දැරිය නොහැකි (NOT NULL) විය යුතුය."
    },
    {
        questionText: "Foreign Key Constraint (ආගන්තුක යතුරු සම්බාධකය) හි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "වගුවක ඇති දත්ත අද්විතීය බව තහවුරු කිරීම.",
            "වගු දෙකක් අතර සම්බන්ධතාවක් ඇති කිරීම සහ දත්තවල විමර්ශන අඛණ්ඩතාව (referential integrity) පවත්වා ගැනීම.",
            "යම් තීරුවකට අනිවාර්යයෙන්ම අගයක් තිබිය යුතු බව නියම කිරීම.",
            "යම් තීරුවක දත්ත සඳහා යම් කොන්දේසියක් සත්‍ය විය යුතු බව තහවුරු කිරීම.",
            "දත්ත ඇතුළත් කිරීමේදී ඇතිවන විෂමතා වැළැක්වීම."
        ],
        correctAnswerIndex: 1,
        explanation: "Foreign Key Constraint (ආගන්තුක යතුරු සම්බාධකය) හි ප්‍රධාන අරමුණ වන්නේ වගු දෙකක් අතර සම්බන්ධතාවක් ඇති කිරීමයි. එය එක් වගුවක තීරුවක් වන අතර, එය තවත් වගුවක ප්‍රාථමික යතුරකට යොමු වේ. මෙය දත්ත සමුදායක විමර්ශන අඛණ්ඩතාව (referential integrity) පවත්වා ගැනීමට අත්‍යවශ්‍ය වේ, එනම් යොමු කරන දත්ත සෑම විටම පවතින බව සහතික කරයි."
    },
    {
        questionText: "NOT NULL Constraint (අභිශුන්‍ය නොවන සම්බාධකය) මගින් සහතික කරන්නේ කුමක්ද?",
        options: [
            "යම් තීරුවක අගයන් අද්විතීය විය යුතු බව.",
            "වගුවකට ප්‍රාථමික යතුරක් තිබිය යුතු බව.",
            "යම් තීරුවකට අනිවාර්යයෙන්ම අගයක් තිබිය යුතු බව.",
            "යම් තීරුවක අගයයන් යම් පරාසයක් තුළ තිබිය යුතු බව.",
            "වගු දෙකක් අතර සම්බන්ධතාවක් පැවතීම."
        ],
        correctAnswerIndex: 2,
        explanation: "NOT NULL Constraint (අභිශුන්‍ය නොවන සම්බාධකය) යනු දත්ත සමුදායක දත්තවල අඛණ්ඩතාව පවත්වා ගැනීම සඳහා භාවිතා කරන එක් නීතියකි. එය යම් තීරුවකට අනිවාර්යයෙන්ම අගයක් තිබිය යුතු බව නියම කරයි, එනම් එම තීරුව හිස්ව තැබීමට (NULL) ඉඩ නොදෙයි. උදාහරණයක් ලෙස, 'ශිෂ්‍යයාගේ නම' තීරුව NOT NULL ලෙස අර්ථ දැක්වුවහොත්, ශිෂ්‍යයෙකුගේ නම ඇතුළු නොකර වාර්තාවක් සුරැකීමට නොහැක."
    },
    {
        questionText: "Unique Constraint (අනන්‍ය සම්බාධකය) සහ Primary Key Constraint (ප්‍රාථමික යතුරු සම්බාධකය) අතර ඇති ප්‍රධාන වෙනස කුමක්ද?",
        options: [
            "Unique Constraint එකකට NULL අගයන් තිබිය හැකි නමුත් Primary Key එකකට නොහැක.",
            "Unique Constraint එකකට NULL අගයන් තිබිය නොහැකි නමුත් Primary Key එකකට හැක.",
            "වගුවකට තිබිය හැක්කේ එක් Unique Constraint එකක් පමණි, නමුත් Primary Keys කිහිපයක් තිබිය හැක.",
            "Unique Constraint යනු වගු අතර සම්බන්ධතා ඇති කිරීමට භාවිතා කරන යතුරක් වන අතර, Primary Key යනු දත්ත අද්විතීය කිරීමට පමණි.",
            "Unique Constraint මගින් දත්තවල අඛණ්ඩතාව සහතික නොකරන අතර, Primary Key මගින් එය සහතික කරයි."
        ],
        correctAnswerIndex: 0,
        explanation: "Unique Constraint (අනන්‍ය සම්බාධකය) මගින් යම් තීරුවක අගයන් අද්විතීය විය යුතු බව සහතික කරයි, නමුත් එයට NULL අගයන් එකක් හෝ කිහිපයක් තිබීමට ඉඩ දිය හැක. Primary Key Constraint (ප්‍රාථමික යතුරු සම්බාධකය) ද අද්විතීය විය යුතු අතර, ඊට අමතරව එය NULL අගයන් දැරිය නොහැක (NOT NULL). එබැවින්, Unique Constraint එකකට NULL අගයන් තිබිය හැකි නමුත් Primary Key එකකට නොහැක යන්න නිවැරදි වෙනසයි."
    },
    {
        questionText: "වගුවක 'බොහෝ-බොහෝ' (Many-to-Many) සම්බන්ධතාවක් සැබවින්ම නිරූපණය කරන්නේ කෙසේද?",
        options: [
            "එක් වගුවක වාර්තා කිහිපයක් තවත් වගුවක එක් වාර්තාවකට සම්බන්ධ කිරීමෙන්.",
            "ආගන්තුක යතුරක් පමණක් භාවිතයෙන්.",
            "වගු දෙකේම ප්‍රාථමික යතුරු එකම වගුවක අඩංගු කිරීමෙන්.",
            "වගු දෙකෙහි ප්‍රාථමික යතුරු ආගන්තුක යතුරු ලෙස අඩංගු වන, 'සම්බන්ධක වගුවක්' (Junction Table) භාවිතයෙන්.",
            "එකට-එක සම්බන්ධතා දෙකක් නිර්මාණය කිරීමෙන්."
        ],
        correctAnswerIndex: 3,
        explanation: "සම්බන්ධක දත්ත සමුදායක 'බොහෝ-බොහෝ' (Many-to-Many) සම්බන්ධතාවක් සෘජුවම නිරූපණය කළ නොහැක. ඒ වෙනුවට, 'සම්බන්ධක වගුවක්' (Junction Table) හෝ 'සම්බන්ධීකරණ වගුවක්' (Associative Table) භාවිතා කරයි. මෙම සම්බන්ධක වගුවෙහි, මුල් වගු දෙකේම ප්‍රාථමික යතුරු ආගන්තුක යතුරු ලෙස අඩංගු වන අතර, එම ආගන්තුක යතුරු දෙකම එක්ව එම සම්බන්ධක වගුවේ ප්‍රාථමික යතුර ලෙස ක්‍රියා කළ හැක. උදාහරණයක් ලෙස, 'ශිෂ්‍යයන්' සහ 'පාඨමාලා' අතර බොහෝ-බොහෝ සම්බන්ධතාවක් සඳහා 'ශිෂ්‍ය-පාඨමාලා' වැනි සම්බන්ධක වගුවක් භාවිතා වේ."
    },
    {
        questionText: "Table Check Constraint (වගු පරීක්ෂා සම්බාධකය) භාවිතයෙන් කළ හැකි කාර්යයක් පිළිබඳ නිවැරදි උදාහරණයක් තෝරන්න.",
        options: [
            "වගුවක සෑම පේළියක්ම අද්විතීය බව තහවුරු කිරීම.",
            "වගුවක තීරුවකට NULL අගයන් ඇතුළත් කිරීම වැළැක්වීම.",
            "දත්ත ඇතුළත් කිරීමේදී 'වයස' තීරුවේ අගය 18ට වැඩි විය යුතු බවට කොන්දේසියක් දැමීම.",
            "වගු දෙකක් අතර ප්‍රාථමික යතුරු සම්බන්ධතාවක් ඇති කිරීම.",
            "තීරුවක අගයන් වෙනත් තීරුවක අගයන්ගෙන් ස්වාධීන බව සහතික කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "Table Check Constraint (වගු පරීක්ෂා සම්බාධකය) මගින් යම් තීරුවක හෝ වගුවක දත්ත සඳහා යම් කොන්දේසියක් සත්‍ය විය යුතු බව නියම කරයි. 'වයස' තීරුවේ අගය 18ට වැඩි විය යුතු බවට කොන්දේසියක් දැමීම, හෝ 'තොගය' තීරුවේ අගය 0 ට වඩා වැඩි විය යුතු බවට නියම කිරීම වැනි දේ මෙයට උදාහරණ වේ. මෙය දත්තවල වලංගුභාවය තහවුරු කිරීමට උපකාරී වේ."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදාය සැලසුම් කිරීමේදී, 'එකට-එක' (One-to-One) සම්බන්ධතාවක් භාවිතා කිරීමේ ප්‍රධාන හේතුවක් විය හැක්කේ කුමක්ද?",
        options: [
            "දත්ත පුනරුක්තිකරණය වැඩි කිරීමට.",
            "වගු දෙකක ඇති දත්ත වෙන් වෙන්ව ගබඩා කිරීම අවශ්‍ය වන විට, නමුත් තර්කානුකූලව ඒවා එකිනෙකට දැඩිව සම්බන්ධ වන විට (උදා: ආරක්ෂක හේතු හෝ දත්ත විශාලත්වය).",
            "බොහෝ වාර්තා අතර පහසුවෙන් සම්බන්ධතා ඇති කිරීමට.",
            "දත්ත සමුදායේ ප්‍රමතකරණ මට්ටම අඩු කිරීමට.",
            "දත්ත ඇතුළත් කිරීමේ විෂමතා වැඩි කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "එකට-එක (One-to-One) සම්බන්ධතාවක් සාමාන්‍යයෙන් භාවිතා කරන්නේ වගු දෙකක ඇති දත්ත වෙන් වෙන්ව ගබඩා කිරීම අවශ්‍ය වන විටය, නමුත් තර්කානුකූලව ඒවා එකිනෙකට දැඩිව සම්බන්ධ වන විට. උදාහරණයක් ලෙස, 'සේවක' වගුව සහ 'සේවක විස්තර' වගුව (එහි සංවේදී දත්ත අඩංගු වන නිසා). මෙය දත්ත සමුදා ආරක්ෂාව, කාර්ය සාධනය හෝ කළමනාකරණය පහසු කර ගත හැක. මෙය දත්ත පුනරුක්තිකරණය අවම කිරීමට සහ දත්ත සමුදා සැලසුම වඩාත් කාර්යක්ෂම කිරීමට උපකාරී වේ."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදායක, වගු අතර සම්බන්ධතා ඇති කිරීමේදී භාවිතා කරන Foreign Key (ආගන්තුක යතුරක්) අනිවාර්යයෙන්ම තිබිය යුතු ලක්ෂණය කුමක්ද?",
        options: [
            "එය අනිවාර්යයෙන්ම Unique (අනන්‍ය) විය යුතුයි.",
            "එය අනිවාර්යයෙන්ම NOT NULL (හිස් නොවන) විය යුතුයි.",
            "එය යොමු කරන ප්‍රාථමික යතුරු අගය, යොමු කරන වගුවේ පැවතිය යුතුයි.",
            "එය යොමු කරන ප්‍රාථමික යතුරේ අගය, යොමු කරන වගුවේ වෙනස් විය හැක.",
            "එය වගුවේ ප්‍රාථමික යතුරේ කොටසක් විය යුතුයි."
        ],
        correctAnswerIndex: 2,
        explanation: "ආගන්තුක යතුරක් (Foreign Key) යනු එක් වගුවක තීරුවක් වන අතර, එය තවත් වගුවක ප්‍රාථමික යතුරකට යොමු වේ. දත්තවල විමර්ශන අඛණ්ඩතාව (Referential Integrity) පවත්වා ගැනීම සඳහා, ආගන්තුක යතුරකින් යොමු කරන ප්‍රාථමික යතුරු අගය, යොමු කරන වගුවේ (Parent Table) පැවතිය යුතුය. උදාහරණයක් ලෙස, 'ඇණවුම්' වගුවේ 'පාරිභෝගික_හැඳුනුම්පත' යනු 'පාරිභෝගික' වගුවේ 'පාරිභෝගික_හැඳුනුම්පත' ප්‍රාථමික යතුරට යොමු වන ආගන්තුක යතුරක් නම්, ඇණවුම් වගුවේ ඇති පාරිභෝගික හැඳුනුම්පත අගය, පාරිභෝගික වගුවේද තිබිය යුතුය."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදා ආකෘතියේ දත්ත සංවිධානය කරන්නේ කෙසේද?",
        options: [
            "අනුක්‍රමික ගොනු (sequential files) ලෙස.",
            "වගු (tables) ආකාරයෙන්, තීරු (attributes) සහ පේළි (tuples) අඩංගු කරමින්.",
            "ජාල ව්‍යුහයන් (network structures) ලෙස.",
            "දත්ත ගස් (data trees) ආකාරයෙන්.",
            "ලේඛන (documents) එකතුවක් ලෙස."
        ],
        correctAnswerIndex: 1,
        explanation: "සම්බන්ධක දත්ත සමුදා ආකෘතිය (Relational Database Model) පදනම් වී ඇත්තේ දත්ත වගු (tables) ආකාරයෙන් සංවිධානය කිරීම මතය. මෙම වගු තීරු (columns/attributes) සහ පේළි (rows/tuples/records) වලින් සමන්විත වන අතර, වගු අතර සම්බන්ධතා යතුරු (keys) මගින් ඇති කරයි. මෙය දත්ත කළමනාකරණයට සහ ප්‍රවේශ වීමට ඉතා කාර්යක්ෂම ක්‍රමයකි."
    },
    {
        questionText: "දත්ත සමුදායක 'Domain Integrity' (ක්ෂේත්‍ර අඛණ්ඩතාව) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "ප්‍රාථමික යතුරක අගයන් අද්විතීය විය යුතු බව.",
            "ආගන්තුක යතුරක් යොමු කරන ප්‍රාථමික යතුරේ අගය වලංගු විය යුතු බව.",
            "යම් තීරුවකට ඇතුළත් කළ හැකි අගයන්හි නිශ්චිත පරාසයක් හෝ වර්ගයක් තිබීම.",
            "වගුවක සෑම පේළියක්ම අද්විතීයව හඳුනාගත හැකි බව.",
            "යම් තීරුවකට අගයක් අනිවාර්යයෙන්ම තිබිය යුතු බව."
        ],
        correctAnswerIndex: 2,
        explanation: "Domain Integrity (ක්ෂේත්‍ර අඛණ්ඩතාව) යනු දත්ත සමුදායක දත්තවල අඛණ්ඩතාව පවත්වා ගැනීම සඳහා භාවිතා කරන එක් මූලධර්මයකි. එය යම් තීරුවකට ඇතුළත් කළ හැකි අගයන්හි නිශ්චිත පරාසයක් (e.g., වයස 0-150 අතර) හෝ වර්ගයක් (e.g., අකුරු පමණක්, ඉලක්කම් පමණක්) තිබිය යුතු බවට අදහස් කරයි. මෙය දත්තවල නිරවද්‍යතාව සහ වලංගුභාවය තහවුරු කිරීමට උපකාරී වේ."
    },
    {
        questionText: "වගු අතර 'එකට-එක' (One-to-One) සම්බන්ධතාවක් ඇතිවන්නේ කුමන තත්ත්වයක් යටතේද?",
        options: [
            "එක් වගුවක වාර්තාවක් තවත් වගුවක බොහෝ වාර්තා සමඟ සම්බන්ධ වන විට.",
            "වගුවක ප්‍රාථමික යතුරක් තවත් වගුවක ප්‍රාථමික යතුරට යොමු වන විට.",
            "වගුවක ප්‍රාථමික යතුරක් තවත් වගුවක අද්විතීය (Unique) සහ NOT NULL තීරුවකට යොමු වන විට.",
            "සම්බන්ධක වගුවක් භාවිතා කර වගු දෙකක් සම්බන්ධ කරන විට.",
            "ආගන්තුක යතුරක් කිසිදු ප්‍රාථමික යතුරකට යොමු නොවන විට."
        ],
        correctAnswerIndex: 2,
        explanation: "වගු අතර 'එකට-එක' (One-to-One) සම්බන්ධතාවක් ඇතිවන්නේ එක් වගුවක ප්‍රාථමික යතුරක් තවත් වගුවක අද්විතීය (Unique) සහ NOT NULL තීරුවකට (සාමාන්‍යයෙන් එය ප්‍රාථමික යතුරක් නොවන තීරුවක් වුවද, එහි අගයන් අද්විතීය සහ NULL නොවන නිසා එය සැබවින්ම ප්‍රාථමික යතුරක් ලෙස ක්‍රියා කරයි) ආගන්තුක යතුරක් ලෙස යොමු වන විටය. මෙය සත්‍ය වශයෙන්ම වගු දෙකක වාර්තා එකිනෙකට එකක් පමණක් සම්බන්ධ කිරීමට ඉඩ සලසයි."
    },
    {
        questionText: "දත්ත සමුදායක 'Entity Integrity' (ආයතන අඛණ්ඩතාව) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "ආගන්තුක යතුරක අගය NULL විය නොහැක.",
            "ප්‍රාථමික යතුරකට NULL අගයන් තිබිය නොහැක.",
            "ප්‍රාථමික යතුරක අගයන් අද්විතීය විය යුතු බව.",
            "ප්‍රාථමික යතුරකට NULL අගයන් තිබිය නොහැකි අතර, එය අද්විතීය විය යුතු බව.",
            "වගුවක සෑම තීරුවක්ම NULL නොවන බව."
        ],
        correctAnswerIndex: 3,
        explanation: "Entity Integrity (ආයතන අඛණ්ඩතාව) යනු සම්බන්ධක දත්ත සමුදායක මූලික නීතියකි. එය ප්‍රාථමික යතුරකට (Primary Key) NULL අගයන් තිබිය නොහැකි අතර, එහි අගයන් අද්විතීය විය යුතු බවට සහතික කරයි. මෙය වගුවක සෑම වාර්තාවක්ම අද්විතීයව හඳුනා ගත හැකි බවට සහතික වන අතර, දත්තවල අනුකූලතාව සහ නිරවද්‍යතාව සඳහා අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදායක 'සම්බන්ධතාවක්' (Relationship) මගින් නිරූපණය කරන්නේ කුමක්ද?",
        options: [
            "තීරු වල දත්ත වර්ග.",
            "වගුවක ඇති වාර්තා සංඛ්‍යාව.",
            "වගු දෙකක් අතර තර්කානුකූල සබැඳියාවක්.",
            "දත්ත සමුදායක සම්බාධක වර්ග.",
            "යම් තීරුවක දත්ත සඳහා ඇති කොන්දේසි."
        ],
        correctAnswerIndex: 2,
        explanation: "සම්බන්ධක දත්ත සමුදායක 'සම්බන්ධතාවක්' (Relationship) යනු වගු දෙකක් හෝ වැඩි ගණනක් අතර පවතින තර්කානුකූල සබැඳියාවකි. මෙම සබැඳියාව ප්‍රාථමික යතුරු සහ ආගන්තුක යතුරු භාවිතයෙන් ස්ථාපිත කරනු ලබන අතර, දත්ත එකිනෙකට සම්බන්ධ වී ඇති ආකාරය නිරූපණය කරයි. උදාහරණයක් ලෙස, 'ශිෂ්‍යයන්' සහ 'පාඨමාලා' වගු අතර සම්බන්ධතාවක් තිබිය හැක."
    },
    {
        questionText: "Unique Constraint (අනන්‍ය සම්බාධකය) භාවිතා කිරීමෙන් දත්ත සමුදායකට ලැබෙන ප්‍රධාන වාසිය කුමක්ද?",
        options: [
            "සෑම පේළියක්ම ප්‍රාථමික යතුරකින් හඳුනා ගත හැකි බව.",
            "යම් තීරුවක දත්ත අනිවාර්යයෙන්ම පිරවිය යුතු බව.",
            "තෝරාගත් තීරුවක අගයන් පුනරාවර්තනය වීම වැළැක්වීම, නමුත් NULL අගයන්ට ඉඩ දීම.",
            "වගු අතර සම්බන්ධතා ඇති කිරීම.",
            "සෑම තීරුවකටම පරමාණුක අගයන් තිබීම සහතික කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "Unique Constraint (අනන්‍ය සම්බාධකය) මගින් යම් තීරුවක (හෝ තීරු සමූහයක) අගයන් පුනරාවර්තනය වීම වළක්වයි, එනම් එම තීරුවේ අගයන් අද්විතීය බව සහතික කරයි. නමුත් Primary Key මෙන් නොව, Unique Constraint එකකට NULL අගයන් එකක් හෝ කිහිපයක් තිබීමට ඉඩ දිය හැක. මෙය දත්තවල සුවිශේෂත්වය පවත්වා ගැනීමට උපකාරී වේ."
    },
    {
        questionText: "දත්ත සමුදායක 'Attributes' (උපලක්ෂණ) සඳහා 'Data Types' (දත්ත වර්ග) නිර්වචනය කිරීමේ වැදගත්කම කුමක්ද?",
        options: [
            "දත්තවල ගබඩා කිරීමේ කාර්යක්ෂමතාව අඩු කිරීමට.",
            "තීරුවක ගබඩා කළ හැකි දත්ත වර්ගය සහ ප්‍රමාණය තීරණය කිරීම සහ දත්තවල අඛණ්ඩතාව සහ නිරවද්‍යතාව තහවුරු කිරීමට.",
            "ආගන්තුක යතුරු නිර්මාණය කිරීමට.",
            "දත්තවල පුනරුක්තිකරණය වැඩි කිරීමට.",
            "ප්‍රාථමික යතුරු වලට NULL අගයන් ඇතුළත් කිරීමට ඉඩ දීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "දත්ත සමුදායක 'Attributes' (උපලක්ෂණ) සඳහා 'Data Types' (දත්ත වර්ග) නිර්වචනය කිරීම අතිශය වැදගත් වේ. එය තීරුවක ගබඩා කළ හැකි දත්ත වර්ගය (උදා: සංඛ්‍යා, අකුරු, දිනයන්) සහ ප්‍රමාණය තීරණය කරයි. මෙලෙස දත්ත වර්ග නිර්වචනය කිරීමෙන් දත්තවල අඛණ්ඩතාව (integrity) සහ නිරවද්‍යතාව (accuracy) තහවුරු වේ, වැරදි දත්ත ඇතුළත් වීම වළක්වයි, සහ ගබඩා කිරීමේ කාර්යක්ෂමතාව වැඩි දියුණු කරයි."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදායක 'වගුවක Schema' (Table Schema) යනුවෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "වගුවක ඇති දත්තවල සත්‍ය අගයන්.",
            "වගුවකට ඇතුළත් කළ හැකි දත්ත ප්‍රමාණය.",
            "වගුවක ව්‍යුහය, එහි තීරු වල නම්, දත්ත වර්ග, සහ සම්බාධක.",
            "වගු අතර ඇති සම්බන්ධතා වර්ග.",
            "දත්ත සමුදාය කළමනාකරණ පද්ධතියේ (DBMS) මෘදුකාංග සංරචක."
        ],
        correctAnswerIndex: 2,
        explanation: "සම්බන්ධක දත්ත සමුදායක 'වගුවක Schema' (Table Schema) යනු එම වගුවේ ව්‍යුහය පිළිබඳ විස්තරයයි. මෙයට එහි තීරු වල නම් (attribute names), ඒ එක් එක් තීරුවේ දත්ත වර්ග (data types), සහ එම තීරුවලට හෝ වගුවට අදාළ වන සම්බාධක (constraints - Primary Key, Foreign Key, NOT NULL, UNIQUE, CHECK) ඇතුළත් වේ. එය දත්ත සමුදා නිර්මාණයේදී දත්ත ගබඩා කරන්නේ කෙසේද යන්න පිළිබඳ සැලැස්ම සපයයි."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදායක 'සම්බාධක' (Constraints) හි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "දත්ත සමුදායේ ගබඩා කිරීමේ ඉඩ ප්‍රමාණය වැඩි කිරීම.",
            "පරිශීලක අතුරු මුහුණත (user interface) නිර්මාණය කිරීම.",
            "දත්තවල අඛණ්ඩතාව සහ වලංගුභාවය පවත්වා ගැනීම සඳහා නීති රීති පැනවීම.",
            "වගු අතර 'බොහෝ-බොහෝ' (Many-to-Many) සම්බන්ධතා සෘජුවම ඇති කිරීම.",
            "දත්ත සමුදා පද්ධතියේ ආරක්ෂාව අඩු කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "සම්බාධක (Constraints) යනු සම්බන්ධක දත්ත සමුදායක දත්තවල අඛණ්ඩතාව (Integrity) සහ වලංගුභාවය (Validity) පවත්වා ගැනීම සඳහා භාවිතා කරන අත්‍යවශ්‍ය නීති රීති වේ. මෙම නීති මගින් දත්ත සමුදායට ඇතුළත් කළ හැකි දත්ත වර්ගය, එහි අගයන්ගේ අද්විතීයත්වය, අනිවාර්යයෙන්ම තිබිය යුතු අගයන් සහ වගු අතර සම්බන්ධතාවල අනුකූලතාව තහවුරු කරයි. උදාහරණ: Primary Key, Foreign Key, NOT NULL, UNIQUE, CHECK."
    },
    {
        questionText: "දත්ත සමුදායක 'Referential Integrity' (විමර්ශන අඛණ්ඩතාව) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "වගුවක ප්‍රාථමික යතුරු අගයන් අද්විතීය බව.",
            "ආගන්තුක යතුරු අගයන්, ඒවා යොමු කරන ප්‍රාථමික යතුරු වගුවේ වලංගු අගයන්ට අනුරූප විය යුතු බව.",
            "යම් තීරුවකට NULL අගයන් තිබිය නොහැකි බව.",
            "වගුවකට ප්‍රාථමික යතුරු කිහිපයක් තිබිය හැකි බව.",
            "තීරුවක දත්ත යම් පරාසයක් තුළ තිබිය යුතු බව."
        ],
        correctAnswerIndex: 1,
        explanation: "Referential Integrity (විමර්ශන අඛණ්ඩතාව) යනු දත්ත සමුදායක අඛණ්ඩතාව පවත්වා ගැනීමේ මූලධර්මයකි. එය Foreign Key (ආගන්තුක යතුරු) සම්බන්ධතා හා සම්බන්ධ වන අතර, ආගන්තුක යතුරු අගයන්, ඒවා යොමු කරන ප්‍රාථමික යතුරු වගුවේ (Parent Table) වලංගු අගයන්ට අනුරූප විය යුතු බවට සහතික කරයි. එනම්, යොමු කරන දත්ත සමුදායේ පවතින දත්ත මකා දැමීම හෝ වෙනස් කිරීම මගින්, යොමු කරන දත්ත අවලංගු වීම වැළැක්වීමයි."
    },
    {
        questionText: "දත්ත සමුදායක 'Relationships' (සම්බන්ධතා) නිර්මාණය කිරීමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "දත්ත පුනරුක්තිකරණය වැඩි කිරීමට.",
            "විවිධ වගු අතර දත්තවල තර්කානුකූල සම්බන්ධතා ස්ථාපිත කිරීම සහ ඒවායේ අඛණ්ඩතාව පවත්වා ගැනීම.",
            "දත්ත සමුදායේ ප්‍රමාණය අඩු කිරීමට.",
            "යාවත්කාලීන කිරීමේ විෂමතා වැඩි කිරීමට.",
            "දත්තවල රහස්‍යභාවය ආරක්ෂා කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "දත්ත සමුදායක 'Relationships' (සම්බන්ධතා) නිර්මාණය කිරීමේ ප්‍රධාන අරමුණ වන්නේ විවිධ වගු අතර දත්තවල තර්කානුකූල සම්බන්ධතා ස්ථාපිත කිරීමයි. මෙය දත්තවල අඛණ්ඩතාව (integrity) පවත්වා ගැනීමට, දත්ත පුනරුක්තිකරණය (redundancy) අවම කිරීමට, සහ දත්ත සමුදාය වඩාත් කාර්යක්ෂමව විමසීමට (query) සහ කළමනාකරණය කිරීමට ඉඩ සලසයි. උදාහරණයක් ලෙස, ගුරුවරුන් සහ ඔවුන් උගන්වන විෂයයන් අතර සම්බන්ධතාවක්."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදායක 'වගුවක්' (Table) යනුවෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "දත්ත ගබඩා කිරීම සඳහා භාවිතා කරන මෘදුකාංගය.",
            "දත්ත සමුදායේ ප්‍රධාන ගබඩා ඒකකය වන අතර, දත්ත තීරු සහ පේළි ලෙස සංවිධානය කර ඇත.",
            "දත්ත සමුදායක ඇති සියලුම සම්බාධකවල එකතුව.",
            "දත්ත සමුදායක ආරක්ෂාව පාලනය කරන යාන්ත්‍රණය.",
            "දත්ත සමුදායට දත්ත ඇතුළත් කිරීමට භාවිතා කරන අතුරු මුහුණත."
        ],
        correctAnswerIndex: 1,
        explanation: "සම්බන්ධක දත්ත සමුදායක 'වගුවක්' (Table) යනු දත්ත ගබඩා කිරීම සඳහා භාවිතා කරන ප්‍රධාන ගබඩා ඒකකයයි. එය දත්ත තීරු (columns/attributes) සහ පේළි (rows/tuples/records) ලෙස සංවිධානය කර ඇති අතර, එක් එක් තීරුවට නිශ්චිත දත්ත වර්ගයක් සහ නමක් ඇත. මෙය දත්ත කාණ්ඩගත කර, සබැඳිව ගබඩා කිරීමට උපකාරී වේ."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදාය ආකෘතියේ මූලික සංකල්පය කුමක්ද?",
        options: [
            "දත්ත ගස් (data trees) ආකාරයෙන් ගබඩා කිරීම.",
            "දත්ත ගබඩා කිරීම සඳහා ගොනු පද්ධති (file systems) භාවිතා කිරීම.",
            "දත්ත ගබඩා කිරීම සඳහා වගු (tables) භාවිතා කිරීම සහ ඒවා අතර සම්බන්ධතා ස්ථාපිත කිරීම.",
            "දත්ත ජාල ව්‍යුහයක් (network structure) ලෙස නිරූපණය කිරීම.",
            "දත්ත කිසිදු සංවිධානාත්මක ව්‍යුහයකින් තොරව ගබඩා කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "සම්බන්ධක දත්ත සමුදාය ආකෘතිය (Relational Database Model) පදනම් වී ඇත්තේ දත්ත වගු (tables) ආකාරයෙන් ගබඩා කිරීම මත වන අතර, මෙම වගු අතර ප්‍රාථමික යතුරු සහ ආගන්තුක යතුරු භාවිතයෙන් සම්බන්ධතා (relationships) ස්ථාපිත කරයි. මෙය දත්ත කළමනාකරණය, විමසීම සහ අඛණ්ඩතාව පවත්වා ගැනීම සඳහා කාර්යක්ෂම සහ නම්‍යශීලී ක්‍රමවේදයක් සපයයි. E.F. Codd විසින් මෙය මුලින්ම ඉදිරිපත් කරන ලදී."
    },
    {
        questionText: "SQL හි 'DATA CONTROL LANGUAGE (DCL)' කාණ්ඩයට අයත් විධානයක් ලෙස සැලකිය හැක්කේ කුමක්ද?",
        options: [
            "CREATE TABLE",
            "INSERT INTO",
            "GRANT",
            "SELECT",
            "ALTER TABLE"
        ],
        correctAnswerIndex: 2,
        explanation: "DATA CONTROL LANGUAGE (DCL) යනු දත්ත සමුදා පද්ධතියක ආරක්ෂාව සහ ප්‍රවේශ පාලනය සඳහා භාවිතා කරන SQL විධාන සමූහයකි. 'GRANT' විධානය මගින් පරිශීලකයින්ට දත්ත සමුදාය මත යම් වරප්‍රසාද (permissions) ලබා දෙන අතර, 'REVOKE' විධානය මගින් එම වරප්‍රසාද ඉවත් කරයි. අනෙකුත් විධාන DDL (CREATE, ALTER) හෝ DML (INSERT, SELECT) කාණ්ඩවලට අයත් වේ."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදාය ආකෘතියේ 'Cardinality' (කාදිනලිටි) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "වගුවක ඇති තීරු ගණන.",
            "වගුවක ඇති පේළි ගණන.",
            "වගු අතර සම්බන්ධතා වර්ගය (එකට-එක, එකට-බොහෝ).",
            "යම් තීරුවක අගයන්හි නිශ්චිත පරාසය.",
            "දත්ත සමුදායක ඇති වගු ගණන."
        ],
        correctAnswerIndex: 1,
        explanation: "සම්බන්ධක දත්ත සමුදාය ආකෘතියේදී 'Cardinality' (කාදිනලිටි) යනු වගුවක අඩංගු පේළි ගණන (Number of Tuples / Rows) වේ. එය වගුවක දත්ත ප්‍රමාණය පිළිබඳ මිනුමක් ලෙස සැලකේ. අනෙක් අතට, 'Degree' (සන්ධීතාව) යනු වගුවක ඇති තීරු ගණන (Number of Attributes / Columns) වේ."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදායක 'Degree' (සන්ධීතාව) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "වගුවක ඇති පේළි ගණන.",
            "වගුවක ඇති තීරු ගණන.",
            "වගු අතර ඇති සම්බන්ධතා වර්ගය.",
            "දත්ත සමුදායක ඇති සම්බාධක ගණන.",
            "යම් තීරුවකට ඇතුළත් කළ හැකි අගයන්හි වර්ග."
        ],
        correctAnswerIndex: 1,
        explanation: "සම්බන්ධක දත්ත සමුදාය ආකෘතියේදී 'Degree' (සන්ධීතාව) යනු වගුවක අඩංගු තීරු ගණන (Number of Attributes / Columns) වේ. එය වගුවක ව්‍යුහයේ පළල පිළිබඳ මිනුමක් ලෙස සැලකේ. 'Cardinality' යනු පේළි ගණනයි."
    },
    {
        questionText: "දත්ත සමුදායක 'Integrity Constraints' (අඛණ්ඩතා සම්බාධක) භාවිතයෙන් ලැබෙන ප්‍රධාන වාසිය කුමක්ද?",
        options: [
            "දත්ත සමුදාය කළමනාකරණ පද්ධතියේ ස්ථාපනය පහසු කිරීම.",
            "දත්ත ඇතුළත් කිරීමේ වේගය වැඩි කිරීම.",
            "දත්තවල නිරවද්‍යතාව, අනුකූලතාව සහ විශ්වසනීයත්වය සහතික කිරීම.",
            "දත්ත සමුදාය ප්‍රවේශ වීමට අවසර නැති පරිශීලකයින්ට ඉඩ දීම.",
            "දත්ත ගබඩා කිරීම සඳහා අවශ්‍ය ඉඩ ප්‍රමාණය වැඩි කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "Integrity Constraints (අඛණ්ඩතා සම්බාධක) යනු දත්ත සමුදායක දත්තවල නිරවද්‍යතාව (accuracy), අනුකූලතාව (consistency) සහ විශ්වසනීයත්වය (reliability) සහතික කිරීම සඳහා භාවිතා කරන නීති රීති වේ. මෙම සම්බාධක (උදා: Primary Key, Foreign Key, NOT NULL, UNIQUE, CHECK) දත්ත සමුදායට වැරදි හෝ අනුකූල නොවන දත්ත ඇතුළත් වීම වළක්වයි, එමගින් දත්තවල ගුණාත්මකභාවය ඉහළ නංවයි."
    },
    {
        questionText: "දත්ත සමුදායක 'Schema' (ස්කීමා) යනු කුමක්ද?",
        options: [
            "දත්ත සමුදායේ ගබඩා කර ඇති සත්‍ය දත්ත.",
            "දත්ත සමුදායේ ව්‍යුහය සහ එහි අඩංගු දත්ත පිළිබඳ තාර්කික සැලැස්ම (Logical Design).",
            "දත්ත සමුදායට ප්‍රවේශ වීමට අවශ්‍ය පරිශීලක අනුග්‍රහයන්.",
            "දත්ත සමුදා කළමනාකරණ පද්ධතියේ ක්‍රියාත්මක වන යෙදුම්.",
            "දත්ත සමුදාය උපස්ථ (backup) කිරීමට භාවිතා කරන ක්‍රියාවලිය."
        ],
        correctAnswerIndex: 1,
        explanation: "දත්ත සමුදායක 'Schema' (ස්කීමා) යනු දත්ත සමුදායේ ව්‍යුහය සහ එහි අඩංගු දත්ත පිළිබඳ තාර්කික සැලැස්ම (Logical Design) වේ. එයට වගු, තීරු, දත්ත වර්ග, සම්බන්ධතා සහ සම්බාධක වැනි දත්ත සමුදායේ සියලුම අර්ථ දැක්වීම් ඇතුළත් වේ. එය දත්ත ගබඩා කරන්නේ කෙසේද යන්න පිළිබඳ සිතියමක් වැනිය, නමුත් සත්‍ය දත්ත අඩංගු නොවේ."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදායක 'Data Dictionary' (දත්ත ශබ්දකෝෂය) හි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "දත්ත සමුදායේ සත්‍ය දත්ත ගබඩා කිරීම.",
            "දත්ත සමුදා ව්‍යුහය (schema) පිළිබඳ සියලුම තොරතුරු ගබඩා කිරීම සහ කළමනාකරණය කිරීම.",
            "පරිශීලකයන්ට දත්ත ඇතුළත් කිරීමට අතුරු මුහුණතක් සැපයීම.",
            "දත්තවල ප්‍රවේශය සහ ආරක්ෂාව පාලනය කිරීම.",
            "දත්ත සමුදාය පිටපත් කිරීමට සහ ප්‍රතිසාධනය කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "Data Dictionary (දත්ත ශබ්දකෝෂය) යනු දත්ත සමුදාය කළමනාකරණ පද්ධතියේ (DBMS) අත්‍යවශ්‍ය සංරචකයකි. එය දත්ත සමුදා ව්‍යුහය (schema) පිළිබඳ සියලුම තොරතුරු (metadata) ගබඩා කරන අතර, එය කළමනාකරණය කරයි. මෙයට වගු වල නම්, තීරු වල නම්, දත්ත වර්ග, සම්බාධක, සම්බන්ධතා, සහ ප්‍රවේශ අනුග්‍රහයන් වැනි විස්තර ඇතුළත් වේ. එය දත්ත සමුදායේ ස්වයං-විස්තරාත්මක ගුණාංගය සඳහා අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදායක, 'View' (දර්ශනයක්) නිර්මාණය කිරීමේ ප්‍රධාන වාසිය කුමක්ද?",
        options: [
            "දත්ත සමුදායේ භෞතික ගබඩා කිරීමේ ඉඩ වැඩි කිරීම.",
            "දත්ත සමුදායේ කාර්ය සාධනය අඩු කිරීම.",
            "සංවේදී දත්ත සඳහා ආරක්ෂක ස්ථරයක් සැපයීම සහ සංකීර්ණ විමසුම් සරල කිරීම.",
            "දත්තවල පුනරුක්තිකරණය වැඩි කිරීම.",
            "නව දත්ත ඇතුළත් කිරීමේ විෂමතා ඇති කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "දත්ත සමුදායක 'View' (දර්ශනයක්) යනු එකක් හෝ කිහිපයක් වගු වලින් ලබාගත් අතථ්‍ය වගුවකි (virtual table). එය භෞතිකව දත්ත ගබඩා නොකරන නමුත්, දත්තවල ආරක්ෂක ස්ථරයක් සැපයීමට, පරිශීලකයින්ට පෙන්වන දත්ත ප්‍රමාණය සීමා කිරීමට, සහ සංකීර්ණ විමසුම් සරල කිරීමට භාවිතා වේ. උදාහරණයක් ලෙස, සේවකයින්ගේ වැටුප් තොරතුරු හැර අනෙකුත් තොරතුරු පමණක් පෙන්වීමට View එකක් නිර්මාණය කළ හැක."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදාය ආකෘතියේ 'Index' (දර්ශකය) හි ප්‍රධාන කාර්යභාරය කුමක්ද?",
        options: [
            "දත්ත සමුදායේ භෞතික ව්‍යුහය වෙනස් කිරීම.",
            "වගුවකට නව තීරු එකතු කිරීම.",
            "දත්ත ඇතුළත් කිරීමේ වේගය වැඩි කිරීම.",
            "දත්ත ලබා ගැනීමේ (retrieval) කාර්ය සාධනය වැඩි දියුණු කිරීම, විශේෂයෙන් විශාල දත්ත කට්ටල සඳහා.",
            "දත්තවල පුනරුක්තිකරණය වැඩි කිරීම."
        ],
        correctAnswerIndex: 3,
        explanation: "දත්ත සමුදායක 'Index' (දර්ශකය) යනු පොතක අන්තර්ගත පිටුවක් මෙන් ක්‍රියා කරයි. එය දත්ත ලබා ගැනීමේ (retrieval) කාර්ය සාධනය වැඩි දියුණු කිරීම සඳහා භාවිතා කරන දත්ත ව්‍යුහයකි. විශේෂයෙන් විශාල දත්ත කට්ටලවලින් දත්ත සෙවීමේදී සහ වර්ග කිරීමේදී Index භාවිතා කිරීමෙන් විමසුම් (queries) වේගවත් වේ. කෙසේ වෙතත්, Index එකතු කිරීමෙන් දත්ත ඇතුළත් කිරීමේ සහ යාවත්කාලීන කිරීමේ ක්‍රියාවලිය මන්දගාමී විය හැක."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදායක, 'Attribute' (උපලක්ෂණයකට) කිසිදු අගයක් නොමැති විට භාවිතා වන 'NULL' අගය පිළිබඳ නිවැරදි විස්තරය කුමක්ද?",
        options: [
            "එය '0' (ශුන්‍ය) යන සංඛ්‍යාත්මක අගයට සමාන වේ.",
            "එය හිස් තන්තුවකට (empty string) සමාන වේ.",
            "එය අගයක් නොමැති බව හෝ නොදන්නා බව (unknown) නිරූපණය කරයි.",
            "එය UNIQUE Constraint එකක් උල්ලංඝනය කරයි.",
            "එය Primary Key Constraint එකක් සඳහා අත්‍යවශ්‍ය වේ."
        ],
        correctAnswerIndex: 2,
        explanation: "සම්බන්ධක දත්ත සමුදායක 'NULL' අගය යනු කිසිදු අගයක් නොමැති බව, අදාළ නොවන බව, හෝ නොදන්නා බව (unknown) නිරූපණය කිරීමයි. එය ශුන්‍ය (0) හෝ හිස් තන්තුවක් (empty string) වැනි සැබෑ දත්ත අගයක් නොවේ. Primary Key එකකට NULL අගයක් තිබිය නොහැක (NOT NULL Constraint). Unique Constraint එකකට NULL අගයන් එකක් හෝ කිහිපයක් තිබිය හැක."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදා ආකෘතියේ, 'Data Definition Language (DDL)' හි ප්‍රධාන කාර්යභාරය කුමක්ද?",
        options: [
            "දත්ත සමුදායක දත්ත ඇතුළත් කිරීම, යාවත්කාලීන කිරීම, මැකීම සහ ලබා ගැනීම.",
            "දත්ත සමුදායක ව්‍යුහය නිර්මාණය කිරීමට, වෙනස් කිරීමට සහ ඉවත් කිරීමට.",
            "දත්ත සමුදාය ප්‍රවේශ පාලනය සහ ආරක්ෂාව කළමනාකරණය කිරීම.",
            "දත්ත සමුදායේ කාර්ය සාධනය විශ්ලේෂණය කිරීම.",
            "දත්ත සමුදාය උපස්ථ (backup) කිරීම සහ ප්‍රතිසාධනය කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "Data Definition Language (DDL) යනු දත්ත සමුදායක ව්‍යුහය (schema) නිර්මාණය කිරීමට, වෙනස් කිරීමට සහ ඉවත් කිරීමට භාවිතා කරන SQL විධාන සමූහයකි. 'CREATE TABLE', 'ALTER TABLE', 'DROP TABLE', 'CREATE INDEX', 'DROP DATABASE' වැනි විධාන DDL කාණ්ඩයට අයත් වේ. මෙය දත්ත සමුදායේ ඇටසැකිල්ල නිර්මාණය කිරීමට සහ කළමනාකරණය කිරීමට අත්‍යවශ්‍ය වේ."
    },

    // 8.6 දත්ත සමුදාය පද්ධතියක ප්‍රධාන සංරචක විශ්ලේෂණය කරයි.
    {
        questionText: "දත්ත සමුදාය කළමනාකරණ පද්ධතියක් (DBMS) පිළිබඳව වඩාත් නිවැරදි විස්තරය කුමක්ද?",
        options: [
            "දත්ත ගබඩා කරන භෞතික දෘඪාංගය.",
            "දත්ත සමුදායන් නිර්මාණය කිරීමට, කළමනාකරණය කිරීමට සහ ප්‍රවේශ වීමට භාවිතා කරන මෘදුකාංග පද්ධතිය.",
            "පරිශීලක අතුරු මුහුණත නිර්මාණය කරන මෙවලමක්.",
            "දත්ත සමුදායක ඇති සියලුම දත්ත.",
            "දත්තවල පුනරුක්තිකරණය අවම කරන ක්‍රියාවලිය."
        ],
        correctAnswerIndex: 1,
        explanation: "දත්ත සමුදාය කළමනාකරණ පද්ධතියක් (DBMS - Database Management System) යනු දත්ත සමුදායන් නිර්මාණය කිරීමට, කළමනාකරණය කිරීමට, ප්‍රවේශ වීමට, සහ ඒවායේ අඛණ්ඩතාව, ආරක්ෂාව සහ කාර්ය සාධනය පවත්වා ගැනීමට භාවිතා කරන මෘදුකාංග පද්ධතියකි. MySQL, Oracle, PostgreSQL, SQL Server වැනි ඒවා DBMS වලට උදාහරණ වේ."
    },
    {
        questionText: "SQL (Structured Query Language) යනු කුමක්ද?",
        options: [
            "වෙබ් අඩවි නිර්මාණය කිරීමට භාවිතා කරන ක්‍රමලේඛන භාෂාවක්.",
            "ගණිතමය ගණනය කිරීම් සඳහා භාවිතා කරන භාෂාවක්.",
            "දත්ත සමුදායන් සමඟ සන්නිවේදනය කිරීමට භාවිතා කරන ප්‍රධාන භාෂාව.",
            "පරිගණක පද්ධතිවල මෙහෙයුම් පද්ධති නිර්මාණය කිරීමට භාවිතා කරන භාෂාවක්.",
            "දත්ත සංකේතනය කිරීමට (encryption) භාවිතා කරන භාෂාවක්."
        ],
        correctAnswerIndex: 2,
        explanation: "SQL (Structured Query Language) යනු දත්ත සමුදායන් සමඟ සන්නිවේදනය කිරීමට, දත්ත නිර්මාණය කිරීමට, වෙනස් කිරීමට, මැකීමට, සහ ලබා ගැනීමට භාවිතා කරන සම්මත භාෂාවයි. එය Relational Database Management Systems (RDBMS) සඳහා බහුලව භාවිතා වේ. SQL හි DDL, DML, DCL, TCL (Transaction Control Language) වැනි කාණ්ඩ ඇත."
    },
    {
        questionText: "DML (Data Manipulation Language) හි ප්‍රධාන කාර්යභාරය කුමක්ද?",
        options: [
            "දත්ත සමුදායක ව්‍යුහය නිර්මාණය කිරීම.",
            "දත්ත සමුදායක දත්ත ඇතුළත් කිරීමට, යාවත්කාලීන කිරීමට, මැකීමට සහ ලබා ගැනීමට.",
            "දත්ත සමුදායක ආරක්ෂාව පාලනය කිරීම.",
            "දත්ත සමුදායක දත්ත වර්ග නිර්වචනය කිරීම.",
            "දත්ත සමුදායක වගු ඉවත් කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "DML (Data Manipulation Language) යනු දත්ත සමුදායක ගබඩා කර ඇති සත්‍ය දත්ත සමඟ අන්තර් ක්‍රියා කිරීමට භාවිතා කරන SQL විධාන සමූහයකි. 'INSERT' (දත්ත ඇතුළත් කිරීම), 'UPDATE' (දත්ත නවීකරණය කිරීම), 'DELETE' (දත්ත මැකීම), සහ 'SELECT' (දත්ත ලබා ගැනීම) වැනි විධාන DML කාණ්ඩයට අයත් වේ. මෙය දත්ත සමුදායේ අන්තර්ගතය කළමනාකරණය කිරීමට අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "නව වගුවක් දත්ත සමුදායක නිර්මාණය කිරීමට භාවිතා කරන DDL විධානය කුමක්ද?",
        options: [
            "INSERT INTO",
            "UPDATE",
            "DROP TABLE",
            "CREATE TABLE",
            "SELECT"
        ],
        correctAnswerIndex: 3,
        explanation: "'CREATE TABLE' යනු නව වගුවක් දත්ත සමුදායක නිර්මාණය කිරීමට භාවිතා කරන DDL (Data Definition Language) විධානයයි. මෙම විධානය මගින් වගුවේ නම, තීරු වල නම්, දත්ත වර්ග සහ අවශ්‍ය සම්බාධක නිර්වචනය කරයි. උදාහරණයක් ලෙස: `CREATE TABLE Students (StudentID INT PRIMARY KEY, Name VARCHAR(50));`"
    },
    {
        questionText: "පවතින වගුවක ව්‍යුහය වෙනස් කිරීමට (උදා: නව තීරුවක් එකතු කිරීමට) භාවිතා කරන DDL විධානය කුමක්ද?",
        options: [
            "MODIFY TABLE",
            "ALTER TABLE",
            "CHANGE TABLE",
            "UPDATE TABLE",
            "SET TABLE"
        ],
        correctAnswerIndex: 1,
        explanation: "'ALTER TABLE' යනු පවතින වගුවක ව්‍යුහය වෙනස් කිරීමට (උදා: නව තීරුවක් එකතු කිරීමට, පවතින තීරුවක් වෙනස් කිරීමට, තීරුවක් ඉවත් කිරීමට, සම්බාධක එකතු කිරීමට හෝ ඉවත් කිරීමට) භාවිතා කරන DDL (Data Definition Language) විධානයයි. උදාහරණයක් ලෙස: `ALTER TABLE Students ADD COLUMN Email VARCHAR(100);`"
    },
    {
        questionText: "වගුවකට නව දත්ත පේළියක් ඇතුළත් කිරීමට භාවිතා කරන DML විධානය කුමක්ද?",
        options: [
            "ADD ROW",
            "CREATE ROW",
            "INSERT INTO",
            "UPDATE ROW",
            "SAVE ROW"
        ],
        correctAnswerIndex: 2,
        explanation: "'INSERT INTO' යනු වගුවකට නව දත්ත පේළියක් (record) ඇතුළත් කිරීමට භාවිතා කරන DML (Data Manipulation Language) විධානයයි. උදාහරණයක් ලෙස: `INSERT INTO Students (StudentID, Name) VALUES (1, 'Kamal');`"
    },
    {
        questionText: "දත්ත සමුදායකින් දත්ත ලබා ගැනීමට (retrieve) භාවිතා කරන මූලික DML විධානය කුමක්ද?",
        options: [
            "GET DATA",
            "FETCH RECORDS",
            "RETRIEVE FROM",
            "EXTRACT INFO",
            "SELECT"
        ],
        correctAnswerIndex: 4,
        explanation: "'SELECT' යනු දත්ත සමුදායකින් දත්ත ලබා ගැනීමට (retrieve) භාවිතා කරන මූලික DML (Data Manipulation Language) විධානයයි. එය භාවිතයෙන් වගුවකින් තීරු සහ පේළි තෝරා ගැනීමට හෝ වගු කිහිපයක් ඒකාබද්ධ කර දත්ත ලබා ගැනීමට හැකිය. උදාහරණයක් ලෙස: `SELECT * FROM Students;` හෝ `SELECT Name, Email FROM Students WHERE StudentID = 1;`"
    },
    {
        questionText: "වගුවක පවතින දත්ත වෙනස් කිරීමට (modify) භාවිතා කරන DML විධානය කුමක්ද?",
        options: [
            "MODIFY",
            "CHANGE",
            "REPLACE",
            "UPDATE",
            "ALTER DATA"
        ],
        correctAnswerIndex: 3,
        explanation: "'UPDATE' යනු වගුවක පවතින දත්ත වෙනස් කිරීමට හෝ නවීකරණය කිරීමට භාවිතා කරන DML (Data Manipulation Language) විධානයයි. 'WHERE' clause එකක් භාවිතයෙන් වෙනස් කළ යුතු පේළි තෝරා ගනී. උදාහරණයක් ලෙස: `UPDATE Students SET Email = 'kamal@example.com' WHERE StudentID = 1;`"
    },
    {
        questionText: "වගුවකින් දත්ත පේළියක් ඉවත් කිරීමට භාවිතා කරන DML විධානය කුමක්ද?",
        options: [
            "REMOVE",
            "ERASE",
            "DROP ROW",
            "DELETE FROM",
            "CLEAR"
        ],
        correctAnswerIndex: 3,
        explanation: "'DELETE FROM' යනු වගුවකින් දත්ත පේළියක් හෝ පේළි කිහිපයක් ඉවත් කිරීමට භාවිතා කරන DML (Data Manipulation Language) විධානයයි. 'WHERE' clause එකක් භාවිතයෙන් මැකීමට අවශ්‍ය පේළි තෝරා ගනී. උදාහරණයක් ලෙස: `DELETE FROM Students WHERE StudentID = 1;` 'DROP TABLE' යනු වගුව සම්පූර්ණයෙන්ම මකා දැමීමට භාවිතා කරන DDL විධානයකි."
    },
    {
        questionText: "සම්පූර්ණ දත්ත සමුදායක්ම ඉවත් කිරීමට (delete) භාවිතා කරන DDL විධානය කුමක්ද?",
        options: [
            "REMOVE DATABASE",
            "ERASE DATABASE",
            "DELETE DATABASE",
            "DROP DATABASE",
            "UNINSTALL DATABASE"
        ],
        correctAnswerIndex: 3,
        explanation: "'DROP DATABASE' යනු සම්පූර්ණ දත්ත සමුදායක්ම (එහි අඩංගු සියලුම වගු සහ දත්ත සමඟ) ස්ථිරවම ඉවත් කිරීමට භාවිතා කරන DDL (Data Definition Language) විධානයයි. මෙය ඉතා ප්‍රවේශමෙන් භාවිතා කළ යුතු විධානයකි, මන්ද එය මකා දැමූ දත්ත නැවත ලබා ගැනීමට අපහසු විය හැකි බැවිනි."
    },
    {
        questionText: "SQL හි 'INNER JOIN' මෙහෙයුමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "වගු දෙකක ඇති සියලුම දත්ත එකට එක් කිරීම.",
            "වගු දෙකක් අතර පොදු නොවන දත්ත ලබා ගැනීම.",
            "වගු දෙකක් අතර පොදු තීරුවල අගයන් ගැලපෙන පේළි පමණක් ඒකාබද්ධ කර ලබා ගැනීම.",
            "එක් වගුවකින් පමණක් දත්ත ලබා ගැනීම.",
            "දත්ත සමුදායෙන් වගු ඉවත් කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "'INNER JOIN' යනු SQL හි වගු කිහිපයකින් දත්ත ලබා ගැනීමට භාවිතා කරන JOIN වර්ගයකි. එය වගු දෙකක් අතර පොදු තීරුවල අගයන් ගැලපෙන (matching) පේළි පමණක් ඒකාබද්ධ කර ප්‍රතිඵල කට්ටලයක් ලෙස ලබා දෙයි. මෙය විවිධ වගු අතර සම්බන්ධිත දත්ත එකට දැකීමට අවශ්‍ය විට ඉතා ප්‍රයෝජනවත් වේ."
    },
    {
        questionText: "DBMS (දත්ත සමුදාය කළමනාකරණ පද්ධතිය) හි 'Data Dictionary' (දත්ත ශබ්දකෝෂය) හි කාර්යභාරය කුමක්ද?",
        options: [
            "දත්ත සමුදායේ සත්‍ය දත්ත ගබඩා කිරීම.",
            "දත්ත සමුදාය කළමනාකරණය සඳහා අවශ්‍ය මෙවලම් සැපයීම.",
            "දත්ත සමුදා ව්‍යුහය (schema) පිළිබඳ සියලු තොරතුරු (metadata) ගබඩා කිරීම.",
            "දත්ත සමුදායේ ආරක්ෂාව පාලනය කිරීම.",
            "දත්ත සමුදාය උපස්ථ (backup) කිරීමේ ක්‍රියාවලිය ක්‍රියාත්මක කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "DBMS හි 'Data Dictionary' (දත්ත ශබ්දකෝෂය) යනු දත්ත සමුදා ව්‍යුහය (schema) පිළිබඳ සියලු තොරතුරු, එනම් metadata, ගබඩා කරන පද්ධති වගුවකි. මෙයට වගු වල නම්, තීරු වල දත්ත වර්ග, සම්බාධක, දර්ශක, සහ ප්‍රවේශ අනුග්‍රහයන් වැනි විස්තර ඇතුළත් වේ. එය දත්ත සමුදායේ 'විස්තරය පිළිබඳ විස්තරය' ලෙස හැඳින්විය හැක."
    },
    {
        questionText: "දත්ත සමුදායක ප්‍රාථමික යතුරක් (Primary Key) එක් කිරීමට භාවිතා කරන DDL විධානය කුමක්ද?",
        options: [
            "ADD PRIMARY KEY",
            "SET PRIMARY KEY",
            "ALTER TABLE ... ADD PRIMARY KEY",
            "CREATE PRIMARY KEY",
            "MODIFY PRIMARY KEY"
        ],
        correctAnswerIndex: 2,
        explanation: "පවතින වගුවකට ප්‍රාථමික යතුරක් එක් කිරීමට හෝ පවතින ප්‍රාථමික යතුරක් ඉවත් කිරීමට 'ALTER TABLE' DDL විධානය භාවිතා කරයි. උදාහරණයක් ලෙස: `ALTER TABLE Students ADD PRIMARY KEY (StudentID);` ප්‍රාථමික යතුරක් ඉවත් කිරීමට: `ALTER TABLE Students DROP PRIMARY KEY;`"
    },
    {
        questionText: "දත්ත සමුදායක 'Transaction Control Language (TCL)' කාණ්ඩයට අයත් විධානයක් ලෙස සැලකිය හැක්කේ කුමක්ද?",
        options: [
            "SELECT",
            "INSERT",
            "COMMIT",
            "CREATE",
            "GRANT"
        ],
        correctAnswerIndex: 2,
        explanation: "Transaction Control Language (TCL) යනු දත්ත සමුදායේ ගනුදෙනු (transactions) කළමනාකරණය කිරීමට භාවිතා කරන SQL විධාන සමූහයකි. 'COMMIT' මගින් ගනුදෙනුවක වෙනස්කම් ස්ථිරවම සුරකියි, 'ROLLBACK' මගින් වෙනස්කම් අවලංගු කරයි, සහ 'SAVEPOINT' මගින් ගනුදෙනුවක් තුළ සුරැකීමේ ලක්ෂ්‍යයක් නිර්මාණය කරයි. මෙය දත්තවල අඛණ්ඩතාව සහ ගනුදෙනු වල විශ්වසනීයත්වය සහතික කරයි."
    },
    {
        questionText: "SQL හි 'WHERE' clause එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "විමසුමක ප්‍රතිඵල වර්ග කිරීමට.",
            "විමසුමක ප්‍රතිඵල සීමා කිරීමට කොන්දේසි දැක්වීමට.",
            "වගු අතර සම්බන්ධතා ඇති කිරීමට.",
            "දත්ත සමුදායක නව වගු නිර්මාණය කිරීමට.",
            "දත්තවල පුනරුක්තිකරණය අවම කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "'WHERE' clause එක 'SELECT', 'UPDATE', 'DELETE' වැනි DML විධාන සමඟ භාවිතා වන අතර, විමසුමක ප්‍රතිඵල සීමා කිරීම සඳහා කොන්දේසි (conditions) දැක්වීමට එය භාවිතා වේ. එය මගින් අවශ්‍යතාවයට අනුව දත්ත පෙරහන් කර ලබා ගැනීමට හෝ වෙනස් කිරීමට ඉඩ සලසයි. උදාහරණයක් ලෙස: `SELECT * FROM Students WHERE Age > 18;`"
    },
    {
        questionText: "SQL හි 'ORDER BY' clause එකෙහි ප්‍රධාන කාර්යභාරය කුමක්ද?",
        options: [
            "විමසුමක ප්‍රතිඵල සමූහගත කිරීමට.",
            "විමසුමක ප්‍රතිඵල සීමා කිරීමට.",
            "විමසුමක ප්‍රතිඵල නිශ්චිත තීරුවක් හෝ තීරු කිහිපයක් ඔස්සේ වර්ග කිරීමට (sort).",
            "වගු දෙකක් ඒකාබද්ධ කිරීමට.",
            "දත්ත සමුදායක ව්‍යුහය වෙනස් කිරීමට."
        ],
        correctAnswerIndex: 2,
        explanation: "'ORDER BY' clause එක 'SELECT' විධානය සමඟ භාවිතා වන අතර, විමසුමක ප්‍රතිඵල නිශ්චිත තීරුවක් හෝ තීරු කිහිපයක් ඔස්සේ වර්ග කිරීමට (ascending - ASC හෝ descending - DESC) එය භාවිතා වේ. මෙය දත්ත පෙන්වන පිළිවෙල පාලනය කිරීමට උපකාරී වේ. උදාහරණයක් ලෙස: `SELECT Name, Age FROM Students ORDER BY Age DESC;`"
    },
    {
        questionText: "දත්ත සමුදාය කළමනාකරණ පද්ධතියක (DBMS) 'Query Processor' (විමසුම් සකසනය) හි ප්‍රධාන කාර්යභාරය කුමක්ද?",
        options: [
            "දත්ත සමුදායට දත්ත ඇතුළත් කිරීම.",
            "පරිශීලකයින්ගෙන් ලැබෙන විමසුම් (queries) විශ්ලේෂණය කර ක්‍රියාත්මක කිරීම.",
            "දත්ත සමුදායේ ආරක්ෂාව පාලනය කිරීම.",
            "දත්ත සමුදායේ භෞතික ගබඩා කිරීම කළමනාකරණය කිරීම.",
            "දත්ත සමුදායේ උපස්ථ (backup) නිර්මාණය කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "DBMS හි 'Query Processor' (විමසුම් සකසනය) යනු පරිශීලකයින්ගෙන් ලැබෙන SQL විමසුම් විශ්ලේෂණය කර, ඒවා ක්‍රියාත්මක කිරීම සඳහා ප්‍රශස්ත සැලැස්මක් (execution plan) ජනනය කර, එම සැලැස්ම ක්‍රියාත්මක කරන සංරචකයයි. මෙය දත්ත සමුදායෙන් දත්ත කාර්යක්ෂමව ලබා ගැනීම සහ කළමනාකරණය කිරීම සඳහා අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "SQL හි 'GROUP BY' clause එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "විමසුමක ප්‍රතිඵල වර්ග කිරීමට.",
            "විමසුමක ප්‍රතිඵල සීමා කිරීමට.",
            "විමසුමක ප්‍රතිඵල නිශ්චිත තීරුවක අගයන් අනුව සමූහගත කර, සමූහගත කාර්යයන් (aggregate functions) යෙදීමට.",
            "වගු දෙකක් ඒකාබද්ධ කිරීමට.",
            "දත්ත සමුදායක නව වගු නිර්මාණය කිරීමට."
        ],
        correctAnswerIndex: 2,
        explanation: "'GROUP BY' clause එක 'SELECT' විධානය සමඟ භාවිතා වන අතර, විමසුමක ප්‍රතිඵල නිශ්චිත තීරුවක අගයන් අනුව සමූහගත කිරීමට එය භාවිතා වේ. 'COUNT', 'SUM', 'AVG', 'MIN', 'MAX' වැනි aggregate functions සමඟ මෙය බහුලව භාවිතා වේ. උදාහරණයක් ලෙස: `SELECT Department, COUNT(StudentID) FROM Students GROUP BY Department;`"
    },
    {
        questionText: "SQL හි 'HAVING' clause එකෙහි ප්‍රධාන කාර්යභාරය කුමක්ද?",
        options: [
            "තනි පේළි පෙරහන් කිරීමට.",
            "GROUP BY clause එක මගින් සාදන ලද සමූහ (groups) පෙරහන් කිරීමට කොන්දේසි දැක්වීමට.",
            "වගු අතර සම්බන්ධතා ඇති කිරීමට.",
            "දත්ත සමුදායක ව්‍යුහය වෙනස් කිරීමට.",
            "දත්ත ඇතුළත් කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "'HAVING' clause එක 'GROUP BY' clause එක සමඟ පමණක් භාවිතා වන අතර, එය GROUP BY clause එක මගින් සාදන ලද සමූහ (groups) පෙරහන් කිරීමට කොන්දේසි දැක්වීමට භාවිතා වේ. 'WHERE' clause එක තනි පේළි පෙරහන් කරන අතර, 'HAVING' clause එක සමූහ පෙරහන් කරයි. උදාහරණයක් ලෙස: `SELECT Department, COUNT(StudentID) FROM Students GROUP BY Department HAVING COUNT(StudentID) > 5;`"
    },
    {
        questionText: "දත්ත සමුදායක 'VIEW' (දර්ශනයක්) ඉවත් කිරීමට භාවිතා කරන DDL විධානය කුමක්ද?",
        options: [
            "DELETE VIEW",
            "REMOVE VIEW",
            "DROP VIEW",
            "ERASE VIEW",
            "CLEAR VIEW"
        ],
        correctAnswerIndex: 2,
        explanation: "'DROP VIEW' යනු දත්ත සමුදායක පවතින 'View' (දර්ශනයක්) ඉවත් කිරීමට භාවිතා කරන DDL (Data Definition Language) විධානයයි. View යනු සත්‍ය දත්ත ගබඩා නොකරන අතථ්‍ය වගුවක් බැවින්, එය ඉවත් කිරීමෙන් සත්‍ය දත්ත වලට හානියක් සිදු නොවේ."
    },
    {
        questionText: "SQL හි 'DISTINCT' කීවර්ඩ් එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "විමසුමක ප්‍රතිඵල වර්ග කිරීමට.",
            "විමසුමක ප්‍රතිඵලවල ඇති පුනරාවර්තන පේළි ඉවත් කර අද්විතීය අගයන් පමණක් ලබා ගැනීමට.",
            "වගු අතර සම්බන්ධතා ඇති කිරීමට.",
            "දත්ත සමුදායක නව වගු නිර්මාණය කිරීමට.",
            "දත්තවල පුනරුක්තිකරණය වැඩි කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "'DISTINCT' කීවර්ඩ් එක 'SELECT' විධානය සමඟ භාවිතා වන අතර, විමසුමක ප්‍රතිඵලවල ඇති පුනරාවර්තන පේළි (duplicate rows) ඉවත් කර අද්විතීය අගයන් (unique values) පමණක් ලබා ගැනීමට එය භාවිතා වේ. උදාහරණයක් ලෙස: `SELECT DISTINCT Department FROM Employees;` මෙය සේවකයින් සේවය කරන අද්විතීය දෙපාර්තමේන්තු ලැයිස්තුවක් ලබා දෙනු ඇත."
    },
    {
        questionText: "දත්ත සමුදායක 'INDEX' (දර්ශකය) ඉවත් කිරීමට භාවිතා කරන DDL විධානය කුමක්ද?",
        options: [
            "DELETE INDEX",
            "REMOVE INDEX",
            "ERASE INDEX",
            "DROP INDEX",
            "CLEAR INDEX"
        ],
        correctAnswerIndex: 3,
        explanation: "'DROP INDEX' යනු දත්ත සමුදායක පවතින 'INDEX' (දර්ශකය) ඉවත් කිරීමට භාවිතා කරන DDL (Data Definition Language) විධානයයි. දර්ශකයක් ඉවත් කිරීමෙන් දත්ත ලබා ගැනීමේ වේගය අඩු විය හැකි නමුත්, දත්ත ඇතුළත් කිරීමේ සහ යාවත්කාලීන කිරීමේ වේගය වැඩි විය හැක."
    },
    {
        questionText: "SQL හි 'COUNT()' aggregate function එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "තීරුවක අගයන් එකතු කිරීමට.",
            "තීරුවක ඇති ඉහළම අගය ලබා ගැනීමට.",
            "විමසුමක ප්‍රතිඵල කට්ටලයේ පේළි ගණන ගණනය කිරීමට.",
            "තීරුවක සාමාන්‍ය අගය ලබා ගැනීමට.",
            "තීරුවක ඇති අඩුම අගය ලබා ගැනීමට."
        ],
        correctAnswerIndex: 2,
        explanation: "'COUNT()' යනු SQL හි Aggregate Function එකක් වන අතර, එය විමසුමක ප්‍රතිඵල කට්ටලයේ පේළි ගණන (හෝ NULL නොවන අගයන් සහිත පේළි ගණන) ගණනය කිරීමට භාවිතා වේ. 'COUNT(*)' මගින් සියලුම පේළි ගණනය කරන අතර, 'COUNT(ColumnName)' මගින් NULL නොවන අගයන් සහිත පේළි පමණක් ගණනය කරයි. උදාහරණයක් ලෙස: `SELECT COUNT(*) FROM Students;`"
    },
    {
        questionText: "දත්ත සමුදායක 'Schema' (ස්කීමා) වෙනස් කිරීමට භාවිතා කරන DDL විධානය කුමක්ද?",
        options: [
            "ALTER SCHEMA",
            "MODIFY SCHEMA",
            "CHANGE SCHEMA",
            "UPDATE SCHEMA",
            "SET SCHEMA"
        ],
        correctAnswerIndex: 0,
        explanation: "'ALTER SCHEMA' යනු දත්ත සමුදායක 'Schema' (ස්කීමා) හි නම වෙනස් කිරීමට හෝ ස්කීමා හි හිමිකාරිත්වය (ownership) වෙනස් කිරීමට භාවිතා කරන DDL විධානයයි. මෙය දත්ත සමුදායේ ව්‍යුහමය වෙනස්කම් සිදු කිරීමට උපකාරී වේ, නමුත් වගුවක ව්‍යුහය වෙනස් කිරීමට 'ALTER TABLE' භාවිතා වේ."
    },
    {
        questionText: "SQL හි 'AVG()' aggregate function එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "තීරුවක අගයන් එකතු කිරීමට.",
            "තීරුවක ඇති ඉහළම අගය ලබා ගැනීමට.",
            "විමසුමක ප්‍රතිඵල කට්ටලයේ පේළි ගණන ගණනය කිරීමට.",
            "තීරුවක සංඛ්‍යාත්මක අගයන්හි සාමාන්‍යය (average) ගණනය කිරීමට.",
            "තීරුවක ඇති අඩුම අගය ලබා ගැනීමට."
        ],
        correctAnswerIndex: 3,
        explanation: "'AVG()' යනු SQL හි Aggregate Function එකක් වන අතර, එය තීරුවක සංඛ්‍යාත්මක අගයන්හි සාමාන්‍යය (average) ගණනය කිරීමට භාවිතා වේ. උදාහරණයක් ලෙස: `SELECT AVG(Marks) FROM Students;` මෙය සිසුන්ගේ ලකුණු වල සාමාන්‍යය ලබා දෙනු ඇත."
    },
    {
        questionText: "SQL හි 'SUM()' aggregate function එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "තීරුවක ඇති ඉහළම අගය ලබා ගැනීමට.",
            "තීරුවක ඇති අඩුම අගය ලබා ගැනීමට.",
            "විමසුමක ප්‍රතිඵල කට්ටලයේ පේළි ගණන ගණනය කිරීමට.",
            "තීරුවක සංඛ්‍යාත්මක අගයන්හි එකතුව (sum) ගණනය කිරීමට.",
            "තීරුවක සාමාන්‍ය අගය ලබා ගැනීමට."
        ],
        correctAnswerIndex: 3,
        explanation: "'SUM()' යනු SQL හි Aggregate Function එකක් වන අතර, එය තීරුවක සංඛ්‍යාත්මක අගයන්හි එකතුව (sum) ගණනය කිරීමට භාවිතා වේ. උදාහරණයක් ලෙස: `SELECT SUM(Amount) FROM Orders;` මෙය ඇණවුම්වල මුළු එකතුව ලබා දෙනු ඇත."
    },
    {
        questionText: "SQL හි 'MAX()' aggregate function එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "තීරුවක ඇති අඩුම අගය ලබා ගැනීමට.",
            "තීරුවක සංඛ්‍යාත්මක අගයන්හි එකතුව ගණනය කිරීමට.",
            "තීරුවක ඇති ඉහළම අගය (maximum value) ලබා ගැනීමට.",
            "තීරුවක සාමාන්‍ය අගය ලබා ගැනීමට.",
            "විමසුමක ප්‍රතිඵල කට්ටලයේ පේළි ගණන ගණනය කිරීමට."
        ],
        correctAnswerIndex: 2,
        explanation: "'MAX()' යනු SQL හි Aggregate Function එකක් වන අතර, එය තීරුවක ඇති ඉහළම අගය (maximum value) ලබා ගැනීමට භාවිතා වේ. මෙය සංඛ්‍යාත්මක, අකුරු හෝ දින තීරු සඳහා භාවිතා කළ හැක. උදාහරණයක් ලෙස: `SELECT MAX(Age) FROM Students;` මෙය සිසුන් අතරින් වැඩිම වයස ලබා දෙනු ඇත."
    },
    {
        questionText: "SQL හි 'MIN()' aggregate function එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "තීරුවක ඇති ඉහළම අගය ලබා ගැනීමට.",
            "තීරුවක සංඛ්‍යාත්මක අගයන්හි එකතුව ගණනය කිරීමට.",
            "තීරුවක ඇති අඩුම අගය (minimum value) ලබා ගැනීමට.",
            "තීරුවක සාමාන්‍ය අගය ලබා ගැනීමට.",
            "විමසුමක ප්‍රතිඵල කට්ටලයේ පේළි ගණන ගණනය කිරීමට."
        ],
        correctAnswerIndex: 2,
        explanation: "'MIN()' යනු SQL හි Aggregate Function එකක් වන අතර, එය තීරුවක ඇති අඩුම අගය (minimum value) ලබා ගැනීමට භාවිතා වේ. මෙය සංඛ්‍යාත්මක, අකුරු හෝ දින තීරු සඳහා භාවිතා කළ හැක. උදාහරණයක් ලෙස: `SELECT MIN(Salary) FROM Employees;` මෙය සේවකයින් අතරින් අඩුම වැටුප ලබා දෙනු ඇත."
    },
    {
        questionText: "දත්ත සමුදායක 'Subquery' (අනු විමසුමක්) භාවිතයේ ප්‍රධාන වාසිය කුමක්ද?",
        options: [
            "දත්ත සමුදායේ භෞතික ව්‍යුහය වෙනස් කිරීමට.",
            "සංකීර්ණ විමසුම් වඩාත් සරල, කළමනාකරණය කළ හැකි කොටස් වලට බෙදා, ප්‍රධාන විමසුමක ප්‍රතිඵල තීරණය කිරීමට.",
            "දත්ත සමුදායේ ගබඩා කිරීමේ ඉඩ වැඩි කිරීමට.",
            "දත්තවල පුනරුක්තිකරණය වැඩි කිරීමට.",
            "දත්ත සමුදායේ ආරක්ෂාව අඩු කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "SQL හි 'Subquery' (අනු විමසුමක්) යනු තවත් SQL විමසුමක් (query) තුළ ඇති විමසුමකි. එය සංකීර්ණ විමසුම් වඩාත් සරල, කළමනාකරණය කළ හැකි කොටස් වලට බෙදා, ප්‍රධාන විමසුමක ප්‍රතිඵල තීරණය කිරීමට භාවිතා වේ. Subquery එක මුලින්ම ක්‍රියාත්මක වන අතර එහි ප්‍රතිඵලය ප්‍රධාන විමසුම සඳහා යොදා ගනී. උදාහරණයක් ලෙස: `SELECT Name FROM Students WHERE Age > (SELECT AVG(Age) FROM Students);`"
    },
    {
        questionText: "SQL හි 'LIKE' operator එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "සංඛ්‍යාත්මක අගයන් සංසන්දනය කිරීමට.",
            "නියම අකුරු අගයන් සංසන්දනය කිරීමට.",
            "තීරුවක අගයන් යම් රටාවකට (pattern) ගැලපේදැයි පරීක්ෂා කිරීමට.",
            "දිනයන් සංසන්දනය කිරීමට.",
            "Boolean අගයන් සංසන්දනය කිරීමට."
        ],
        correctAnswerIndex: 2,
        explanation: "'LIKE' operator එක SQL හි 'WHERE' clause එක සමඟ භාවිතා වන අතර, තීරුවක අගයන් යම් රටාවකට (pattern) ගැලපේදැයි පරීක්ෂා කිරීමට එය භාවිතා වේ. '%'(බොහෝ අක්ෂර) සහ '_'(තනි අක්ෂර) වැනි wildcards සමඟ මෙය බහුලව භාවිතා වේ. උදාහරණයක් ලෙස: `SELECT Name FROM Employees WHERE Name LIKE 'A%';` (නම 'A' අකුරෙන් ආරම්භ වන සේවකයින්)."
    },
    {
        questionText: "SQL හි 'IN' operator එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "තීරුවක අගයක් නිශ්චිත පරාසයක් තුළ තිබේදැයි පරීක්ෂා කිරීමට.",
            "තීරුවක අගයක් අගයන් ලැයිස්තුවක් (list of values) තුළ තිබේදැයි පරීක්ෂා කිරීමට.",
            "තීරුවක අගයන් දෙකක් අතර තිබේදැයි පරීක්ෂා කිරීමට.",
            "තීරුවක අගයක් NULL දැයි පරීක්ෂා කිරීමට.",
            "තීරුවක අගයන් අද්විතීය දැයි පරීක්ෂා කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "'IN' operator එක SQL හි 'WHERE' clause එක සමඟ භාවිතා වන අතර, තීරුවක අගයක් අගයන් ලැයිස්තුවක් (list of values) තුළ තිබේදැයි පරීක්ෂා කිරීමට එය භාවිතා වේ. උදාහරණයක් ලෙස: `SELECT Name FROM Students WHERE City IN ('Colombo', 'Kandy');` (කොළඹ හෝ මහනුවර නගරවල සිසුන්)."
    },
    {
        questionText: "SQL හි 'BETWEEN' operator එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "තීරුවක අගයක් අගයන් ලැයිස්තුවක් තුළ තිබේදැයි පරීක්ෂා කිරීමට.",
            "තීරුවක අගයක් නිශ්චිත අගයන් දෙකක් (පරාසයක්) අතර තිබේදැයි පරීක්ෂා කිරීමට.",
            "තීරුවක අගයන් යම් රටාවකට ගැලපේදැයි පරීක්ෂා කිරීමට.",
            "තීරුවක අගයක් NULL දැයි පරීක්ෂා කිරීමට.",
            "තීරුවක අගයන් අද්විතීය දැයි පරීක්ෂා කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "'BETWEEN' operator එක SQL හි 'WHERE' clause එක සමඟ භාවිතා වන අතර, තීරුවක අගයක් නිශ්චිත අගයන් දෙකක් (පරාසයක්) අතර තිබේදැයි පරීක්ෂා කිරීමට එය භාවිතා වේ. මෙය සංඛ්‍යාත්මක, අකුරු හෝ දින තීරු සඳහා භාවිතා කළ හැක. උදාහරණයක් ලෙස: `SELECT Name, Age FROM Students WHERE Age BETWEEN 18 AND 25;`"
    },
    {
        questionText: "DBMS (දත්ත සමුදාය කළමාරණ පද්ධතිය) හි 'Storage Manager' (ගබඩා කළමනාකරු) හි ප්‍රධාන කාර්යභාරය කුමක්ද?",
        options: [
            "දත්ත සමුදායට දත්ත ඇතුළත් කිරීමට පරිශීලක අතුරු මුහුණතක් සැපයීම.",
            "පරිශීලකයින්ගෙන් ලැබෙන විමසුම් ක්‍රියාත්මක කිරීම.",
            "දත්ත සමුදායේ භෞතික දත්ත ගබඩා කිරීම, ප්‍රතිසාධනය කිරීම සහ ප්‍රවේශ කිරීම කළමනාකරණය කිරීම.",
            "දත්ත සමුදායේ ආරක්ෂාව පාලනය කිරීම.",
            "දත්තවල පුනරුක්තිකරණය අවම කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "DBMS හි 'Storage Manager' (ගබඩා කළමනාකරු) යනු දත්ත සමුදායේ භෞතික දත්ත ගබඩා කිරීම, ප්‍රතිසාධනය කිරීම සහ ප්‍රවේශ කිරීම කළමනාකරණය කරන සංරචකයයි. එය දත්ත ගොනු, දර්ශක, ලොග් ගොනු වැනි දේ සමඟ අන්තර් ක්‍රියා කරන අතර, දත්ත කාර්යක්ෂමව ගබඩා කිරීම සහ ලබා ගැනීම සහතික කරයි."
    },
    {
        questionText: "වගුවකට ආගන්තුක යතුරක් (Foreign Key) එක් කිරීමට භාවිතා කරන DDL විධානය කුමක්ද?",
        options: [
            "ADD FOREIGN KEY",
            "SET FOREIGN KEY",
            "ALTER TABLE ... ADD CONSTRAINT ... FOREIGN KEY",
            "CREATE FOREIGN KEY",
            "MODIFY FOREIGN KEY"
        ],
        correctAnswerIndex: 2,
        explanation: "පවතින වගුවකට ආගන්තුක යතුරක් එක් කිරීමට 'ALTER TABLE' DDL විධානය භාවිතා කරයි. උදාහරණයක් ලෙස: `ALTER TABLE Orders ADD CONSTRAINT FK_CustomerID FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID);` මෙහිදී CustomerID යනු Orders වගුවේ ආගන්තුක යතුර වන අතර, එය Customers වගුවේ CustomerID ප්‍රාථමික යතුරට යොමු වේ."
    },
    {
        questionText: "දත්ත සමුදායක DDL (Data Definition Language) භාවිතයෙන් වගුවක් නිර්මාණය කිරීමේදී 'VARCHAR(n)' දත්ත වර්ගය භාවිතා කරන්නේ කුමන අවස්ථාවකදීද?",
        options: [
            "පූර්ණ සංඛ්‍යා (integers) ගබඩා කිරීමට.",
            "දශම සංඛ්‍යා (decimal numbers) ගබඩා කිරීමට.",
            "වෙනස් විය හැකි දිගකින් යුත් අකුරු හෝ සංකේත (strings) ගබඩා කිරීමට.",
            "සත්‍ය/අසත්‍ය (boolean) අගයන් ගබඩා කිරීමට.",
            "දිනයන් සහ වේලාවන් ගබඩා කිරීමට."
        ],
        correctAnswerIndex: 2,
        explanation: "'VARCHAR(n)' යනු SQL හි දත්ත වර්ගයකි. එය වෙනස් විය හැකි දිගකින් යුත් අකුරු හෝ සංකේත (strings) ගබඩා කිරීමට භාවිතා කරයි. 'n' යනු ගබඩා කළ හැකි උපරිම අක්ෂර සංඛ්‍යාවයි. උදාහරණයක් ලෙස, 'Name VARCHAR(50)' යනු නමක් ගබඩා කිරීමට භාවිතා කරන අතර, එහි උපරිම අක්ෂර 50ක් විය හැක, නමුත් සත්‍ය දිග අනුව ඉඩ වෙන් කරයි. මෙය ගබඩා ඉඩ කාර්යක්ෂමව භාවිතා කිරීමට උපකාරී වේ."
    },
    {
        questionText: "දත්ත සමුදායක DDL භාවිතයෙන් වගුවක් නිර්මාණය කිරීමේදී 'INT' දත්ත වර්ගය භාවිතා කරන්නේ කුමන අවස්ථාවකදීද?",
        options: [
            "දශම සංඛ්‍යා (decimal numbers) ගබඩා කිරීමට.",
            "අකුරු හෝ සංකේත (strings) ගබඩා කිරීමට.",
            "දිනයන් සහ වේලාවන් ගබඩා කිරීමට.",
            "පූර්ණ සංඛ්‍යා (integers) ගබඩා කිරීමට.",
            "විශාල අකුරු පෙළ (large text) ගබඩා කිරීමට."
        ],
        correctAnswerIndex: 3,
        explanation: "'INT' යනු SQL හි දත්ත වර්ගයකි. එය පූර්ණ සංඛ්‍යා (integers) ගබඩා කිරීමට භාවිතා කරයි. උදාහරණයක් ලෙස, 'StudentID INT' යනු ශිෂ්‍ය හැඳුනුම්පතක් ගබඩා කිරීමට භාවිතා කරන අතර, එයට දශම ස්ථාන නොමැති පූර්ණ සංඛ්‍යා අගයන් පමණක් ඇතුළත් කළ හැක."
    },
    {
        questionText: "දත්ත සමුදායක DDL භාවිතයෙන් වගුවක් නිර්මාණය කිරීමේදී 'DATE' දත්ත වර්ගය භාවිතා කරන්නේ කුමන අවස්ථාවකදීද?",
        options: [
            "කාලය පමණක් ගබඩා කිරීමට.",
            "දිනයන් (dates) පමණක් ගබඩා කිරීමට.",
            "දිනයන් සහ වේලාවන් (date and time) ගබඩා කිරීමට.",
            "වසර පමණක් ගබඩා කිරීමට.",
            "මාස පමණක් ගබඩා කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "'DATE' යනු SQL හි දත්ත වර්ගයකි. එය දිනයන් (dates) පමණක් (වසර, මාසය, දිනය) ගබඩා කිරීමට භාවිතා කරයි. වේලාව සමඟ ගබඩා කිරීමට 'DATETIME' හෝ 'TIMESTAMP' වැනි දත්ත වර්ග භාවිතා වේ. උදාහරණයක් ලෙස, 'DOB DATE' යනු උපන් දිනයක් ගබඩා කිරීමට භාවිතා කරයි."
    },
    {
        questionText: "SQL හි 'AS' කීවර්ඩ් එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "වගුවකට නව තීරුවක් එකතු කිරීමට.",
            "තීරුවක දත්ත වර්ගය වෙනස් කිරීමට.",
            "තීරුවකට හෝ වගුවකට තාවකාලික අන්වර්ථ නාමයක් (alias) ලබා දීමට.",
            "විමසුමක ප්‍රතිඵල වර්ග කිරීමට.",
            "දත්තවල පුනරුක්තිකරණය අවම කිරීමට."
        ],
        correctAnswerIndex: 2,
        explanation: "'AS' කීවර්ඩ් එක SQL හි 'SELECT' විධානය සමඟ බහුලව භාවිතා වන අතර, තීරුවකට හෝ වගුවකට තාවකාලික අන්වර්ථ නාමයක් (alias) ලබා දීමට එය භාවිතා වේ. මෙය විමසුම් වඩාත් කියවිය හැකි සහ තේරුම් ගත හැකි බවට පත් කරයි, විශේෂයෙන් සංකීර්ණ විමසුම් වලදී. උදාහරණයක් ලෙස: `SELECT StudentID AS ID, Name AS FullName FROM Students;`"
    },
    {
        questionText: "DBMS (දත්ත සමුදාය කළමනාකරණ පද්ධතිය) හි 'Backup and Recovery Manager' (උපස්ථ සහ ප්‍රතිසාධන කළමනාකරු) හි ප්‍රධාන කාර්යභාරය කුමක්ද?",
        options: [
            "දත්ත සමුදායේ ආරක්ෂක වරප්‍රසාද කළමනාකරණය කිරීම.",
            "දත්ත සමුදායේ දත්ත වලංගුභාවය පරීක්ෂා කිරීම.",
            "දත්ත නැතිවීමකදී හෝ පද්ධති අක්‍රිය වීමකදී දත්ත සමුදාය නැවත යථා තත්ත්වයට පත් කිරීමට අවශ්‍ය ක්‍රියාවලි කළමනාකරණය කිරීම.",
            "පරිශීලකයින්ගෙන් ලැබෙන විමසුම් ක්‍රියාත්මක කිරීම.",
            "දත්ත සමුදායේ භෞතික ගබඩා කිරීම කළමනාකරණය කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "DBMS හි 'Backup and Recovery Manager' (උපස්ථ සහ ප්‍රතිසාධන කළමනාකරු) යනු දත්ත නැතිවීමකදී (උදා: දෘඪාංග අසාර්ථක වීම, මෘදුකාංග දෝෂ, මානව දෝෂ) හෝ පද්ධති අක්‍රිය වීමකදී දත්ත සමුදාය නැවත යථා තත්ත්වයට පත් කිරීමට (restore) අවශ්‍ය උපස්ථ (backup) නිර්මාණය කිරීම සහ ප්‍රතිසාධන ක්‍රියාවලි කළමනාකරණය කිරීම සඳහා වගකිව යුතු සංරචකයයි. මෙය දත්තවල ආරක්ෂාව සහ අඛණ්ඩ ක්‍රියාකාරිත්වය සහතික කිරීමට අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "SQL හි 'LIMIT' clause එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "විමසුමක ප්‍රතිඵල වර්ග කිරීමට.",
            "විමසුමක ප්‍රතිඵල කට්ටලයෙන් ලබා ගත යුතු පේළි ගණන සීමා කිරීමට.",
            "විමසුමක ප්‍රතිඵල සමූහගත කිරීමට.",
            "වගු අතර සම්බන්ධතා ඇති කිරීමට.",
            "දත්ත සමුදායක ව්‍යුහය වෙනස් කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "'LIMIT' clause එක 'SELECT' විධානය සමඟ භාවිතා වන අතර, විමසුමක ප්‍රතිඵල කට්ටලයෙන් ලබා ගත යුතු පේළි ගණන සීමා කිරීමට එය භාවිතා වේ. මෙය විශාල දත්ත කට්ටලවලින් ඉහළම හෝ පහළම වාර්තා කිහිපය ලබා ගැනීමට, හෝ පිටුගත කිරීම (pagination) සඳහා ප්‍රයෝජනවත් වේ. උදාහරණයක් ලෙස: `SELECT * FROM Products ORDER BY Price DESC LIMIT 10;` (මිල අනුව ඉහළම නිෂ්පාදන 10)."
    },
    {
        questionText: "SQL හි 'OFFSET' clause එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "විමසුමක ප්‍රතිඵලවල ආරම්භක ස්ථානය මඟ හැරිය යුතු පේළි ගණන තීරණය කිරීමට.",
            "විමසුමක ප්‍රතිඵල කට්ටලයෙන් ලබා ගත යුතු පේළි ගණන සීමා කිරීමට.",
            "විමසුමක ප්‍රතිඵල සමූහගත කිරීමට.",
            "වගු අතර සම්බන්ධතා ඇති කිරීමට.",
            "දත්ත සමුදායක ව්‍යුහය වෙනස් කිරීමට."
        ],
        correctAnswerIndex: 0,
        explanation: "'OFFSET' clause එක 'SELECT' විධානය සමඟ 'LIMIT' clause එකට අමතරව භාවිතා වන අතර, විමසුමක ප්‍රතිඵලවල ආරම්භක ස්ථානයෙන් මඟ හැරිය යුතු පේළි ගණන තීරණය කිරීමට එය භාවිතා වේ. මෙය දත්ත පිටුගත කිරීම (pagination) සඳහා අත්‍යවශ්‍ය වේ. උදාහරණයක් ලෙස: `SELECT * FROM Products LIMIT 10 OFFSET 20;` (21 වන පේළියේ සිට පේළි 10ක් ලබා ගන්න)."
    },
    {
        questionText: "දත්ත සමුදාය කළමනාකරණ පද්ධතියක (DBMS) 'Concurrency Control Manager' (සමගාමී පාලන කළමනාකරු) හි ප්‍රධාන කාර්යභාරය කුමක්ද?",
        options: [
            "දත්ත සමුදායේ ආරක්ෂාව පාලනය කිරීම.",
            "එකවර බහු පරිශීලකයින් දත්ත සමුදායට ප්‍රවේශ වන විට දත්ත අඛණ්ඩතාව සහතික කිරීම.",
            "දත්ත සමුදායේ දත්ත උපස්ථ කිරීම.",
            "දත්ත සමුදායේ ව්‍යුහය නිර්මාණය කිරීම.",
            "පරිශීලකයින්ගෙන් ලැබෙන විමසුම් ක්‍රියාත්මක කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "DBMS හි 'Concurrency Control Manager' (සමගාමී පාලන කළමනාකරු) යනු එකවර බහු පරිශීලකයින් දත්ත සමුදායට ප්‍රවේශ වී වෙනස්කම් සිදු කරන විට, දත්තවල අඛණ්ඩතාව (consistency) සහතික කිරීම සඳහා වගකිව යුතු සංරචකයයි. මෙය දත්තවල ගැටුම් (conflicts) වළක්වා ගැනීමට සහ ගනුදෙනු (transactions) නිවැරදිව ක්‍රියාත්මක වන බව සහතික කිරීමට Lock, Timestamping, Optimistic Concurrency Control වැනි යාන්ත්‍රණ භාවිතා කරයි."
    },
    {
        questionText: "SQL හි 'NULL' අගයක් සඳහා කොන්දේසියක් දැක්වීමට භාවිතා කරන operator එක කුමක්ද?",
        options: [
            "= NULL",
            "<> NULL",
            "IS NULL",
            "NOT NULL",
            "NULLABLE"
        ],
        correctAnswerIndex: 2,
        explanation: "SQL හි 'NULL' අගයක් සඳහා කොන්දේසියක් දැක්වීමට '=' හෝ '<>' වැනි සංසන්දනාත්මක operator (comparison operators) භාවිතා කළ නොහැක. ඒ වෙනුවට 'IS NULL' (අගය NULL නම්) සහ 'IS NOT NULL' (අගය NULL නොවේ නම්) operator භාවිතා කළ යුතුය. උදාහරණයක් ලෙස: `SELECT Name FROM Employees WHERE Email IS NULL;` (ඊමේල් ලිපිනයක් නැති සේවකයින්)."
    },
    {
        questionText: "SQL හි 'UNION' operator එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "වගු දෙකක් අතර පොදු දත්ත ලබා ගැනීමට.",
            "විමසුම් දෙකක හෝ වැඩි ගණනක ප්‍රතිඵල කට්ටල ඒකාබද්ධ කර අද්විතීය පේළි පමණක් ලබා ගැනීමට.",
            "වගු දෙකක් අතර පොදු නොවන දත්ත ලබා ගැනීමට.",
            "වගු දෙකක් INNER JOIN කිරීමට.",
            "විමසුම් දෙකක ප්‍රතිඵල අතර වෙනස සොයා ගැනීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "'UNION' operator එක SQL හි විමසුම් දෙකක හෝ වැඩි ගණනක ප්‍රතිඵල කට්ටල ඒකාබද්ධ කිරීමට භාවිතා වේ. එය ඒකාබද්ධ කිරීමේදී පුනරාවර්තන පේළි (duplicate rows) ඉවත් කර අද්විතීය පේළි පමණක් ලබා දෙයි. UNION භාවිතා කරන විමසුම්වල තීරු ගණන සහ දත්ත වර්ග එකම විය යුතුය. උදාහරණයක් ලෙස: `SELECT Name FROM Students UNION SELECT Name FROM Teachers;`"
    },
    {
        questionText: "SQL හි 'UNION ALL' operator එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "විමසුම් දෙකක ප්‍රතිඵල කට්ටල ඒකාබද්ධ කර අද්විතීය පේළි පමණක් ලබා ගැනීමට.",
            "විමසුම් දෙකක ප්‍රතිඵල කට්ටල ඒකාබද්ධ කර, පුනරාවර්තන පේළි ඉවත් නොකර සියලුම පේළි ලබා ගැනීමට.",
            "වගු දෙකක් අතර පොදු දත්ත ලබා ගැනීමට.",
            "වගු දෙකක් INNER JOIN කිරීමට.",
            "විමසුම් දෙකක ප්‍රතිඵල අතර වෙනස සොයා ගැනීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "'UNION ALL' operator එක SQL හි විමසුම් දෙකක හෝ වැඩි ගණනක ප්‍රතිඵල කට්ටල ඒකාබද්ධ කිරීමට භාවිතා වේ. 'UNION' මෙන් නොව, 'UNION ALL' ඒකාබද්ධ කිරීමේදී පුනරාවර්තන පේළි (duplicate rows) ඉවත් නොකර සියලුම පේළි ලබා දෙයි. මෙය දත්තවල කාර්ය සාධනය වැඩි දියුණු කළ හැකි අතර, පුනරාවර්තන පේළි වැදගත් වන අවස්ථා සඳහා සුදුසු වේ."
    },
    {
        questionText: "DBMS (දත්ත සමුදාය කළමනාකරණ පද්ධතිය) හි 'Security Manager' (ආරක්ෂක කළමනාකරු) හි ප්‍රධාන කාර්යභාරය කුමක්ද?",
        options: [
            "දත්ත සමුදායේ භෞතික ගබඩා කිරීම කළමනාකරණය කිරීම.",
            "දත්තවල පුනරුක්තිකරණය අවම කිරීම.",
            "දත්ත සමුදායට අනවසර ප්‍රවේශය වැළැක්වීම සහ පරිශීලක වරප්‍රසාද (permissions) කළමනාකරණය කිරීම.",
            "පරිශීලකයින්ගෙන් ලැබෙන විමසුම් ක්‍රියාත්මක කිරීම.",
            "දත්ත සමුදායේ දත්ත වලංගුභාවය පරීක්ෂා කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "DBMS හි 'Security Manager' (ආරක්ෂක කළමනාකරු) යනු දත්ත සමුදායට අනවසර ප්‍රවේශය වැළැක්වීම, දත්තවල රහස්‍යභාවය (confidentiality) සහ අඛණ්ඩතාව (integrity) ආරක්ෂා කිරීම සඳහා වගකිව යුතු සංරචකයයි. එය පරිශීලක සත්‍යාපනය (authentication) සහ අවසර දීම (authorization) ක්‍රියාත්මක කරන අතර, පරිශීලක වරප්‍රසාද (permissions) 'GRANT' සහ 'REVOKE' වැනි DCL විධාන භාවිතයෙන් කළමනාකරණය කරයි."
    },
    {
        questionText: "SQL හි 'JOIN ON' clause එකෙහි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "INNER JOIN මෙහෙයුමකදී වගු අතර සම්බන්ධක තීරුව (joining column) නිශ්චිතව දැක්වීමට.",
            "විමසුමක ප්‍රතිඵල වර්ග කිරීමට.",
            "විමසුමක ප්‍රතිඵල සමූහගත කිරීමට.",
            "දත්තවල පුනරුක්තිකරණය අවම කිරීමට.",
            "දත්ත සමුදායක ව්‍යුහය වෙනස් කිරීමට."
        ],
        correctAnswerIndex: 0,
        explanation: "SQL හි 'JOIN ON' clause එක 'INNER JOIN', 'LEFT JOIN', 'RIGHT JOIN' වැනි JOIN මෙහෙයුම් සමඟ භාවිතා වන අතර, වගු අතර සම්බන්ධතාවය ඇති කරන තීරුව (joining column) හෝ කොන්දේසිය (joining condition) නිශ්චිතව දැක්වීමට එය භාවිතා වේ. උදාහරණයක් ලෙස: `SELECT S.Name, C.CourseName FROM Students S INNER JOIN Courses C ON S.CourseID = C.CourseID;`"
    },
    {
        questionText: "SQL හි 'COUNT(DISTINCT ColumnName)' හි ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "තීරුවක ඇති NULL නොවන අගයන් ගණන ගණනය කිරීමට.",
            "තීරුවක ඇති සියලුම අගයන් ගණන ගණනය කිරීමට.",
            "තීරුවක ඇති අද්විතීය (unique) සහ NULL නොවන අගයන් ගණන ගණනය කිරීමට.",
            "තීරුවක ඇති පුනරාවර්තන අගයන් ගණන ගණනය කිරීමට.",
            "තීරුවක සාමාන්‍ය අගය ගණනය කිරීමට."
        ],
        correctAnswerIndex: 2,
        explanation: "'COUNT(DISTINCT ColumnName)' යනු SQL හි Aggregate Function එකකි. එය නිශ්චිත තීරුවක ඇති අද්විතීය (unique) සහ NULL නොවන අගයන් ගණන ගණනය කිරීමට භාවිතා වේ. උදාහරණයක් ලෙස: `SELECT COUNT(DISTINCT City) FROM Customers;` (පාරිභෝගිකයන් සිටින අද්විතීය නගර ගණන)."
    },
    {
        questionText: "DBMS (දත්ත සමුදාය කළමනාකරණ පද්ධතිය) හි 'Data Abstraction' (දත්ත වියුක්තකරණය) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "දත්ත ගබඩා කිරීමේ භෞතික ක්‍රියාවලිය විස්තර කිරීම.",
            "පරිශීලකයන්ට දත්ත ඉදිරිපත් කිරීමේදී සංකීර්ණතා සැඟවීම සහ දත්ත පිළිබඳ විවිධ දසුන් (views) සැපයීම.",
            "දත්තවල පුනරුක්තිකරණය වැඩි කිරීම.",
            "දත්ත සමුදායේ ආරක්ෂාව අඩු කිරීම.",
            "දත්ත සමුදායේ ගබඩා කිරීමේ ඉඩ වැඩි කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "DBMS හි 'Data Abstraction' (දත්ත වියුක්තකරණය) යනු පරිශීලකයන්ට දත්ත ඉදිරිපත් කිරීමේදී දත්ත ගබඩා කිරීමේ සහ කළමනාකරණය කිරීමේ යටින් පවතින සංකීර්ණතා සැඟවීමේ ක්‍රියාවලියයි. එය දත්ත පිළිබඳ විවිධ දසුන් (views) සපයන අතර, දත්ත ගබඩා වී ඇති ආකාරය පිළිබඳ විස්තර වලින් පරිශීලකයින් ආරක්ෂා කරයි. මෙය දත්ත සමුදාය භාවිතා කිරීම පහසු කරයි."
    },
    {
        questionText: "දත්ත සමුදායක 'Index' (දර්ශකයක්) නිර්මාණය කිරීමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "දත්තවල පුනරුක්තිකරණය අවම කිරීමට.",
            "SELECT විමසුම්වල කාර්ය සාධනය වැඩි දියුණු කිරීමට, නමුත් INSERT/UPDATE/DELETE වලට බලපෑම් කළ හැක.",
            "දත්තවල රහස්‍යභාවය ආරක්ෂා කිරීමට.",
            "දත්තවල වලංගුභාවය පරීක්ෂා කිරීමට.",
            "වගු අතර සම්බන්ධතා ඇති කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "දත්ත සමුදායක 'Index' (දර්ශකයක්) නිර්මාණය කිරීමේ ප්‍රධාන අරමුණ වන්නේ 'SELECT' විමසුම්වල කාර්ය සාධනය (performance) වැඩි දියුණු කිරීමයි, විශේෂයෙන් විශාල දත්ත කට්ටලවලින් දත්ත සෙවීමේදී සහ වර්ග කිරීමේදී. කෙසේ වෙතත්, දර්ශකයක් නිර්මාණය කිරීමෙන් සහ නඩත්තු කිරීමෙන් 'INSERT', 'UPDATE' සහ 'DELETE' මෙහෙයුම්වල කාර්ය සාධනය මන්දගාමී විය හැකි අතර, අමතර ගබඩා ඉඩක් ද අවශ්‍ය වේ."
    },
    {
        questionText: "දත්ත සමුදාය කළමනාකරණ පද්ධතියක් (DBMS) භාවිතා කිරීමේ ප්‍රධාන වාසියක් නොවන කරුණ කුමක්ද?",
        options: [
            "දත්ත පුනරුක්තිකරණය (data redundancy) අවම කිරීම.",
            "දත්තවල අඛණ්ඩතාව (data integrity) වැඩි දියුණු කිරීම.",
            "දත්ත ස්වාධීනත්වය (data independence) සැපයීම.",
            "දත්ත අනුකූලතාව (data consistency) අඩු කිරීම.",
            "දත්ත ආරක්ෂාව (data security) වැඩි දියුණු කිරීම."
        ],
        correctAnswerIndex: 3,
        explanation: "DBMS භාවිතා කිරීමේ ප්‍රධාන වාසි අතර දත්ත පුනරුක්තිකරණය අවම කිරීම, දත්ත අඛණ්ඩතාව වැඩි දියුණු කිරීම, දත්ත ස්වාධීනත්වය සැපයීම, දත්ත ආරක්ෂාව වැඩි දියුණු කිරීම සහ දත්ත අනුකූලතාව (consistency) තහවුරු කිරීම වේ. 'දත්ත අනුකූලතාව අඩු කිරීම' යනු DBMS භාවිතා කිරීමේ වාසියක් නොව, එහි අවාසියක් හෝ දුර්වලතාවක් වනු ඇත. DBMS මගින් දත්ත අනුකූලතාව වැඩි දියුණු කිරීමට උත්සාහ කරයි."
    },
    {
        questionText: "SQL හි 'LEFT JOIN' මෙහෙයුමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "වගු දෙකක් අතර පොදු නොවන දත්ත පමණක් ලබා ගැනීම.",
            "වගු දෙකක් අතර පොදු තීරුවල අගයන් ගැලපෙන පේළි පමණක් ඒකාබද්ධ කර ලබා ගැනීම.",
            "වම් පස වගුවේ සියලුම පේළි සහ දකුණු පස වගුවේ ගැලපෙන පේළි (ගැලපීමක් නොමැති නම් NULL) ලබා ගැනීම.",
            "දකුණු පස වගුවේ සියලුම පේළි සහ වම් පස වගුවේ ගැලපෙන පේළි (ගැලපීමක් නොමැති නම් NULL) ලබා ගැනීම.",
            "වගු දෙකක ඇති සියලුම දත්ත එකට එක් කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "'LEFT JOIN' (හෝ LEFT OUTER JOIN) යනු SQL හි JOIN වර්ගයකි. එය වම් පස වගුවේ (FROM clause එකේ මුලින්ම දැක්වෙන වගුව) සියලුම පේළි සහ දකුණු පස වගුවේ ගැලපෙන පේළි (JOIN condition එකට අනුව ගැලපීමක් නොමැති නම්, දකුණු පස තීරු සඳහා NULL අගයන්) ලබා දෙයි. මෙය එක් වගුවක සියලුම දත්ත අවශ්‍ය වන අතර, අනෙක් වගුවෙන් අදාළ දත්ත තිබේ නම් ඒවා ද ලබා ගැනීමට අවශ්‍ය විට ප්‍රයෝජනවත් වේ."
    },
    {
        questionText: "SQL හි 'RIGHT JOIN' මෙහෙයුමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "වගු දෙකක් අතර පොදු නොවන දත්ත පමණක් ලබා ගැනීම.",
            "වගු දෙකක් අතර පොදු තීරුවල අගයන් ගැලපෙන පේළි පමණක් ඒකාබද්ධ කර ලබා ගැනීම.",
            "වම් පස වගුවේ සියලුම පේළි සහ දකුණු පස වගුවේ ගැලපෙන පේළි (ගැලපීමක් නොමැති නම් NULL) ලබා ගැනීම.",
            "දකුණු පස වගුවේ සියලුම පේළි සහ වම් පස වගුවේ ගැලපෙන පේළි (ගැලපීමක් නොමැති නම් NULL) ලබා ගැනීම.",
            "වගු දෙකක ඇති සියලුම දත්ත එකට එක් කිරීම."
        ],
        correctAnswerIndex: 3,
        explanation: "'RIGHT JOIN' (හෝ RIGHT OUTER JOIN) යනු SQL හි JOIN වර්ගයකි. එය දකුණු පස වගුවේ (JOIN clause එකෙන් පසුව දැක්වෙන වගුව) සියලුම පේළි සහ වම් පස වගුවේ ගැලපෙන පේළි (JOIN condition එකට අනුව ගැලපීමක් නොමැති නම්, වම් පස තීරු සඳහා NULL අගයන්) ලබා දෙයි. මෙය දකුණු පස වගුවක සියලුම දත්ත අවශ්‍ය වන අතර, අනෙක් වගුවෙන් අදාළ දත්ත තිබේ නම් ඒවා ද ලබා ගැනීමට අවශ්‍ය විට ප්‍රයෝජනවත් වේ."
    },
    {
        questionText: "SQL හි 'FULL OUTER JOIN' මෙහෙයුමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "වගු දෙකක් අතර පොදු දත්ත පමණක් ලබා ගැනීම.",
            "වගු දෙකක් අතර පොදු නොවන දත්ත පමණක් ලබා ගැනීම.",
            "වගු දෙකේම සියලුම පේළි (ගැලපීමක් නොමැති නම් NULL) ඒකාබද්ධ කර ලබා ගැනීම.",
            "එක් වගුවක දත්ත පමණක් ලබා ගැනීම.",
            "විමසුම් දෙකක ප්‍රතිඵල කට්ටල ඒකාබද්ධ කර අද්විතීය පේළි පමණක් ලබා ගැනීමට."
        ],
        correctAnswerIndex: 2,
        explanation: "'FULL OUTER JOIN' යනු SQL හි JOIN වර්ගයකි. එය වගු දෙකේම සියලුම පේළි ඒකාබද්ධ කර ලබා දෙයි. ගැලපීමක් නොමැති පේළි සඳහා, අදාළ වගුවේ අනෙක් තීරු සඳහා NULL අගයන් පෙන්වනු ඇත. මෙය වගු දෙකෙහිම ඇති සියලුම දත්ත එකට දැකීමට අවශ්‍ය විට භාවිතා වේ, ගැලපීමක් තිබුණත් නැතත්."
    },
    {
        questionText: "SQL හි 'SELF JOIN' මෙහෙයුමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "වගු දෙකක් එකට සම්බන්ධ කිරීමට.",
            "වගුවක් තමන්ටම සම්බන්ධ කිරීමෙන්, එම වගුව තුළම ඇති දත්ත අතර සම්බන්ධතා සොයා ගැනීමට.",
            "වගු අතර ඇති සියලුම සම්බන්ධතා ඉවත් කිරීමට.",
            "දත්තවල පුනරුක්තිකරණය අවම කිරීමට.",
            "දත්ත සමුදායක ව්‍යුහය වෙනස් කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "'SELF JOIN' යනු වගුවක් තමන්ටම සම්බන්ධ කිරීමයි. මෙය එකම වගුව තුළම ඇති දත්ත අතර සම්බන්ධතා සොයා ගැනීමට භාවිතා වේ. උදාහරණයක් ලෙස, 'සේවක' වගුවක 'සේවකයා' සහ 'කළමනාකරු' යන තීරු දෙකම තිබේ නම්, කළමනාකරුවෙකු යනුද සේවකයෙකු බැවින්, සේවකයින් සහ ඔවුන්ගේ කළමනාකරුවන් අතර සම්බන්ධතාවක් සොයා ගැනීමට SELF JOIN භාවිතා කළ හැක. මේ සඳහා වගුවට අන්වර්ථ නාම (aliases) දෙකක් දීමට සිදුවේ."
    },
    {
        questionText: "SQL හි 'TRUNCATE TABLE' විධානයෙහි ප්‍රධාන කාර්යභාරය කුමක්ද?",
        options: [
            "වගුවකින් දත්ත පේළියක් ඉවත් කිරීමට.",
            "වගුවක ව්‍යුහය වෙනස් කිරීමට.",
            "වගුවකින් සියලුම පේළි ඉක්මනින් ඉවත් කිරීමට, නමුත් වගුවේ ව්‍යුහය රඳවා ගැනීමට.",
            "සම්පූර්ණ වගුවම දත්ත සහ ව්‍යුහය සමඟ ඉවත් කිරීමට.",
            "වගුවකට නව දත්ත ඇතුළත් කිරීමට."
        ],
        correctAnswerIndex: 2,
        explanation: "'TRUNCATE TABLE' යනු වගුවකින් සියලුම පේළි ඉක්මනින් ඉවත් කිරීමට භාවිතා කරන DDL විධානයකි. එය 'DELETE FROM' ට වඩා වේගවත් වන අතර, එය rollback කළ නොහැක (බොහෝ DBMS වලදී). නමුත් එය 'DROP TABLE' මෙන් වගුවේ ව්‍යුහය ඉවත් නොකර, වගුව හිස්ව තබයි. මෙය විශාල දත්ත කට්ටල හිස් කිරීමට වඩා කාර්යක්ෂම ක්‍රමයකි."
    },
    {
        questionText: "DBMS (දත්ත සමුදාය කළමනාකරණ පද්ධතිය) හි 'Data Administrator' (දත්ත පරිපාලකයා) හි ප්‍රධාන වගකීමක් කුමක්ද?",
        options: [
            "දත්ත සමුදාය සැලසුම් කිරීම, ක්‍රියාත්මක කිරීම සහ නඩත්තු කිරීම ඇතුළු දත්ත සමුදාය කළමනාකරණය කිරීම.",
            "දත්ත සමුදායට දත්ත ඇතුළත් කිරීම.",
            "පරිශීලකයින් සඳහා වාර්තා නිර්මාණය කිරීම.",
            "දත්ත සමුදායේ දෘඪාංග නඩත්තු කිරීම.",
            "දත්ත සමුදාය යෙදුම් සංවර්ධනය කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "'Data Administrator' (දත්ත පරිපාලකයා - DA) යනු දත්ත සමුදාය කළමනාකරණ පද්ධතියක සමස්ත දත්ත සමුදායම සැලසුම් කිරීම, ක්‍රියාත්මක කිරීම, නඩත්තු කිරීම, ආරක්ෂාව කළමනාකරණය කිරීම, සහ කාර්ය සාධනය ප්‍රශස්ත කිරීම ඇතුළු පුළුල් වගකීම් සහිත පුද්ගලයෙකි. ඔහු දත්ත සමුදාය පරිශීලකයින්ට කාර්යක්ෂමව භාවිතා කිරීමට අවශ්‍ය සියලුම ක්‍රියාකාරකම් අධීක්ෂණය කරයි."
    },

    // 8.7 කාර්යසාධනය වැඩි දියුණු කිරීම සඳහා දත්ත සමුදාය ප්‍රපාතක සටහන ප්‍රමතකරණය (normalization) කරයි.
    {
        questionText: "දත්ත සමුදාය 'ප්‍රමතකරණය' (Normalization) කිරීමේ ප්‍රධාන අවශ්‍යතාව කුමක්ද?",
        options: [
            "දත්ත සමුදායේ ගබඩා කිරීමේ ඉඩ වැඩි කිරීමට.",
            "දත්ත පුනරුක්තිකරණය (data redundancy) අවම කිරීම සහ දත්ත විෂමතා (anomalies) ඉවත් කිරීම.",
            "දත්ත සමුදායේ ආරක්ෂාව අඩු කිරීමට.",
            "දත්ත ඇතුළත් කිරීමේ වේගය වැඩි කිරීමට.",
            "දත්තවල රහස්‍යභාවය වැඩි කිරීමට."
        ],
        correctAnswerIndex: 1,
        explanation: "දත්ත සමුදාය 'ප්‍රමතකරණය' (Normalization) කිරීමේ ප්‍රධාන අවශ්‍යතාව වන්නේ දත්ත පුනරුක්තිකරණය (data redundancy) අවම කිරීම සහ දත්ත විෂමතා (anomalies - Insertion, Deletion, Updating) ඉවත් කිරීමයි. මෙය දත්තවල අඛණ්ඩතාව, නිරවද්‍යතාව සහ කාර්යක්ෂමතාව වැඩි දියුණු කිරීමට උපකාරී වන ක්‍රියාවලියකි. ප්‍රමතකරණය මගින් දත්ත සමුදා සැලසුම වඩාත් සුදුසු මට්ටමකට ගෙන එයි."
    },
    {
        questionText: "'ඇතුළත් කිරීමේ විෂමතා' (Insertion Anomalies) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "දත්ත මැකීමේදී වැදගත් දත්ත අහිමි වීම.",
            "දත්ත යාවත්කාලීන කිරීමේදී ඇතිවන නොගැලපීම්.",
            "නව දත්ත ඇතුළත් කිරීමේදී, අනවශ්‍ය ලෙස වෙනත් දත්ත ද ඇතුළත් කිරීමට සිදුවීම හෝ කිසිදු දත්තයක් ඇතුළත් කළ නොහැකි වීම.",
            "දත්ත පුනරාවර්තනය වීම.",
            "දත්ත සමුදායෙන් දත්ත ලබා ගැනීමේදී ඇතිවන ගැටළු."
        ],
        correctAnswerIndex: 2,
        explanation: "'ඇතුළත් කිරීමේ විෂමතා' (Insertion Anomalies) යනු ප්‍රමතකරණය නොකළ දත්ත සමුදායක ඇතිවිය හැකි ගැටලුවකි. නව දත්ත ඇතුළත් කිරීමේදී, අනවශ්‍ය ලෙස වෙනත් දත්ත ද ඇතුළත් කිරීමට සිදුවීම (උදා: නව පාඨමාලාවක් ඇතුළත් කිරීමට ශිෂ්‍යයෙකුගේ විස්තර ඇතුළත් කිරීමට සිදුවීම), හෝ කිසිදු දත්තයක් ඇතුළත් කළ නොහැකි වීම (උදා: පාඨමාලාවක් සඳහා තවමත් ශිෂ්‍යයෙකු නොමැති නම්) මෙයට උදාහරණ වේ. මෙය දත්ත පුනරුක්තිකරණය නිසා ඇතිවේ."
    },
    {
        questionText: "'මකාදැමීමේ විෂමතා' (Deletion Anomalies) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "නව දත්ත ඇතුළත් කිරීමේදී ඇතිවන ගැටළු.",
            "දත්ත යාවත්කාලීන කිරීමේදී ඇතිවන නොගැලපීම්.",
            "දත්ත මැකීමේදී, අහම්බෙන් වැදගත් දත්ත අහිමි වීම.",
            "දත්ත පුනරාවර්තනය වීම.",
            "දත්ත සමුදායේ ගබඩා ඉඩ නාස්ති වීම."
        ],
        correctAnswerIndex: 2,
        explanation: "'මකාදැමීමේ විෂමතා' (Deletion Anomalies) යනු ප්‍රමතකරණය නොකළ දත්ත සමුදායක ඇතිවිය හැකි ගැටලුවකි. එය දත්ත මැකීමේදී, අහම්බෙන් වැදගත් දත්ත අහිමි වීමයි. උදාහරණයක් ලෙස, යම් සිසුවෙකුගේ වාර්තාවක් මකා දැමීමේදී, එම සිසුවා පමණක් එම පාඨමාලාව හදාරන අවසාන සිසුවා නම්, පාඨමාලාව පිළිබඳ තොරතුරු ද අහිමි වීම. මෙයද දත්ත පුනරුක්තිකරණය නිසා ඇතිවේ."
    },
    {
        questionText: "'යාවත්කාලීන කිරීමේ විෂමතා' (Updating Anomalies) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "නව දත්ත ඇතුළත් කිරීමේදී ඇතිවන ගැටළු.",
            "දත්ත මැකීමේදී වැදගත් දත්ත අහිමි වීම.",
            "දත්ත යාවත්කාලීන කිරීමේදී, පුනරාවර්තන දත්තවල නොගැලපීම් ඇතිවීම.",
            "දත්ත සමුදායේ ගබඩා ඉඩ ප්‍රමාණය වැඩි වීම.",
            "දත්ත සමුදායෙන් දත්ත ලබා ගැනීමේ වේගය අඩු වීම."
        ],
        correctAnswerIndex: 2,
        explanation: "'යාවත්කාලීන කිරීමේ විෂමතා' (Updating Anomalies) යනු ප්‍රමතකරණය නොකළ දත්ත සමුදායක ඇතිවිය හැකි ගැටලුවකි. දත්ත පුනරාවර්තනය වී ඇති විට, එම දත්ත යාවත්කාලීන කිරීමේදී, පුනරාවර්තන දත්තවල නොගැලපීම් ඇතිවීම මෙයට උදාහරණ වේ. උදාහරණයක් ලෙස, සිසුන් කිහිප දෙනෙකු හදාරන පාඨමාලාවක නම වෙනස් කිරීමේදී, සෑම සිසුවෙකුගේම වාර්තාවේ ඇති පාඨමාලා නම වෙනස් කිරීමට සිදුවන අතර, ඉන් එකක් හෝ අමතක වුවහොත් දත්ත නොගැලපීම් ඇති වේ."
    },
    {
        questionText: "'කාර්‍යබද්ධ පරායත්තතා' (Functional Dependencies) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "වගුවක ඇති දත්ත වර්ග.",
            "වගුවක තීරු අතර ඇති සම්බන්ධතා, එක් තීරුවක අගය තවත් තීරුවක අගය තීරණය කරන ආකාරය.",
            "දත්ත සමුදායක ඇති සම්බාධක වර්ග.",
            "වගු අතර ඇති සම්බන්ධතා වර්ග.",
            "දත්තවල පුනරුක්තිකරණය අවම කිරීමේ ක්‍රියාවලිය."
        ],
        correctAnswerIndex: 1,
        explanation: "'කාර්‍යබද්ධ පරායත්තතා' (Functional Dependencies) යනු ප්‍රමතකරණයේ මූලික සංකල්පයකි. එය වගුවක තීරු අතර ඇති සම්බන්ධතා විස්තර කරයි, එක් තීරුවක (හෝ තීරු සමූහයක) අගය (Determinant) තවත් තීරුවක අගය (Dependent) තීරණය කරන ආකාරය. 'A → B' යන්නෙන් අදහස් වන්නේ 'A' මගින් 'B' තීරුව ක්‍රියාකාරීව තීරණය වන බවයි. මෙය දත්ත සමුදායේ තාර්කික ව්‍යුහය තේරුම් ගැනීමට සහ ප්‍රමතකරණය කිරීමට අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "'පූර්ණ පරායත්තතා' (Full Functional Dependencies) පිළිබඳ නිවැරදි විස්තරය කුමක්ද?",
        options: [
            "යම් තීරුවක් ප්‍රාථමික යතුරේ කොටසක් මත පමණක් රඳා පවතින විට.",
            "යම් තීරුවක් ප්‍රාථමික යතුර මත සෘජුවම රඳා නොපවතින විට.",
            "යම් තීරුවක් ප්‍රාථමික යතුරේ සියලුම තීරු මත රඳා පවතින විට, සහ ප්‍රාථමික යතුරේ කිසිදු කොටසකින් තීරණය කළ නොහැකි විට.",
            "යම් තීරුවක් කිසිදු තීරුවක් මත රඳා නොපවතින විට.",
            "යම් තීරුවක් ප්‍රාථමික යතුරේ එක් තීරුවක් මත පමණක් රඳා පවතින විට."
        ],
        correctAnswerIndex: 2,
        explanation: "'පූර්ණ පරායත්තතා' (Full Functional Dependencies) යනු යම් තීරුවක් (attribute) ප්‍රාථමික යතුරේ සියලුම තීරු මත රඳා පවතින විට සහ ප්‍රාථමික යතුරේ කිසිදු කොටසකින් තීරණය කළ නොහැකි විට ඇතිවන පරායත්තතාවයකි. 2NF (Second Normal Form) මට්ටමට ළඟා වීමට මෙය අත්‍යවශ්‍ය වේ. උදාහරණයක් ලෙස, (StudentID, CourseID) → Grade, මෙහි Grade රඳා පවතින්නේ StudentID සහ CourseID යන දෙකම මතයි."
    },
    {
        questionText: "'ආංශික පරායත්තතා' (Partial Functional Dependencies) පිළිබඳ නිවැරදි විස්තරය කුමක්ද?",
        options: [
            "යම් තීරුවක් ප්‍රාථමික යතුරේ සියලුම තීරු මත රඳා පවතින විට.",
            "යම් තීරුවක් ප්‍රාථමික යතුර මත සෘජුවම රඳා නොපවතින විට.",
            "යම් තීරුවක් ප්‍රාථමික යතුරේ කොටසක් මත පමණක් රඳා පවතින විට.",
            "යම් තීරුවක් කිසිදු තීරුවක් මත රඳා නොපවතින විට.",
            "යම් තීරුවක් ප්‍රාථමික යතුරේ එක් තීරුවක් මත පමණක් රඳා පවතින විට."
        ],
        correctAnswerIndex: 2,
        explanation: "'ආංශික පරායත්තතා' (Partial Functional Dependencies) යනු යම් ප්‍රාථමික නොවන තීරුවක් ප්‍රාථමික යතුරේ කොටසක් මත පමණක් රඳා පවතින විට ඇතිවන පරායත්තතාවයකි. මෙය 2NF (Second Normal Form) හි ගැටලුවක් වන අතර, ප්‍රමතකරණය මගින් මෙය ඉවත් කළ යුතුය. උදාහරණයක් ලෙස, සංයුක්ත ප්‍රාථමික යතුරක් (StudentID, CourseID) ඇති වගුවක, 'StudentID' මත පමණක් 'StudentName' රඳා පැවතීම ආංශික පරායත්තතාවයකි."
    },
    {
        questionText: "'සංක්‍රාන්ති පරායත්තතා' (Transitive Dependencies) පිළිබඳ නිවැරදි විස්තරය කුමක්ද?",
        options: [
            "යම් තීරුවක් ප්‍රාථමික යතුරේ සියලුම තීරු මත රඳා පවතින විට.",
            "යම් තීරුවක් ප්‍රාථමික යතුර මත සෘජුවම රඳා නොපවතින, නමුත් ප්‍රාථමික යතුර මත රඳා පවතින වෙනත් ප්‍රාථමික නොවන තීරුවක් මත රඳා පවතින විට.",
            "යම් තීරුවක් ප්‍රාථමික යතුරේ කොටසක් මත පමණක් රඳා පවතින විට.",
            "යම් තීරුවක් කිසිදු තීරුවක් මත රඳා නොපවතින විට.",
            "යම් තීරුවක් ප්‍රාථමික යතුරේ එක් තීරුවක් මත පමණක් රඳා පවතින විට."
        ],
        correctAnswerIndex: 1,
        explanation: "'සංක්‍රාන්ති පරායත්තතා' (Transitive Dependencies) යනු යම් ප්‍රාථමික නොවන තීරුවක් ප්‍රාථමික යතුර මත සෘජුවම රඳා නොපවතින, නමුත් ප්‍රාථමික යතුර මත රඳා පවතින වෙනත් ප්‍රාථමික නොවන තීරුවක් මත රඳා පවතින විට ඇතිවන පරායත්තතාවයකි. මෙය 3NF (Third Normal Form) හි ගැටලුවක් වන අතර, ප්‍රමතකරණය මගින් මෙය ඉවත් කළ යුතුය. උදාහරණයක් ලෙස, StudentID → DepartmentID සහ DepartmentID → DepartmentName නම්, StudentID → DepartmentName යනු සංක්‍රාන්ති පරායත්තතාවයකි."
    },
    {
        questionText: "'ශුන්‍ය ප්‍රමත අවස්ථාව' (Zero Normal Form - 0NF) පිළිබඳ වඩාත් නිවැරදි විස්තරය කුමක්ද?",
        options: [
            "කිසිදු ප්‍රමතකරණයක් සිදු නොකළ වගුවක්, පුනරාවර්තන කණ්ඩායම් සහ සංකීර්ණ දත්ත අඩංගු විය හැක.",
            "සියලුම තීරු වලට පරමාණුක අගයන් තිබීම සහ පුනරාවර්තන කණ්ඩායම් නොතිබීම.",
            "ආංශික පරායත්තතා නොතිබීම.",
            "සංක්‍රාන්ති පරායත්තතා නොතිබීම.",
            "Primary Key එකක් තිබීම."
        ],
        correctAnswerIndex: 0,
        explanation: "'ශුන්‍ය ප්‍රමත අවස්ථාව' (Zero Normal Form - 0NF) යනු දත්ත සමුදායක වගුවක් ප්‍රමතකරණය කිරීමට පෙර ඇති මූලිකම තත්ත්වයයි. මෙම අවස්ථාවේදී කිසිදු ප්‍රමතකරණයක් සිදු කර නොමැති අතර, වගුවක පුනරාවර්තන කණ්ඩායම් (repeating groups) සහ සංකීර්ණ දත්ත (non-atomic values) අඩංගු විය හැක. මෙය දත්ත පුනරුක්තිකරණය සහ විෂමතා සඳහා දැඩිව ගොදුරු වේ."
    },
    {
        questionText: "'ප්‍රථම ප්‍රමත අවස්ථාව' (First Normal Form - 1NF) සඳහා සම්පූර්ණ කළ යුතු ප්‍රධාන කොන්දේසිය කුමක්ද?",
        options: [
            "ආංශික පරායත්තතා නොතිබීම.",
            "සංක්‍රාන්ති පරායත්තතා නොතිබීම.",
            "සියලුම තීරු වලට පරමාණුක (atomic) අගයන් තිබීම සහ පුනරාවර්තන කණ්ඩායම් (repeating groups) නොතිබීම.",
            "Primary Key එකක් තිබීම සහ Foreign Key එකක් තිබීම.",
            "ඇතුළත් කිරීමේ විෂමතා නොතිබීම."
        ],
        correctAnswerIndex: 2,
        explanation: "'ප්‍රථම ප්‍රමත අවස්ථාව' (First Normal Form - 1NF) යනු ප්‍රමතකරණයේ පළමු පියවරයි. වගුවක් 1NF හි තිබීමට නම්, සියලුම තීරු වලට පරමාණුක (atomic) අගයන් තිබිය යුතු අතර, පුනරාවර්තන කණ්ඩායම් (repeating groups) නොතිබිය යුතුය. 'පරමාණුක' යන්නෙන් අදහස් කරන්නේ තීරුවක එක් සෛලයකට (cell) ඇත්තේ එක් අගයක් පමණක් බවයි, බහු අගයන් හෝ උප-කොටස් නොමැති බවයි."
    },
    {
        questionText: "'දෙවන ප්‍රමත අවස්ථාව' (Second Normal Form - 2NF) සඳහා සම්පූර්ණ කළ යුතු ප්‍රධාන කොන්දේසිය කුමක්ද?",
        options: [
            "1NF හි තිබීම සහ ආංශික පරායත්තතා (partial functional dependencies) නොතිබීම.",
            "1NF හි තිබීම සහ සංක්‍රාන්ති පරායත්තතා (transitive dependencies) නොතිබීම.",
            "0NF හි තිබීම සහ Primary Key එකක් තිබීම.",
            "සම්බාධක වර්ග කිහිපයක් තිබීම.",
            "දත්ත පුනරුක්තිකරණය සම්පූර්ණයෙන්ම ඉවත් කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "'දෙවන ප්‍රමත අවස්ථාව' (Second Normal Form - 2NF) සඳහා වගුවක් 1NF හි තිබිය යුතු අතර, ප්‍රාථමික යතුරේ කොටසක් මත රඳා පවතින කිසිදු ප්‍රාථමික නොවන තීරුවක් නොතිබිය යුතුය, එනම් ආංශික පරායත්තතා (partial functional dependencies) නොතිබිය යුතුය. 2NF මගින් ආංශික පරායත්තතා නිසා ඇතිවන සමහර ඇතුළත් කිරීමේ, මකාදැමීමේ සහ යාවත්කාලීන කිරීමේ විෂමතා ඉවත් කරයි."
    },
    {
        questionText: "'තෙවන ප්‍රමත අවස්ථාව' (Third Normal Form - 3NF) සඳහා සම්පූර්ණ කළ යුතු ප්‍රධාන කොන්දේසිය කුමක්ද?",
        options: [
            "1NF හි තිබීම සහ ආංශික පරායත්තතා නොතිබීම.",
            "2NF හි තිබීම සහ සංක්‍රාන්ති පරායත්තතා (transitive dependencies) නොතිබීම.",
            "0NF හි තිබීම සහ Unique Constraint එකක් තිබීම.",
            "පූර්ණ පරායත්තතා පමණක් තිබීම.",
            "සියලුම විෂමතා සම්පූර්ණයෙන්ම ඉවත් කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "'තෙවන ප්‍රමත අවස්ථාව' (Third Normal Form - 3NF) සඳහා වගුවක් 2NF හි තිබිය යුතු අතර, ප්‍රාථමික යතුර මත සෘජුවම රඳා නොපවතින, නමුත් ප්‍රාථමික යතුර මත රඳා පවතින වෙනත් ප්‍රාථමික නොවන තීරුවක් මත රඳා පවතින පරායත්තතා (සංක්‍රාන්ති පරායත්තතා) නොතිබිය යුතුය. 3NF මගින් සංක්‍රාන්ති පරායත්තතා නිසා ඇතිවන සමහර ඇතුළත් කිරීමේ, මකාදැමීමේ සහ යාවත්කාලීන කිරීමේ විෂමතා ඉවත් කරයි, දත්ත සමුදාය වඩාත් කාර්යක්ෂම සහ අනුකූල බවට පත් කරයි."
    },
    {
        questionText: "ප්‍රමතකරණය නොකළ දත්ත සමුදායක 'Redundancy' (පුනරුක්තිකරණය) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "දත්ත ගබඩා කිරීමේ ඉඩ ප්‍රමාණය අඩු වීම.",
            "එකම දත්ත, විවිධ ස්ථානවල කිහිප වතාවක් ගබඩා කිරීම.",
            "දත්තවල අඛණ්ඩතාව වැඩි වීම.",
            "දත්තවල ආරක්ෂාව වැඩි වීම.",
            "දත්ත සමුදායෙන් දත්ත ලබා ගැනීමේ වේගය වැඩි වීම."
        ],
        correctAnswerIndex: 1,
        explanation: "'Redundancy' (පුනරුක්තිකරණය) යනු දත්ත සමුදායක එකම දත්ත, විවිධ ස්ථානවල කිහිප වතාවක් ගබඩා කිරීමයි. මෙය ප්‍රමතකරණය නොකළ දත්ත සමුදායන්හි බහුලව දක්නට ලැබෙන ගැටලුවක් වන අතර, එය දත්ත විෂමතා (anomalies) ඇති කිරීමට, ගබඩා ඉඩ නාස්ති කිරීමට සහ දත්තවල අඛණ්ඩතාවයට හානි කිරීමට හේතු විය හැක. ප්‍රමතකරණය මගින් මෙම පුනරුක්තිකරණය අවම කර, දත්ත සමුදාය කාර්යක්ෂම සහ අනුකූල බවට පත් කරයි."
    },
    {
        questionText: "SQL හි 'JOIN' මෙහෙයුම් වල ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "වගු දෙකක් අතර පොදු දත්ත පමණක් ලබා ගැනීම.",
            "වගු දෙකක් අතර පොදු නොවන දත්ත පමණක් ලබා ගැනීම.",
            "වගු දෙකේම සියලුම පේළි ඒකාබද්ධ කර ලබා ගැනීම.",
            "එක් වගුවක දත්ත පමණක් ලබා ගැනීම.",
            "විමසුම් දෙකක ප්‍රතිඵල කට්ටල ඒකාබද්ධ කර අද්විතීය පේළි පමණක් ලබා ගැනීමට."
        ],
        correctAnswerIndex: 0,
        explanation: "'JOIN' යනු SQL හි වගු දෙකක් හෝ ඊට වඩා සම්බන්ධ කර, ඒවායේ පොදු දත්ත ලබා ගැනීමට භාවිතා කරන ක්‍රියාවලියකි. මෙය විවිධ JOIN වර්ග (INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL OUTER JOIN) මඟින් සිදු කළ හැකි අතර, එය SQL විමසුම් වල ප්‍රධාන අංගයකි."
    },
    // 8.1 දත්තවල සහ තොරතුරුවල මූලික කරුණු සහ දත්ත සමුදායවල අවශ්‍යතාව අධ්‍යයනය කරයි
    {
        questionText: "දත්ත (Data) හා තොරතුරු (Information) අතර මූලික වෙනස වඩාත් නිවැරදිව විස්තර කරන්නේ කුමන ප්‍රකාශයෙන්ද?",
        options: [
            "දත්ත යනු අමු කරුණු සහ සංඛ්‍යා වන අතර, තොරතුරු යනු එම දත්ත සැකසීමෙන්, විශ්ලේෂණය කිරීමෙන් හෝ සංවිධානය කිරීමෙන් පසු ලබා ගන්නා අර්ථවත් හා ප්‍රයෝජනවත් දැනුමකි.",
            "දත්ත සැමවිටම සංඛ්‍යාත්මක වන අතර, තොරතුරු සැමවිටම අර්ථවත් වේ.",
            "තොරතුරු යනු සන්දර්භය රහිත වන අතර, දත්ත සැමවිටම සන්දර්භය සහිත වේ.",
            "දත්ත යනු තීරණ ගැනීම සඳහා ප්‍රයෝජනවත් වන අතර, තොරතුරු එසේ නොවේ.",
            "තොරතුරු සැමවිටම දත්ත වලට වඩා විශාල වන අතර, වඩා සංකීර්ණ වේ."
        ],
        correctAnswerIndex: 0,
        explanation: "දත්ත යනු අර්ථයක් නැති, අමු කරුණු, සංඛ්‍යා හෝ සංකේත වන අතර, තොරතුරු යනු එම දත්ත සැකසීමෙන්, විශ්ලේෂණය කිරීමෙන් හෝ සංවිධානය කිරීමෙන් පසු ලබා ගන්නා, අර්ථවත් හා ප්‍රයෝජනවත් දැනුමකි. තොරතුරු බොහෝ විට යම් තීරණයක් ගැනීමට හෝ ගැටලුවක් විසඳීමට උපකාරී වේ. අනෙකුත් විකල්ප අසම්පූර්ණ හෝ වැරදි අර්ථකථන සපයයි."
    },
    {
        questionText: "දත්ත සමුදායක, ව්‍යුහගත දත්ත (Structured Data) සහ ව්‍යුහගත නොවන දත්ත (Unstructured Data) අතර ඇති ප්‍රධාන වෙනස කුමක්ද?",
        options: [
            "ව්‍යුහගත නොවන දත්ත පමණක් රූප, වීඩියෝ සහ ශ්‍රව්‍ය ගොනු වලින් සමන්විත වන අතර, ව්‍යුහගත දත්ත එසේ නොවේ.",
            "ව්‍යුහගත දත්ත පූර්ව නිර්වචනය කළ යෝජනා ක්‍රමයකට (predefined schema) අනුව සංවිධානය වී ඇති අතර, ව්‍යුහගත නොවන දත්ත වලට එවැනි ව්‍යුහයක් නොමැත.",
            "ව්‍යුහගත දත්ත පහසුවෙන් SQL විමසුම් මගින් ප්‍රවේශ විය හැකි නමුත්, ව්‍යුහගත නොවන දත්ත සඳහා විශේෂ මෙවලම් අවශ්‍ය වේ.",
            "ව්‍යුහගත දත්ත Relational Databases වල ගබඩා කරන අතර, ව්‍යුහගත නොවන දත්ත NoSQL Databases වල ගබඩා කරයි.",
            "ව්‍යුහගත දත්ත සැමවිටම පේළි සහ තීරු වලින් සමන්විත වන අතර, ව්‍යුහගත නොවන දත්ත වලට එවැනි ව්‍යුහයක් නොමැත."
        ],
        correctAnswerIndex: 1,
        explanation: "ව්‍යුහගත දත්ත යනු නිශ්චිත ආකෘතියකට (උදා: relational tables) අනුව සකස් කරන ලද දත්ත වන අතර, ඒවායේ ක්ෂේත්‍ර (fields) සහ ඒවායේ දත්ත වර්ග (data types) පූර්ව නිර්වචනය කර ඇත. මේවා පහසුවෙන් කළමනාකරණය කිරීමට හා විශ්ලේෂණය කිරීමට හැකිය. ව්‍යුහගත නොවන දත්ත යනු නිශ්චිත ආකෘතියකට නොගැලපෙන දත්ත වන අතර, ඊමේල්, ලේඛන, රූප, වීඩියෝ වැනි දේ මෙයට අයත් වේ."
    },
    {
        questionText: "'දත්ත සමුදාය' (Database) යන පදය වඩාත් නිවැරදිව නිර්වචනය කරන්නේ කුමක්ද?",
        options: [
            "පරිගණකයක ගබඩා කර ඇති සියලුම ගොනු එකතුවකි.",
            "සංවිධානය කරන ලද, අන්තර් සම්බන්ධිත දත්ත එකතුවක් වන අතර එය කාර්යක්ෂමව ගබඩා කිරීම, ප්‍රතිසාධනය කිරීම හා කළමනාකරණය කිරීම සඳහා නිර්මාණය කර ඇත.",
            "විවිධ පරිශීලකයන්ට එකවර ප්‍රවේශ විය හැකි දත්ත ගබඩාවකි.",
            "කැමැති පරිදි දත්ත ඇතුළු කළ හැකි විවෘත මෘදුකාංග පද්ධතියකි.",
            "විශාල දත්ත ප්‍රමාණයක් තබා ගැනීමට පමණක් භාවිතා කරන, වේගවත් දෘඪ තැටියකි."
        ],
        correctAnswerIndex: 1,
        explanation: "දත්ත සමුදායක් යනු සංවිධානාත්මකව හා තාර්කිකව අන්තර් සම්බන්ධිත දත්ත එකතුවකි. එහි ප්‍රධාන අරමුණ වන්නේ දත්ත කාර්යක්ෂමව ගබඩා කිරීම, අවශ්‍ය විට ඒවා ලබා ගැනීම (retrieval), සහ ඒවා යාවත්කාලීන කිරීම (management) පහසු කිරීමයි. 'ප්‍රවේශ විය හැකි දත්ත ගබඩාවකි' යන්න නිවැරදි වුවද, සම්පූර්ණ නිර්වචනය නොවේ."
    },
    {
        questionText: "'ඒක ගොනු පද්ධති' (Flat File Systems) ආකෘතියේ ඇති ප්‍රධාන අවාසිය කුමක්ද?",
        options: [
            "දත්ත ගබඩා කිරීම සඳහා වැඩි ඉඩක් අවශ්‍ය වීම.",
            "තොරතුරු ඉක්මනින් ලබා ගැනීමට අපහසු වීම.",
            "දත්තවල පුනරාවර්තනය (data redundancy) අධික වීම සහ දත්ත අසංගතතාව (data inconsistency) ඇතිවීමේ අවදානම.",
            "විශාල දත්ත ප්‍රමාණයක් හැසිරවීමට නොහැකි වීම.",
            "කිසිදු දත්ත සුරක්ෂිතතාවක් නොමැති වීම."
        ],
        correctAnswerIndex: 2,
        explanation: "ඒක ගොනු පද්ධති වල දත්ත තනි ගොනු වල ගබඩා කරන අතර, විවිධ දෙපාර්තමේන්තු හෝ අරමුණු සඳහා එකම දත්ත පිටපත් කර තැබීමට සිදු වේ. මෙය දත්ත පුනරාවර්තනයට මඟ පාදන අතර, දත්ත යාවත්කාලීන කිරීමේදී එක් තැනක යාවත්කාලීන වී තවත් තැනක නොවූ විට දත්ත අසංගතතාවක් ඇතිවිය හැක."
    },
    {
        questionText: "'ධූරාවලි ආකෘතිය' (Hierarchical Model) පිළිබඳව පහත සඳහන් ප්‍රකාශ වලින් නිවැරදි වන්නේ කුමක්ද?",
        options: [
            "එය දත්ත වගු (tables) ආකාරයෙන් සංවිධානය කරයි.",
            "එක් 'දෙමාපිය' (parent) නෝඩයකට කිහිපයක් 'දරුවන්' (children) නෝඩ් තිබිය හැකි නමුත්, එක් 'දරුවකුට' ඇත්තේ එක් 'දෙමාපිය' නෝඩයක් පමණි.",
            "එය සංකීර්ණ සම්බන්ධතා (many-to-many relationships) පහසුවෙන් කළමනාකරණය කිරීමට භාවිතා කරයි.",
            "එය ජාල ආකෘතියේම සරල කළ ආකාරයකි.",
            "දත්ත ප්‍රවේශය (data access) ඉතා නම්‍යශීලී (flexible) වේ."
        ],
        correctAnswerIndex: 1,
        explanation: "ධූරාවලි ආකෘතිය ගස් ව්‍යුහයකට (tree structure) සමාන වන අතර, දත්ත මූලයකින් (root) ආරම්භ වී අනු ශාඛා වලට බෙදී යයි. මෙහිදී සෑම දරුවකුටම ඇත්තේ එක දෙමාපියකු පමණක් වන අතර, දෙමාපියකුට දරුවන් කිහිප දෙනෙක් සිටිය හැකිය (One-to-many relationship)."
    },
    {
        questionText: "'ජාල ආකෘතිය' (Network Model) දත්ත සමුදා ආකෘතියේ ඇති ප්‍රධාන වාසිය කුමක්ද?",
        options: [
            "එය Relational Model වලට වඩා භාවිතා කිරීමට පහසුය.",
            "එය දත්තවල පුනරාවර්තනය සම්පූර්ණයෙන්ම ඉවත් කරයි.",
            "එය One-to-many සහ many-to-many සම්බන්ධතා යන දෙකම කාර්යක්ෂමව නිරූපණය කිරීමට ඉඩ සලසයි.",
            "එය දත්ත ප්‍රවේශය සඳහා සරලම ක්‍රමය සපයයි.",
            "එය නවීන දත්ත සමුදා පද්ධති සඳහා ප්‍රමුඛතම ආකෘතියයි."
        ],
        correctAnswerIndex: 2,
        explanation: "ජාල ආකෘතිය ධූරාවලි ආකෘතියේ සීමාවන් මඟ හරවමින්, එක් දරුවකුට දෙමාපියන් කිහිප දෙනෙකු සිටිය හැකි ව්‍යුහයක් (many-to-many relationships) නිර්මාණය කිරීමට ඉඩ සලසයි. මෙය වඩාත් සංකීර්ණ දත්ත සම්බන්ධතා නිරූපණය කිරීමට උපකාරී වේ."
    },
    {
        questionText: "'සම්බන්ධක ආකෘතිය' (Relational Model) දත්ත සමුදායන්ගේ වඩාත් වැදගත් ලක්ෂණය කුමක්ද?",
        options: [
            "දත්ත ගස් ව්‍යුහයකට (tree structure) අනුව ගබඩා කිරීම.",
            "දත්ත වස්තු (objects) ලෙස ගබඩා කිරීම.",
            "දත්ත පේළි (rows) සහ තීරු (columns) සහිත වගු (tables) ආකාරයෙන් සංවිධානය කිරීම.",
            "දත්ත වෙත ප්‍රවේශ වීමට දත්ත දර්ශක (pointers) භාවිතා කිරීම.",
            "එය සංකීර්ණ ග්‍රැෆික් දත්ත ගබඩා කිරීමට විශේෂයෙන් නිර්මාණය කර ඇත."
        ],
        correctAnswerIndex: 2,
        explanation: "සම්බන්ධක ආකෘතියේ දත්ත ප්‍රධාන වශයෙන් වගු ආකාරයෙන් ගබඩා කරයි. මෙම වගු 'සම්බන්ධතා' (relations) ලෙසද හැඳින්වේ. සෑම පේළියක්ම 'tuple' එකක් ලෙසද, සෑම තීරුවක්ම 'attribute' එකක් ලෙසද හැඳින්වේ. මෙය දත්ත හැසිරවීම සඳහා සරල, තර්කානුකූල හා දෘශ්‍යමාන ක්‍රමයක් සපයයි."
    },
    {
        questionText: "Relational Model හා සසඳන විට 'වස්තු-සම්බන්ධක ආකෘතිය' (Object-Relational Model) හි ඇති සුවිශේෂී වාසිය කුමක්ද?",
        options: [
            "එය Relational Model වලට වඩා සරල දත්ත ව්‍යුහයන් භාවිතා කරයි.",
            "එය දත්ත අඛණ්ඩතාව (data integrity) පවත්වා ගැනීමට වඩා හොඳ ක්‍රම සපයයි.",
            "එය වස්තු-නැඹුරු (object-oriented) සංකල්ප (උදා: වස්තු, පන්තීන්, උරුමය) සහ Relational Model වල වාසි ඒකාබද්ධ කරයි.",
            "එය Relational Model වලට වඩා වේගවත් දත්ත ප්‍රවේශයක් සපයයි.",
            "එය Relational Model වලට වඩා අඩු දත්ත පුනරාවර්තනයක් සහතික කරයි."
        ],
        correctAnswerIndex: 2,
        explanation: "වස්තු-සම්බන්ධක ආකෘතිය (ORM) Relational Model හි වගු ව්‍යුහය පවත්වා ගනිමින්, වස්තු-නැඹුරු ක්‍රමලේඛනයේ (OOP) ඇති සංකල්ප (උදා: සංකීර්ණ දත්ත වර්ග, උරුමය, බහුරූපී බව) දත්ත සමුදායට ඒකාබද්ධ කරයි. මෙය වඩාත් සංකීර්ණ දත්ත නිරූපණය කිරීමට සහ ඒවා සමඟ ක්‍රියා කිරීමට වැඩි නම්‍යශීලී බවක් සපයයි."
    },

    // 8.2 දත්ත සමුදායක සංකල්පීය රූපාත්මක සටහන (conceptual schema) සැලසුම් කරයි
    {
        questionText: "භූතාර්ථ සම්බන්ධතා රූපසටහනක (ER Diagram) 'භූතාර්ථයක්' (Entity) සහ 'උපලක්ෂණයක්' (Attribute) අතර ඇති මූලික වෙනස කුමක්ද?",
        options: [
            "භූතාර්ථයක් යනු දත්ත සමුදායේ ගබඩා කරන ඕනෑම දත්ත අගයක් වන අතර, උපලක්ෂණයක් යනු එම දත්ත ගබඩා කරන වගුවකි.",
            "භූතාර්ථයක් යනු වැදගත් වන, දත්ත ගබඩා කළ යුතු සත්‍ය ලෝක වස්තුවක් හෝ සංකල්පයක් වන අතර, උපලක්ෂණයක් යනු එම භූතාර්ථය පිළිබඳ විස්තරයක් සපයන ගුණාංගයකි.",
            "උපලක්ෂණයක් යනු භූතාර්ථ දෙකක් අතර සම්බන්ධයක් නිරූපණය කරන අතර, භූතාර්ථයක් යනු දත්ත සමුදායක ප්‍රධාන වගුවකි.",
            "භූතාර්ථයක් යනු ප්‍රාථමික යතුරක් (Primary Key) ඇති වගුවක් වන අතර, උපලක්ෂණයක් යනු ආගන්තුක යතුරකි (Foreign Key).",
            "උපලක්ෂණයක් යනු භූතාර්ථ අතර සම්බන්ධතාවය තීරණය කරන කාර්ඩිනලිටිය (cardinality) වන අතර, භූතාර්ථයක් යනු සම්බන්ධතාවයේ දිශාවයි."
        ],
        correctAnswerIndex: 1,
        explanation: "ER රූපසටහනක භූතාර්ථයක් (Entity) යනු දත්ත ගබඩා කිරීමට අවශ්‍ය සත්‍ය ලෝක වස්තුවක්, සිදුවීමක් හෝ සංකල්පයකි (උදා: ශිෂ්‍යයා, පොත). උපලක්ෂණයක් (Attribute) යනු එම භූතාර්ථය විස්තර කරන ගුණාංගයකි (උදා: ශිෂ්‍යයාගේ නම, පොතේ ISBN අංකය)."
    },
    {
        questionText: "ER රූපසටහනක 'භූතාර්ථ හඳුන්වනය' (Entity Identifier) ​​පිළිබඳ නිවැරදි ප්‍රකාශය කුමක්ද?",
        options: [
            "එය භූතාර්ථ දෙකක් අතර ඇති සම්බන්ධය විස්තර කරයි.",
            "එය භූතාර්ථයකට ඇති උපලක්ෂණ ගණන දක්වයි.",
            "එය භූතාර්ථයක එක් එක් අවස්ථාව (instance) අද්විතීය ලෙස හඳුනා ගැනීමට භාවිතා කරන උපලක්ෂණයකි හෝ උපලක්ෂණ සමූහයකි.",
            "එය භූතාර්ථයක් සතු සියලුම උපලක්ෂණවල එකතුවයි.",
            "එය දත්ත සමුදායක දත්ත අඛණ්ඩතාව පවත්වා ගැනීමට භාවිතා කරයි."
        ],
        correctAnswerIndex: 2,
        explanation: "භූතාර්ථ හඳුන්වනය (Entity Identifier) යනු දත්ත සමුදායක වගුවක පේළියක් (එනම්, භූතාර්ථයක අවස්ථාවක්) අද්විතීයව හඳුනා ගැනීමට භාවිතා කරන උපලක්ෂණය (attribute) හෝ උපලක්ෂණ සමූහයයි. මෙය Relational Model හි 'ප්‍රාථමික යතුර' (Primary Key) සංකල්පයට අනුරූප වේ."
    },
    {
        questionText: "දත්ත සමුදාය සැලසුම් කිරීමේදී, 'සම්බන්ධතා' (Relationships) විස්තර කරන්නේ කුමක්ද?",
        options: [
            "දත්ත සමුදායක වගු අතර ඇති දත්ත ප්‍රවාහය.",
            "විවිධ භූතාර්ථ අවස්ථා (entity instances) එකිනෙක සම්බන්ධ වන ආකාරය.",
            "දත්ත සමුදායක ගබඩා කර ඇති දත්ත වර්ග.",
            "දත්ත සමුදායක දත්ත සුරක්ෂිතතාව පවත්වා ගෙන යන ආකාරය.",
            "දත්ත සමුදායක ව්‍යුහය වෙනස් කරන ආකාරය."
        ],
        correctAnswerIndex: 1,
        explanation: "සම්බන්ධතා (Relationships) යනු ER රූපසටහනක භූතාර්ථ දෙකක් හෝ වැඩි ගණනක් අතර පවතින සබැඳියාවයි. එය එක් භූතාර්ථයක අවස්ථා (instances) තවත් භූතාර්ථයක අවස්ථා සමඟ සම්බන්ධ වන්නේ කෙසේද යන්න විස්තර කරයි (උදා: 'ශිෂ්‍යයෙක්' 'පාඨමාලාවක්' සඳහා 'ලියාපදිංචි වේ')."
    },
    {
        questionText: "පුස්තකාල පද්ධතියක් සැලසුම් කිරීමේදී, එක් 'කතුවරයෙකුට' පොත් 'කිහිපයක්' ලිවිය හැකි නමුත්, එක් 'පොතක්' ලියා ඇත්තේ 'එක් කතුවරයෙකු' විසින් පමණක් නම් (simplifying assumption), මෙම සම්බන්ධතාවයේ 'ගණනීයතාව' (Cardinality) වඩාත් නිවැරදිව නිරූපණය කරන්නේ කුමන ආකාරයෙන්ද?",
        options: [
            "එක-ට-එක (One-to-One)",
            "එක-ට-බහු (One-to-Many)",
            "බහු-ට-බහු (Many-to-Many)",
            "කිසිදු ගණනීයතාවක් නොමැත",
            "ද්විපාර්ශ්වික (Bidirectional)"
        ],
        correctAnswerIndex: 1,
        explanation: "මෙම උදාහරණයේදී, එක් කතුවරයෙකුට පොත් කිහිපයක් ලිවිය හැකි බැවින් 'එක' කතුවරයෙක් 'බහු' පොත් සමඟ සම්බන්ධ වේ. නමුත් එක් පොතකට එක් කතුවරයෙක් පමණක් සිටින බැවින්, පොත් පැත්තෙන් කතුවරයාට 'එක' සම්බන්ධතාවයක් ඇත. එබැවින් සමස්තයක් ලෙස මෙය 'එක-ට-බහු' (One-to-Many) සම්බන්ධතාවයකි."
    },
    {
        questionText: "විශ්ව විද්‍යාලයක ශිෂ්‍ය තොරතුරු පද්ධතියක් සැලසුම් කිරීමේදී, 'ශිෂ්‍යයා ලියාපදිංචි වන පාඨමාලා', 'පාඨමාලා උගන්වන කථිකාචාර්යවරුන්', සහ 'ශිෂ්‍යයා ලබා ගන්නා ලකුණු' වැනි තොරතුරු ගබඩා කිරීමට, අවශ්‍ය මූලික 'භූතාර්ථ' (Entities) ලෙස වඩාත් සුදුසු වන්නේ මොනවාද?",
        options: [
            "ලකුණු, විෂයන්, ගුරුවරුන්",
            "ශිෂ්‍යයා, පාඨමාලාව, කථිකාචාර්ය, ලකුණු",
            "ලියාපදිංචිය, ඉගැන්වීම, විභාගය",
            "ශිෂ්‍යයා, පාඨමාලාව, ලකුණු",
            "විශ්ව විද්‍යාලය, දෙපාර්තමේන්තුව, ශිෂ්‍යයා"
        ],
        correctAnswerIndex: 1,
        explanation: "දත්ත සමුදායක සැලසුම්කරණයේදී, භූතාර්ථ යනු දත්ත ගබඩා කිරීමට අවශ්‍ය සත්‍ය ලෝක වස්තූන් හෝ සංකල්ප වේ. මෙම සන්දර්භය තුළ, 'ශිෂ්‍යයා', 'පාඨමාලාව', 'කථිකාචාර්ය' යනු පැහැදිලි භූතාර්ථ වන අතර, 'ලකුණු' යනු 'ශිෂ්‍යයා' සහ 'පාඨමාලාව' අතර සම්බන්ධතාවයක ප්‍රතිඵලයක් ලෙස ගබඩා කළ යුතු වැදගත් දත්ත සමූහයකි, එය වෙනම භූතාර්ථයක් ලෙස හෝ සම්බන්ධතා උපලක්ෂණයක් ලෙස සැලකිය හැක. නමුත් මෙම විකල්ප අතරින් 'ලකුණු' වෙනම භූතාර්ථයක් ලෙස සැලකීම වඩාත් නිවැරදි වනුයේ, එයට තමන්ගේම උපලක්ෂණ (උදා: ලකුණු අගය, විභාග හැඳුනුම් අංකය) තිබිය හැකි බැවිනි."
    },
    {
        questionText: "සමාගමක සේවක තොරතුරු පද්ධතියක් සැලසුම් කිරීමේදී, 'සේවකයින්' සහ 'දෙපාර්තමේන්තු' ප්‍රධාන භූතාර්ථ ලෙස සැලකේ. එක් දෙපාර්තමේන්තුවක සේවකයින් 'කිහිප දෙනෙක්' සිටිය හැකි අතර, එක් සේවකයෙකුට ඇත්තේ 'එක' දෙපාර්තමේන්තුවක් පමණි. මෙය ER රූපසටහනකින් නිවැරදිව නිරූපණය කරන්නේ කෙසේද?",
        options: [
            "'සේවක' සහ 'දෙපාර්තමේන්තු' භූතාර්ථ අතර One-to-One සම්බන්ධතාවයක්.",
            "'සේවක' සහ 'දෙපාර්තමේන්තු' භූතාර්ථ අතර Many-to-Many සම්බන්ධතාවයක්.",
            "'සේවක' භූතාර්ථයෙන් 'දෙපාර්තමේන්තු' භූතාර්ථයට One-to-Many සම්බන්ධතාවයක්.",
            "'දෙපාර්තමේන්තු' භූතාර්ථයෙන් 'සේවක' භූතාර්ථයට One-to-Many සම්බන්ධතාවයක්.",
            "'සේවක' භූතාර්ථයේ 'දෙපාර්තමේන්තු' උපලක්ෂණයක් (attribute) ලෙස."
        ],
        correctAnswerIndex: 3,
        explanation: "ප්‍රකාශයට අනුව, එක් දෙපාර්තමේන්තුවක සේවකයින් කිහිප දෙනෙකු සිටිය හැකි අතර, එක් සේවකයෙකුට ඇත්තේ එක් දෙපාර්තමේන්තුවක් පමණි. මෙහිදී 'දෙපාර්තමේන්තුව' යනු 'එක' පැත්ත වන අතර, 'සේවක' යනු 'බහු' පැත්ත වේ. එබැවින් සම්බන්ධතාවය 'දෙපාර්තමේන්තු' සිට 'සේවක' දක්වා One-to-Many (1:N) වේ."
    },
    {
        questionText: "'විස්තෘත භූතාර්ථ සම්බන්ධතා රූප සටහන්' (Extended ER diagrams) හැඳින්වීමෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "සාම්ප්‍රදායික ER රූපසටහන් වලට වඩා විශාල ප්‍රමාණයේ රූපසටහන් ඇඳීම.",
            "දත්ත සමුදායක දත්ත ගබඩා කිරීමේ භෞතික ක්‍රම විස්තර කිරීම.",
            "Supertype/Subtype (විශේෂීකරණය/සාමාන්‍යකරණය) සහ කණ්ඩායම් (categorization) වැනි අමතර සංකල්ප ඇතුළත් කිරීමෙන් ER ආකෘතියේ ප්‍රකාශන බලය වැඩි දියුණු කිරීම.",
            "Relational Model වෙත පරිවර්තනය කිරීමේ ක්‍රියාවලිය විස්තර කිරීම.",
            "දත්ත සමුදායක ආරක්ෂක ක්‍රමවේද විස්තර කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "විස්තෘත ER රූප සටහන් (EER diagrams) සාම්ප්‍රදායික ER ආකෘතියට වඩා උසස් සංකල්ප (උදා: විශේෂීකරණය/සාමාන්‍යකරණය - Supertype/Subtype, උරුමය - Inheritance, කණ්ඩායම් - Categorization, එකතුව - Aggregation) එකතු කරමින් දත්ත සමුදායක සංකල්පීය සැලසුම වඩාත් සවිස්තරාත්මකව හා නිවැරදිව නිරූපණය කිරීමට උපකාරී වේ."
    },
    {
        questionText: "දුර්වල භූතාර්ථයක් (Weak Entity) සම්බන්ධයෙන් වඩාත් නිවැරදි ප්‍රකාශය කුමක්ද?",
        options: [
            "එය ප්‍රාථමික යතුරක් (Primary Key) සහිතව ස්වාධීනව පවතින භූතාර්ථයකි.",
            "එහි පැවැත්මට වෙනත් ශක්තිමත් භූතාර්ථයක් (Strong Entity) මත රඳා පවතින අතර, එයට තමන්ගේම අද්විතීය ප්‍රාථමික යතුරක් නොමැත.",
            "එය Relational Model හි වගු අතර ඇති සම්බන්ධතාවක් නිරූපණය කරයි.",
            "එය අමතර උපලක්ෂණ (Attributes) සහිත භූතාර්ථයකි.",
            "එය දත්ත සමුදායක ආරක්ෂක ක්‍රමවේද නිරූපණය කරයි."
        ],
        correctAnswerIndex: 1,
        explanation: "දුර්වල භූතාර්ථයක් (Weak Entity) තමන්ගේම අද්විතීය ප්‍රාථමික යතුරක් නොමැති අතර, එහි පැවැත්මට ශක්තිමත් භූතාර්ථයක් (Identifying Owner Entity) මත රඳා පවතී. එය ශක්තිමත් භූතාර්ථය හා සම්බන්ධ වීමෙන් පමණක් අද්විතීයව හඳුනාගත හැක."
    },
    {
        questionText: "ER රූප සටහනක භූතාර්ථයක් (Entity) නිරූපණය කිරීමට භාවිතා කරන ප්‍රධාන සංකේතය කුමක්ද?",
        options: [
            "ඕවල් (Oval)",
            "දියමන්ති (Diamond)",
            "සෘජුකෝණාස්‍රය (Rectangle)",
            "වෘත්තය (Circle)",
            "ත්‍රිකෝණය (Triangle)"
        ],
        correctAnswerIndex: 2,
        explanation: "ER රූප සටහනක භූතාර්ථයක් (Entity) සාමාන්‍යයෙන් සෘජුකෝණාස්‍රයක් (Rectangle) මගින් නිරූපණය කෙරේ. උපලක්ෂණ ඕවල් වලින්ද, සම්බන්ධතා දියමන්ති වලින්ද නිරූපණය වේ."
    },
    {
        questionText: "ER රූප සටහනක උපලක්ෂණයක් (Attribute) නිරූපණය කිරීමට භාවිතා කරන ප්‍රධාන සංකේතය කුමක්ද?",
        options: [
            "සෘජුකෝණාස්‍රය (Rectangle)",
            "දියමන්ති (Diamond)",
            "ඕවල් (Oval)",
            "වෘත්තය (Circle)",
            "සරල රේඛාව (Line)"
        ],
        correctAnswerIndex: 2,
        explanation: "ER රූප සටහනක උපලක්ෂණයක් (Attribute) සාමාන්‍යයෙන් ඕවල් (Oval) මගින් නිරූපණය කෙරේ. එම ඕවල් අදාළ භූතාර්ථයට සරල රේඛාවකින් සම්බන්ධ කරනු ලැබේ."
    },
    {
        questionText: "ER රූප සටහනක සම්බන්ධතාවක් (Relationship) නිරූපණය කිරීමට භාවිතා කරන ප්‍රධාන සංකේතය කුමක්ද?",
        options: [
            "ඕවල් (Oval)",
            "සෘජුකෝණාස්‍රය (Rectangle)",
            "වෘත්තය (Circle)",
            "දියමන්ති (Diamond)",
            "කිරුළ (Crow's Foot)"
        ],
        correctAnswerIndex: 3,
        explanation: "ER රූප සටහනක සම්බන්ධතාවක් (Relationship) සාමාන්‍යයෙන් දියමන්ති (Diamond) හැඩයකින් නිරූපණය කෙරේ. මෙම දියමන්ති දෙපසින් සම්බන්ධිත භූතාර්ථ වෙත රේඛා මගින් සම්බන්ධ වේ."
    },

    // 8.3 දත්ත සමුදායක තාර්කික රූපාත්මක සටහන සැලසුම් කරයි
    {
        questionText: "'දත්ත සමුදායක තාර්කික රූපාත්මක සටහන' (Logical Schema) යන්න නිවැරදිව නිර්වචනය කරන්නේ කෙසේද?",
        options: [
            "දත්ත සමුදායක භෞතික ගබඩා කිරීමේ ක්‍රමවේද විස්තර කිරීම.",
            "දත්ත සමුදායක සංකල්පීය ආකෘතිය පරිශීලකයින්ට තේරුම් ගත හැකි පරිදි සරල කිරීම.",
            "දත්ත සමුදාය කළමනාකරණ පද්ධතියක් (DBMS) තුළ දත්ත සංවිධානය කර ගබඩා කරන ආකාරය පිළිබඳ ස්වාධීන විස්තරයකි, එය දත්තවල ව්‍යුහය, සම්බන්ධතා සහ සීමා කිරීම් නිර්වචනය කරයි.",
            "දත්ත සමුදායක දත්ත වෙත ප්‍රවේශ වීමට භාවිතා කරන විමසුම් භාෂාව (Query Language) විස්තර කිරීම.",
            "දත්ත සමුදායක දත්තවල ආරක්ෂාව සහ පිටපත් කිරීමේ (backup) ක්‍රමවේද විස්තර කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "තාර්කික රූපාත්මක සටහන (Logical Schema) යනු දත්ත සමුදායක සංවිධානය පිළිබඳ ඉහළ මට්ටමේ, ක්‍රියාත්මක කිරීමේ වේදිකාවෙන් (DBMS) ස්වාධීන වූ, විස්තරයකි. එය දත්ත ව්‍යුහය (වගු), ඒවා අතර සම්බන්ධතා, සහ දත්ත සීමා කිරීම් (constraints) නිරූපණය කරයි. ER රූපසටහනෙන් පසුව, භෞතික ක්‍රියාත්මක කිරීමට පෙර සිදු කරන සැලසුම්කරණ පියවරකි."
    },
    {
        questionText: "Relational Model හි 'සම්බන්ධතා රූපාත්මක සටහන' (Relational Schema) යනු කුමක්ද?",
        options: [
            "සම්බන්ධතා දත්ත සමුදායක වගු අතර භෞතික සම්බන්ධතා නිරූපණය කිරීම.",
            "සම්බන්ධතා දත්ත සමුදායක එක් එක් වගුවේ නම, එහි තීරු (attributes) සහ ඒවායේ දත්ත වර්ග (data types) විස්තර කරන විධිමත් අර්ථ දැක්වීමකි.",
            "සම්බන්ධතා දත්ත සමුදායක දත්ත ගබඩා කර ඇති භෞතික ගොනු පද්ධතිය.",
            "දත්ත සමුදායක දත්ත වෙනස් කිරීම සඳහා භාවිතා කරන SQL විධාන ලැයිස්තුව.",
            "දත්ත සමුදායක දත්තවල අඛණ්ඩතාව පවත්වා ගැනීමට භාවිතා කරන නීති මාලාවක්."
        ],
        correctAnswerIndex: 1,
        explanation: "සම්බන්ධතා රූපාත්මක සටහන (Relational Schema) යනු Relational Model හි වගුවක (relation) ව්‍යුහය විස්තර කරන විධිමත් සටහනකි. එය වගුවේ නම, එහි තීරු (attributes) සහ එක් එක් තීරුවේ දත්ත වර්ග (domains) දක්වයි. උදා: Student (StudentID, Name, Age, Major)."
    },
    {
        questionText: "'සම්බන්ධතා නිදර්ශන' (Relational Instances) පිළිබඳ නිවැරදි ප්‍රකාශය කුමක්ද?",
        options: [
            "එය දත්ත සමුදායක වගු අතර ඇති සම්බන්ධතා වර්ගය නිරූපණය කරයි.",
            "එය දත්ත සමුදායක රූපාත්මක සටහනේ (schema) නිර්වචනය කරන ලද වගුවක, යම් නිශ්චිත මොහොතක පවතින සත්‍ය දත්ත කට්ටලයයි.",
            "එය දත්ත සමුදායක වගු නිර්මාණය කිරීමට භාවිතා කරන SQL කේතයයි.",
            "එය දත්ත සමුදායක වගු වල උපලක්ෂණ (attributes) ලැයිස්තුවකි.",
            "එය දත්ත සමුදායක දත්ත ගබඩා කරන ආකාරය පිළිබඳ සාමාන්‍ය විස්තරයකි."
        ],
        correctAnswerIndex: 1,
        explanation: "සම්බන්ධතා නිදර්ශනයක් (Relational Instance) යනු Relational Schema එකකින් නිර්වචනය කරන ලද වගුවක (relation), යම් නිශ්චිත වේලාවක ගබඩා වී ඇති සත්‍ය දත්ත කට්ටලයයි. එය වගුවක අඩංගු පේළි (rows) සහ තීරු (columns) වල ඇති සත්‍ය දත්ත නිරූපණය කරයි. Schema යනු ව්‍යුහය වන අතර, Instance යනු එම ව්‍යුහය තුළ ඇති දත්තයි."
    },
    {
        questionText: "දත්ත සමුදායක 'නිෂ්පාදක යතුරක්' (Candidate Key) යනු කුමක්ද?",
        options: [
            "වගුවක ඇති ඕනෑම තීරුවක්.",
            "වගුවක පේළියක් අද්විතීයව හඳුනා ගැනීමට නොහැකි තීරුවක්.",
            "වගුවක පේළියක් අද්විතීයව හඳුනා ගැනීමට හැකියාව ඇති, අමතර තීරු ඉවත් කළ නොහැකි, අවම උපලක්ෂණ සමූහයකි.",
            "වගුවක පේළියක් අද්විතීයව හඳුනා ගැනීමට භාවිතා කරන තීරුවක් වන අතර, එය තවත් වගුවකට සම්බන්ධ කර ඇත.",
            "දත්ත සමුදායක සියලුම වගු අතර ඇති ප්‍රධාන සම්බන්ධතාවය."
        ],
        correctAnswerIndex: 2,
        explanation: "නිෂ්පාදක යතුරක් (Candidate Key) යනු වගුවක එක් එක් පේළිය (record) අද්විතීයව හඳුනා ගැනීමට හැකියාව ඇති එක් උපලක්ෂණයක් (attribute) හෝ උපලක්ෂණ සමූහයකි. එහි වැදගත් ලක්ෂණය වන්නේ එය අවම වීමයි (Minimal Superkey) – එනම්, එහි කිසිදු උපලක්ෂණයක් ඉවත් කළ විට එහි අද්විතීයතාවය නැති නොවේ."
    },
    {
        questionText: "'ප්‍රාථමික යතුරක්' (Primary Key) පිළිබඳ නිවැරදි ප්‍රකාශය තෝරන්න.",
        options: [
            "එය Relational Model හි භාවිතා නොවේ.",
            "එය දත්ත පුනරාවර්තනයට (data redundancy) ඉඩ සලසයි.",
            "එය වගුවක පේළියක් අද්විතීයව හඳුනා ගන්නා නිෂ්පාදක යතුරු අතරින් තෝරා ගන්නා ලද එකම යතුර වන අතර, එහි අගයන් ශූන්‍ය (NULL) විය නොහැක.",
            "එය වගු දෙකක් අතර සම්බන්ධතා ඇති කිරීමට පමණක් භාවිතා කරයි.",
            "එය විකල්ප යතුරක (Alternate Key) තවත් නමකි."
        ],
        correctAnswerIndex: 2,
        explanation: "ප්‍රාථමික යතුරක් (Primary Key) යනු නිෂ්පාදක යතුරු (Candidate Keys) අතරින් තෝරා ගන්නා ලද, වගුවක එක් එක් පේළිය අද්විතීයව හඳුනා ගන්නා යතුරයි. එයට ප්‍රධාන ගුණාංග දෙකක් ඇත: අද්විතීයත්වය (Uniqueness) සහ ශූන්‍ය නොවන බව (Non-nullability)."
    },
    {
        questionText: "'විකල්ප යතුරක්' (Alternate Key) යනු කුමක්ද?",
        options: [
            "එය ප්‍රාථමික යතුරක් ලෙස භාවිතා කිරීමට නොහැකි යතුරකි.",
            "එය ප්‍රාථමික යතුරක් තෝරා ගැනීමෙන් පසු ඉතිරි වන නිෂ්පාදක යතුරු (Candidate Keys) වේ.",
            "එය ආගන්තුක යතුරක (Foreign Key) තවත් නමකි.",
            "එය වගු දෙකක් අතර සම්බන්ධතා ඇති කිරීමට පමණක් භාවිතා කරයි.",
            "එය ප්‍රාථමික යතුරට සමාන අගයන් සහිත තවත් යතුරකි."
        ],
        correctAnswerIndex: 1,
        explanation: "විකල්ප යතුරක් (Alternate Key) යනු වගුවක ප්‍රාථමික යතුර ලෙස තෝරා නොගත් නමුත්, තවමත් පේළි අද්විතීයව හඳුනා ගැනීමට හැකියාව ඇති වෙනත් නිෂ්පාදක යතුරු වේ. උදාහරණයක් ලෙස, ශිෂ්‍ය වගුවක ශිෂ්‍ය හැඳුනුම් අංකය (StudentID) ප්‍රාථමික යතුර නම්, ජාතික හැඳුනුම්පත් අංකය (NIC) විකල්ප යතුරක් විය හැක, මන්ද එයද අද්විතීය වන බැවිනි."
    },
    {
        questionText: "'ආගන්තුක යතුරක්' (Foreign Key) පිළිබඳ නිවැරදි නිර්වචනය කුමක්ද?",
        options: [
            "එය වගුවක ඇති ඕනෑම අද්විතීය නොවන තීරුවකි.",
            "එය වගුවක පේළියක් අද්විතීයව හඳුනා ගැනීමට භාවිතා කරන යතුරකි.",
            "එය එක් වගුවක ප්‍රාථමික යතුරක් වන අතර, වෙනත් වගුවක තීරුවක් ලෙස භාවිතා කර එම වගු දෙක අතර සම්බන්ධයක් ඇති කරයි.",
            "එය දත්ත සමුදායක දත්ත ආරක්ෂාවට භාවිතා කරන සංකීර්ණ යතුරකි.",
            "එය දත්ත සමුදායක වගු දෙකක් අතර ඇති many-to-many සම්බන්ධතා පමණක් නිරූපණය කරයි."
        ],
        correctAnswerIndex: 2,
        explanation: "ආගන්තුක යතුරක් (Foreign Key) යනු එක් වගුවක (child table) ඇති තීරුවක් හෝ තීරු සමූහයක් වන අතර, එය තවත් වගුවක (parent table) ප්‍රාථමික යතුරට (Primary Key) හෝ නිෂ්පාදක යතුරකට (Candidate Key) යොමු කරයි. මෙය වගු අතර සම්බන්ධතා ඇති කිරීමට සහ දත්ත අඛණ්ඩතාව (referential integrity) පවත්වා ගැනීමට අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "දත්ත සමුදාය සැලසුම් කිරීමේදී 'වසම' (Domain) යන්නෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "දත්ත සමුදාය ගබඩා කර ඇති සේවාදායකයේ (server) භෞතික ස්ථානය.",
            "උපලක්ෂණයක් (attribute) සඳහා ගත හැකි වලංගු අගයන් සමූහය.",
            "දත්ත සමුදායක දත්තවල ආරක්ෂක මට්ටම.",
            "දත්ත සමුදායක දත්ත වර්ග කිරීමේ ක්‍රමය.",
            "දත්ත සමුදායක් කළමනාකරණය කරන මෘදුකාංග පද්ධතිය."
        ],
        correctAnswerIndex: 1,
        explanation: "දත්ත සමුදායක වසම (Domain) යනු යම් උපලක්ෂණයක් (attribute) සඳහා ගත හැකි විය හැකි අගයන්ගේ කට්ටලයයි. උදාහරණයක් ලෙස, 'වයස' (Age) යන උපලක්ෂණයට '18 ත් 60 ත් අතර පූර්ණ සංඛ්‍යා' යන වසමක් තිබිය හැකිය. මෙය දත්තවල නිරවද්‍යතාව සහ අඛණ්ඩතාව පවත්වා ගැනීමට උපකාරී වේ."
    },
    {
        questionText: "සම්බන්ධතා නිදර්ශන (Relational Instances) පිළිබඳ වැරදි ප්‍රකාශය කුමක්ද?",
        options: [
            "එය දත්ත සමුදායක රූපාත්මක සටහනෙහි (Schema) නිර්වචනය කරන ලද වගුවක, යම් නිශ්චිත මොහොතක පවතින සත්‍ය දත්ත කට්ටලය නිරූපණය කරයි.",
            "එය දත්ත සමුදායක ගබඩා වී ඇති සත්‍ය දත්ත පේළි (Rows) සහ තීරු (Columns) මගින් නිරූපණය කෙරේ.",
            "සම්බන්ධතා නිදර්ශන නිරන්තරයෙන් වෙනස් විය හැකි අතර, දත්ත එකතු කිරීම, යාවත්කාලීන කිරීම හෝ මකා දැමීම මගින් යාවත්කාලීන වේ.",
            "එය දත්ත සමුදායක දත්ත ව්‍යුහය (Structure) විස්තර කරන ස්ථිතික (Static) අර්ථ දැක්වීමකි.",
            "වගුවක සෑම නව පේළියක්ම නව සම්බන්ධතා නිදර්ශනයක් එක් කිරීම නියෝජනය කරයි."
        ],
        correctAnswerIndex: 3,
        explanation: "සම්බන්ධතා නිදර්ශන (Relational Instances) යනු යම් මොහොතක වගුවක අඩංගු සත්‍ය දත්ත කට්ටලයයි. එය ස්ථිතික ව්‍යුහයක් (Schema) විස්තර නොකරයි; Schema යනු ව්‍යුහය වන අතර, Instance යනු එම ව්‍යුහය තුළ ඇති ගතික දත්තයි. එබැවින් 'එය දත්ත සමුදායක දත්ත ව්‍යුහය (Structure) විස්තර කරන ස්ථිතික (Static) අර්ථ දැක්වීමකි' යන්න වැරදි ප්‍රකාශයකි."
    },
    {
        questionText: "ප්‍රාථමික යතුරක් (Primary Key) තෝරා ගැනීමේදී සලකා බැලිය යුතු වැදගත්ම ලක්ෂණය කුමක්ද?",
        options: [
            "එය විශාල අකුරු වලින් ලිවිය යුතු වීම.",
            "එය ශූන්‍ය අගයක් (NULL value) ගැනීමට හැකි වීම.",
            "එය වගුවක සෑම පේළියක්ම අද්විතීයව (Uniquely) හඳුනා ගැනීමට හැකි වීම.",
            "එය සංඛ්‍යාත්මක අගයක් පමණක් තිබිය යුතු වීම.",
            "එය වෙනත් වගු වල ආගන්තුක යතුරක් (Foreign Key) ලෙස භාවිතා කළ නොහැකි වීම."
        ],
        correctAnswerIndex: 2,
        explanation: "ප්‍රාථමික යතුරක (Primary Key) වැදගත්ම ලක්ෂණය වන්නේ එය වගුවක එක් එක් පේළිය අද්විතීයව හඳුනා ගැනීමට හැකි වීමයි. එසේම එය ශූන්‍ය අගයක් (NULL value) ගත නොහැක."
    },

    // 8.4 භූතාර්ථ සම්බන්ධතා අනුකෘතිය, තාර්කික රූපාත්මක සටහන බවට පරිවර්තනය කරයි
    {
        questionText: "භූතාර්ථ සම්බන්ධතා අනුකෘතියක් (ER Diagram) තාර්කික රූපාත්මක සටහනක් (Logical Schema) බවට පරිවර්තනය කිරීමේ ක්‍රියාවලියේ මූලික අරමුණ කුමක්ද?",
        options: [
            "දත්ත සමුදායක භෞතික ගබඩා කිරීමේ ක්‍රමවේද තීරණය කිරීම.",
            "දත්ත සමුදාය නිර්මාණය කිරීම සඳහා අවශ්‍ය SQL කේතය ස්වයංක්‍රීයව ජනනය කිරීම.",
            "දත්ත සමුදායේ සංකල්පීය නිරූපණය, Relational Model හි වගු සහ සම්බන්ධතා ආකාරයෙන් ක්‍රියාත්මක කළ හැකි ව්‍යුහයකට හැරවීම.",
            "දත්ත සමුදායක දත්තවල ආරක්ෂක මට්ටම් වැඩි දියුණු කිරීම.",
            "දත්ත සමුදාය නිර්මාණය කිරීමට පෙර අවශ්‍ය දත්ත ප්‍රමාණය තක්සේරු කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "ER රූපසටහනක් යනු දත්ත සමුදායක සංකල්පීය නිරූපණයකි. එය තාර්කික රූපාත්මක සටහනක් (relational schema) බවට පරිවර්තනය කිරීමේ ක්‍රියාවලියේ අරමුණ වන්නේ මෙම සංකල්පීය ආකෘතිය, Relational Database Management System (RDBMS) එකක් තුළ ක්‍රියාත්මක කළ හැකි වගු (tables) සහ යතුරු (keys) ආකාරයෙන් විධිමත් ලෙස අර්ථ දැක්වීමයි."
    },
    {
        questionText: "ER රූපසටහනක ඇති 'ශක්තිමත් භූතාර්ථයක්' (Strong Entity) Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී සිදුවන ප්‍රධාන වෙනස කුමක්ද?",
        options: [
            "ශක්තිමත් භූතාර්ථයක් තීරු (attributes) සමූහයක් බවට පත් වේ.",
            "ශක්තිමත් භූතාර්ථයක් වෙනත් භූතාර්ථයකට සම්බන්ධතාවයක් බවට පත් වේ.",
            "ශක්තිමත් භූතාර්ථයක්, එහි උපලක්ෂණ (attributes) තීරු ලෙසත්, එහි භූතාර්ථ හඳුන්වනය (entity identifier) ප්‍රාථමික යතුරක් (primary key) ලෙසත් සහිතව, වෙනම වගුවක් (relation) බවට පත් වේ.",
            "ශක්තිමත් භූතාර්ථයක් දත්ත සමුදායක දර්ශකයක් (index) බවට පත් වේ.",
            "ශක්තිමත් භූතාර්ථයක් ස්වයංක්‍රීයව ආගන්තුක යතුරක් (foreign key) බවට පත් වේ."
        ],
        correctAnswerIndex: 2,
        explanation: "ER රූපසටහනක ශක්තිමත් භූතාර්ථයක් (Strong Entity) Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී, එයට අනුරූපව වෙනම වගුවක් (table/relation) නිර්මාණය වේ. එම භූතාර්ථයේ උපලක්ෂණ (attributes) එම වගුවේ තීරු (columns) බවට පත් වන අතර, භූතාර්ථ හඳුන්වනය (entity identifier) අදාළ වගුවේ ප්‍රාථමික යතුර (primary key) ලෙස භාවිතා වේ."
    },
    {
        questionText: "ER රූපසටහනක ඇති 'සංයුක්ත උපලක්ෂණයක්' (Composite Attribute) Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී වඩාත් සුදුසු ක්‍රමය කුමක්ද?",
        options: [
            "එය තනි තීරුවක් (single column) ලෙස ගබඩා කිරීම.",
            "සංයුක්ත උපලක්ෂණයේ සෑම සංඝටක උපලක්ෂණයක්ම (component attribute) වෙනම තීරුවක් ලෙස අදාළ වගුවට එකතු කිරීම.",
            "එය වෙනම වගුවක් ලෙස නිර්මාණය කිරීම.",
            "එය සම්පූර්ණයෙන් ම දත්ත සමුදායෙන් ඉවත් කිරීම.",
            "එය ආගන්තුක යතුරක් (Foreign Key) බවට පත් කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "සංයුක්ත උපලක්ෂණයක් (Composite Attribute), උදා: 'නම' (Name) යනු 'පළමු නම' (FirstName), 'මැද නම' (MiddleName), 'අවසන් නම' (LastName) යන උපලක්ෂණ වලින් සමන්විත වන විට, Relational Schema වෙත පරිවර්තනය කිරීමේදී, 'පළමු නම', 'මැද නම', 'අවසන් නම' ලෙස වෙනම තීරු තුනක් අදාළ වගුවට එකතු කරනු ලැබේ."
    },
    {
        questionText: "ER රූපසටහනක ඇති 'එක-ට-බහු' (One-to-Many) සම්බන්ධතාවයක් Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී සිදුවන සාමාන්‍ය ක්‍රියාමාර්ගය කුමක්ද?",
        options: [
            "නව මැදිහත් වගුවක් (linking table) නිර්මාණය කිරීම.",
            "'බහු' පැත්තේ වගුවට 'එක' පැත්තේ වගුවේ ප්‍රාථමික යතුර (Primary Key) ආගන්තුක යතුරක් (Foreign Key) ලෙස එකතු කිරීම.",
            "'එක' පැත්තේ වගුවට 'බහු' පැත්තේ වගුවේ ප්‍රාථමික යතුර ආගන්තුක යතුරක් ලෙස එකතු කිරීම.",
            "සම්බන්ධතාවය නිරූපණය කරන කිසිදු වගුවක් නිර්මාණය නොකිරීම.",
            "වගු දෙකම එක වගුවකට ඒකාබද්ධ කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "One-to-Many (1:N) සම්බන්ධතාවයක් Relational Model වෙත පරිවර්තනය කිරීමේදී, 'එක' පැත්තේ (parent entity) ප්‍රාථමික යතුර, 'බහු' පැත්තේ (child entity) අනුරූප වගුවට ආගන්තුක යතුරක් (Foreign Key) ලෙස එකතු කරනු ලැබේ. මෙය වගු දෙක අතර සබැඳියාව ඇති කරයි."
    },
    {
        questionText: "'බහු-ට-බහු' (Many-to-Many) සම්බන්ධතාවයක් (උදා: ශිෂ්‍යයන් කිහිප දෙනෙකුට පාඨමාලා කිහිපයකට ලියාපදිංචි විය හැකි වීම) Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී අවශ්‍ය වන්නේ කුමක්ද?",
        options: [
            "සම්බන්ධිත භූතාර්ථ දෙකෙන් එකක ප්‍රාථමික යතුර ආගන්තුක යතුරක් ලෙස එකතු කිරීම.",
            "නව මැදිහත් වගුවක් (linking/junction table) නිර්මාණය කිරීම, එහිදී අදාළ භූතාර්ථ දෙකේ ප්‍රාථමික යතුරු ආගන්තුක යතුරු ලෙස අඩංගු වේ.",
            "එය One-to-Many සම්බන්ධතා දෙකක් ලෙස බෙදීම.",
            "සම්බන්ධතාවය සම්පූර්ණයෙන්ම ඉවත් කිරීම.",
            "සම්බන්ධිත භූතාර්ථ දෙකම එක වගුවකට ඒකාබද්ධ කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "Many-to-Many (M:N) සම්බන්ධතාවයක් Relational Model වෙත පරිවර්තනය කිරීම සඳහා, මැදිහත් වගුවක් (linking table or junction table) නිර්මාණය කිරීම අත්‍යවශ්‍ය වේ. මෙම නව වගුවෙහි, සම්බන්ධතාවයට සහභාගී වන භූතාර්ථ දෙකේ ප්‍රාථමික යතුරු ආගන්තුක යතුරු ලෙස අඩංගු වන අතර, මෙම ආගන්තුක යතුරු දෙකෙහිම එකතුව එම නව වගුවේ ප්‍රාථමික යතුර ලෙස ක්‍රියා කළ හැකිය."
    },
    {
        questionText: "ER රූපසටහනක ඇති 'දුර්වල භූතාර්ථයක්' (Weak Entity) Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී, එහි ප්‍රාථමික යතුර සාමාන්‍යයෙන් සමන්විත වන්නේ කුමකින්ද?",
        options: [
            "එහිම උපලක්ෂණ වලින් පමණි.",
            "එය රඳා පවතින 'ශක්තිමත් භූතාර්ථයේ' ප්‍රාථමික යතුරෙන් පමණි.",
            "එය රඳා පවතින 'ශක්තිමත් භූතාර්ථයේ' ප්‍රාථමික යතුර සහ එහිම 'අර්ධ යතුර' (partial key) යන දෙකෙහිම එකතුවෙනි.",
            "ඕනෑම අහඹු ලෙස ජනනය කරන ලද හැඳුනුම් අංකයකිනි.",
            "එහි සියලුම උපලක්ෂණවල එකතුවෙනි."
        ],
        correctAnswerIndex: 2,
        explanation: "දුර්වල භූතාර්ථයක් (Weak Entity) තමන්ගේම අද්විතීය ප්‍රාථමික යතුරක් නොමැති අතර, එහි පැවැත්මට ශක්තිමත් භූතාර්ථයක් (Identifying Owner Entity) මත රඳා පවතී. එය Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී, දුර්වල භූතාර්ථයේ වගුවේ ප්‍රාථමික යතුර සමන්විත වන්නේ, එය රඳා පවතින ශක්තිමත් භූතාර්ථයේ ප්‍රාථමික යතුර (ආගන්තුක යතුරක් ලෙස) සහ දුර්වල භූතාර්ථයේම ඇති අර්ධ යතුර (Partial Key) යන දෙකෙහිම එකතුවෙනි."
    },
    {
        questionText: "භූතාර්ථ සම්බන්ධතා අනුකෘතිය තාර්කික රූපාත්මක සටහනක් බවට පරිවර්තනය කිරීමේ ප්‍රධාන ප්‍රතිලාභයක් ලෙස සැලකිය හැක්කේ කුමක්ද?",
        options: [
            "දත්ත සමුදායේ ගබඩා කිරීමේ ඉඩ ප්‍රමාණය වැඩි කිරීම.",
            "දත්තවල අඛණ්ඩතාව (data integrity) සහ පුනරාවර්තනය (redundancy) අවම කිරීම.",
            "පරිශීලක අතුරුමුහුණත (User Interface) නිර්මාණය කිරීම පහසු කිරීම.",
            "දත්ත සමුදායේ වේගය අඩු කිරීම.",
            "දත්තවල ආරක්ෂාව සම්පූර්ණයෙන්ම ඉවත් කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "ER රූපසටහන තාර්කික රූපාත්මක සටහනකට පරිවර්තනය කිරීමේ ක්‍රියාවලියේදී, සාමාන්‍යකරණය (Normalization) වැනි මූලධර්ම අනුගමනය කරනු ලැබේ. මෙහි ප්‍රධාන අරමුණක් වන්නේ දත්ත පුනරාවර්තනය අවම කිරීම (Minimize Redundancy) සහ දත්ත අඛණ්ඩතාවය තහවුරු කිරීම (Ensure Data Integrity) මගින් දත්ත සමුදායේ කාර්යක්ෂමතාව සහ නිරවද්‍යතාව වැඩි දියුණු කිරීමයි."
    },
    {
        questionText: "ER රූපසටහනක 'බහු අගය උපලක්ෂණයක්' (Multivalued Attribute) Relational Schema එකකට පරිවර්තනය කිරීමේදී සාමාන්‍යයෙන් භාවිතා කරන ක්‍රමය කුමක්ද?",
        options: [
            "එය අදාළ භූතාර්ථ වගුවට නව තීරුවක් ලෙස එකතු කිරීම.",
            "එය වෙනම වගුවක් ලෙස නිර්මාණය කිරීම, එහිදී මූලික භූතාර්ථයේ ප්‍රාථමික යතුර (Primary Key) ආගන්තුක යතුරක් (Foreign Key) ලෙස අඩංගු වේ.",
            "එය සම්පූර්ණයෙන්ම ඉවත් කිරීම, මන්ද Relational Model හි එය නිරූපණය කළ නොහැකි බැවිනි.",
            "එය සංයුක්ත උපලක්ෂණයක් (Composite Attribute) බවට පත් කිරීම.",
            "එය දත්ත සමුදායක දර්ශකයක් (Index) බවට පත් කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "බහු අගය උපලක්ෂණයක් (Multivalued Attribute) යනු එකම භූතාර්ථයකට විවිධ අගයන් කිහිපයක් තිබිය හැකි උපලක්ෂණයකි (උදා: ශිෂ්‍යයෙකුගේ දුරකථන අංක කිහිපයක්). Relational Model වෙත පරිවර්තනය කිරීමේදී, මෙය වෙනම වගුවක් ලෙස නිර්මාණය කෙරේ. එම වගුවේ, බහු අගය උපලක්ෂණයේ අගයන් සහ මූලික භූතාර්ථයේ ප්‍රාථමික යතුර (Foreign Key ලෙස) අඩංගු වේ."
    },
    {
        questionText: "ER රූපසටහනක 'උපලක්ෂණ ප්‍රමාණයනය' (Attribute Normalization/Transformation) යනුවෙන් අදහස් කරන්නේ කුමක්ද?",
        options: [
            "උපලක්ෂණ වල දත්ත වර්ග (Data Types) තීරණය කිරීම.",
            "උපලක්ෂණ මගින් නිරූපණය කරන දත්තවල ප්‍රමාණය තීරණය කිරීම.",
            "ER රූපසටහනේ ඇති උපලක්ෂණ, Relational Schema හි වගු වල තීරු (Columns) බවට පරිවර්තනය කිරීමේ ක්‍රියාවලිය.",
            "උපලක්ෂණ වලට අද්විතීය අගයන් (Unique Values) ඇති බව සහතික කිරීම.",
            "උපලක්ෂණ වලට අදාළව දත්ත සමුදා ආරක්ෂක මට්ටම් නිර්වචනය කිරීම."
        ],
        correctAnswerIndex: 2,
        explanation: "උපලක්ෂණ ප්‍රමාණයනය (Attribute Transformation) යනු ER රූපසටහනක ඇති උපලක්ෂණ (Attributes), Relational Schema හි අදාළ වගු වල තීරු (Columns) බවට පරිවර්තනය කිරීමේ ක්‍රියාවලියයි. මෙහිදී සංයුක්ත උපලක්ෂණ, බහු අගය උපලක්ෂණ වැනි විශේෂ උපලක්ෂණ සඳහා නිශ්චිත පරිවර්තන නීති අනුගමනය කෙරේ."
    },
    {
        questionText: "සම්බන්ධක ප්‍රමාණයනය (Relationship Transformation) ER සිට Relational Model වෙත පරිවර්තනයේදී අත්‍යවශ්‍ය වන්නේ ඇයි?",
        options: [
            "දත්ත සමුදායේ දෘශ්‍යමාන පෙනුම වැඩි දියුණු කිරීමට.",
            "දත්ත සමුදායට දත්ත ඇතුළු කිරීමේ වේගය වැඩි කිරීමට.",
            "Relational Model හි සෘජුව සම්බන්ධතා (Relationships) නිරූපණය කිරීමට ක්‍රමයක් නොමැති අතර, ඒවා ප්‍රාථමික සහ ආගන්තුක යතුරු මගින් වගු අතර නිරූපණය කළ යුතු බැවින්.",
            "දත්ත සමුදායේ ගබඩා කිරීමේ ඉඩ ප්‍රමාණය අඩු කිරීමට.",
            "දත්තවල ආරක්ෂක අවදානම් අඩු කිරීමට."
        ],
        correctAnswerIndex: 2,
        explanation: "Relational Model වල සෘජුව සම්බන්ධතා නිරූපණය කිරීමට සංකේත නොමැත. ඒ වෙනුවට, සම්බන්ධතා නිරූපණය කරන්නේ ප්‍රාථමික යතුරු (Primary Keys) සහ ආගන්තුක යතුරු (Foreign Keys) භාවිතා කරමින් වගු අතර සබැඳි (links) ඇති කිරීමෙනි. එමනිසා, ER රූපසටහනේ ඇති සම්බන්ධතා, Relational Model හි මෙම යතුරු සංකල්පයට අනුව පරිවර්තනය කිරීම අත්‍යවශ්‍ය වේ."
    },
    {
        questionText: "ER රූප සටහනක 'ලැබුණු උපලක්ෂණයක්' (Derived Attribute) Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී සාමාන්‍යයෙන් සිදු කරන්නේ කුමක්ද?",
        options: [
            "එය වෙනම වගුවක් ලෙස නිර්මාණය කරයි.",
            "එය අදාළ වගුවේ තීරුවක් ලෙස කෙලින්ම ගබඩා කරයි.",
            "එය දත්ත සමුදායට ඇතුළත් නොකරයි, නමුත් අවශ්‍ය වූ විට එය වෙනත් උපලක්ෂණ වලින් ගණනය කරයි.",
            "එය ප්‍රාථමික යතුරක් (Primary Key) බවට පත් කරයි.",
            "එය ආගන්තුක යතුරක් (Foreign Key) බවට පත් කරයි."
        ],
        correctAnswerIndex: 2,
        explanation: "ලැබුණු උපලක්ෂණයක් (Derived Attribute), උදා: 'වයස' (Age) 'උපන් දිනය' (Date of Birth) මගින් ගණනය කළ හැකි විට, සාමාන්‍යයෙන් දත්ත සමුදායේ සෘජුව ගබඩා කරන්නේ නැත. ඒ වෙනුවට, අවශ්‍ය වූ විට එය ගබඩා කර ඇති වෙනත් උපලක්ෂණ වලින් (මෙම අවස්ථාවේදී 'උපන් දිනය' මගින්) ගණනය කර ලබා ගනී. මෙය දත්ත පුනරාවර්තනය අවම කිරීමට සහ දත්ත අඛණ්ඩතාව පවත්වා ගැනීමට උපකාරී වේ."
    },
    {
        questionText: "එක් එක් භූතාර්ථය (Entity) සහ එහි උපලක්ෂණ (Attributes) Relational Schema හි වගුවක් (Table) බවට පරිවර්තනය කිරීමේදී, භූතාර්ථ හඳුන්වනය (Entity Identifier) ​​කෙසේ හැසිරේද?",
        options: [
            "එය අදාළ වගුවේ ඕනෑම සාමාන්‍ය තීරුවක් (Column) බවට පත් වේ.",
            "එය ආගන්තුක යතුරක් (Foreign Key) ලෙස ක්‍රියා කරයි.",
            "එය එම වගුවේ ප්‍රාථමික යතුර (Primary Key) බවට පත් වේ.",
            "එය සම්පූර්ණයෙන්ම ඉවත් කරනු ලැබේ.",
            "එය වෙනම වගුවක් ලෙස නිර්මාණය වේ."
        ],
        correctAnswerIndex: 2,
        explanation: "ER රූපසටහනක භූතාර්ථ හඳුන්වනය (Entity Identifier) යනු එම භූතාර්ථයේ එක් එක් අවස්ථාව අද්විතීයව හඳුනා ගන්නා උපලක්ෂණයයි. Relational Schema එකක් බවට පරිවර්තනය කිරීමේදී, මෙම භූතාර්ථ හඳුන්වනය අදාළ වගුවේ ප්‍රාථමික යතුර (Primary Key) බවට පත් වේ."
    },
    {
        questionText: "ER රූපසටහනක 'ස්වයං-සම්බන්ධතාවක්' (Recursive Relationship) Relational Schema එකකට පරිවර්තනය කිරීමේදී සිදුවන සාමාන්‍ය ක්‍රියාමාර්ගය කුමක්ද?",
        options: [
            "එය වෙනම මැදිහත් වගුවක් (linking table) බවට පත් කරයි.",
            "එය One-to-One සම්බන්ධතාවක් ලෙස නිරූපණය කරයි.",
            "එය එම භූතාර්ථ වගුවටම ප්‍රාථමික යතුර (Primary Key) සහ ආගන්තුක යතුර (Foreign Key) යන දෙකම ඇතුළත් කිරීමෙන් නිරූපණය කරයි.",
            "එය සම්බන්ධතා දෙකක් ලෙස බෙදයි.",
            "එය Relational Model හි නිරූපණය කළ නොහැකි බැවින් ඉවත් කරයි."
        ],
        correctAnswerIndex: 2,
        explanation: "ස්වයං-සම්බන්ධතාවක් (Recursive Relationship) යනු එක් භූතාර්ථයක අවස්ථා එම භූතාර්ථයේම තවත් අවස්ථා සමඟ සම්බන්ධ වන විටය (උදා: 'සේවකයෙකු' 'තවත් සේවකයෙකු' 'කළමනාකරණය කරයි'). මෙය Relational Model වෙත පරිවර්තනය කිරීමේදී, අදාළ භූතාර්ථ වගුවේම අමතර තීරුවක් (උදා: ManagerID) ආගන්තුක යතුරක් ලෙස එකතු කරනු ලැබේ, එය එම වගුවේම ප්‍රාථමික යතුරට (EmployeeID) යොමු කරයි."
    },
    {
        questionText: "ER සිට Relational Model වෙත පරිවර්තනය කිරීමේදී 'විකල්ප උපලක්ෂණ' (Optional Attributes) කෙසේ කළමනාකරණය කරනු ලැබේ?",
        options: [
            "ඒවා සැමවිටම වෙනම වගුවක් ලෙස නිර්මාණය කරයි.",
            "ඒවා අදාළ වගුවේ තීරු ලෙස ඇතුළත් කරනු ලැබේ, නමුත් ඒවායේ අගය 'NULL' විය හැක.",
            "ඒවා සම්පූර්ණයෙන්ම දත්ත සමුදායෙන් ඉවත් කරයි.",
            "ඒවා සෑම විටම ප්‍රාථමික යතුරු (Primary Keys) බවට පත් කරයි.",
            "ඒවා අනිවාර්යයෙන්ම අගයක් තිබිය යුතු තීරු බවට පත් කරයි."
        ],
        correctAnswerIndex: 1,
        explanation: "විකල්ප උපලක්ෂණයක් (Optional Attribute) යනු යම් භූතාර්ථ අවස්ථාවකට අගයක් තිබිය හැකි නමුත් අනිවාර්ය නොවන උපලක්ෂණයකි. Relational Schema වෙත පරිවර්තනය කිරීමේදී, එය අදාළ වගුවේ සාමාන්‍ය තීරුවක් ලෙස ඇතුළත් වන නමුත්, එහි අගය 'NULL' (ශූන්‍ය) විය හැකි ලෙස නිර්වචනය කරනු ලැබේ."
    },
    {
        questionText: "ER රූපසටහනක ඇති 'එකතුව' (Aggregation) සංකල්පය Relational Schema එකකට පරිවර්තනය කිරීමේදී සාමාන්‍යයෙන් කෙසේ හැසිරේද?",
        options: [
            "එය සාමාන්‍ය One-to-Many සම්බන්ධතාවක් බවට පත් වේ.",
            "එය Relational Model හි සෘජුව නිරූපණය කළ නොහැකි බැවින් ඉවත් කරනු ලැබේ.",
            "එය අදාළ සම්බන්ධතාවට සහභාගී වන භූතාර්ථ වල ප්‍රාථමික යතුරු අඩංගු නව වගුවක් නිර්මාණය කිරීමෙන් නිරූපණය කෙරේ.",
            "එය වෙනම ප්‍රාථමික යතුරක් සහිත නව භූතාර්ථයක් බවට පත් වේ.",
            "එය බොහෝ විට මැදිහත් වගුවක් (Junction Table) මගින් නිරූපණය වේ."
        ],
        correctAnswerIndex: 2,
        explanation: "එකතුව (Aggregation) යනු සම්බන්ධතාවයක් භූතාර්ථයක් ලෙස සලකන සංකල්පයකි. මෙය Relational Model වෙත පරිවර්තනය කිරීමේදී, සම්බන්ධතාවයට සහභාගී වන භූතාර්ථවල ප්‍රාථමික යතුරු අඩංගු වන නව වගුවක් (බොහෝ විට මැදිහත් වගුවකට සමාන) නිර්මාණය කිරීමෙන් නිරූපණය කෙරේ. මෙම නව වගුවට තමන්ගේම උපලක්ෂණ සහ සම්බන්ධතා තිබිය හැක."
    },
    {
        questionText: "දත්ත සමුදාය සැලසුම් කිරීමේදී 'සම්බන්ධක ප්‍රමාණයනය' (Relationship Transformation) සිදු කිරීමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "දත්තවල පුනරාවර්තනය (Redundancy) වැඩි කිරීම.",
            "ER රූපසටහනේ ඇති සම්බන්ධතා, Relational Database Management System (RDBMS) එකක ක්‍රියාත්මක කළ හැකි ආකාරයට (වගු සහ යතුරු භාවිතයෙන්) විධිමත් කිරීම.",
            "දත්ත සමුදායේ ක්‍රියාකාරිත්වය අඩු කිරීම.",
            "දත්ත සමුදායේ සංකීර්ණත්වය වැඩි කිරීම.",
            "පරිශීලකයින්ට දත්ත වෙත ප්‍රවේශ වීම දුෂ්කර කිරීම."
        ],
        correctAnswerIndex: 1,
        explanation: "සම්බන්ධක ප්‍රමාණයනය (Relationship Transformation) යනු ER රූපසටහනේ සංකල්පීයව නිරූපණය කර ඇති සම්බන්ධතා, Relational Model හි තාර්කික ව්‍යුහය (වගු අතර ප්‍රාථමික සහ ආගන්තුක යතුරු සබැඳි) බවට පරිවර්තනය කිරීමයි. මෙහි ප්‍රධාන අරමුණ වන්නේ දත්ත සමුදායේ කාර්යක්ෂමතාව, අඛණ්ඩතාව සහ කළමනාකරණය පහසු කිරීම සඳහා සම්බන්ධතා නිවැරදිව හා විධිමත්ව නිරූපණය කිරීමයි."
    },
    {
        questionText: "ER රූපසටහනක 'බහු උපලක්ෂණයක්' (Multi-valued Attribute) Relational Schema එකකට පරිවර්තනය කිරීමේදී එහි ප්‍රතිඵලය කුමක්ද?",
        options: [
            "එය අදාළ භූතාර්ථය ගබඩා කරන වගුවේම වෙනම තීරුවක් බවට පත් වේ.",
            "එය නව වගුවක් ලෙස නිර්මාණය වන අතර, මූලික භූතාර්ථයේ ප්‍රාථමික යතුර එම නව වගුවේ ආගන්තුක යතුරක් ලෙස භාවිතා වේ.",
            "එය මුළුමනින්ම නොසලකා හරිනු ලැබේ.",
            "එය එම භූතාර්ථයේ ප්‍රාථමික යතුරේ කොටසක් බවට පත් වේ.",
            "එය තවදුරටත් බෙදිය නොහැකි තනි පරමාණුක (Atomic) අගයක් බවට පත් වේ."
        ],
        correctAnswerIndex: 1,
        explanation: "බහු අගය උපලක්ෂණයක් (Multi-valued Attribute) යනු තනි භූතාර්ථ අවස්ථාවකට අගයන් කිහිපයක් තිබිය හැකි උපලක්ෂණයකි. Relational Schema වෙත පරිවර්තනය කිරීමේදී, දත්ත පුනරාවර්තනය වළක්වා ගැනීම සඳහා, එය මූලික භූතාර්ථයේ ප්‍රාථමික යතුර ආගන්තුක යතුරක් ලෙස අඩංගු නව වගුවක් ලෙස නිර්මාණය කෙරේ. මෙම නව වගුව මගින් බහු අගය උපලක්ෂණයේ සෑම අගයක්ම අද්විතීයව ගබඩා කිරීමට ඉඩ සලසයි."
    },
    // 8.5 සම්බන්ධක දත්ත සමුදාය ආකෘතියේ ප්‍රධාන සංරචක විස්තර කරයි.
    {
        questionText: "දත්ත සමුදායක 'සම්බන්ධතාවක්' (Relation) ලෙස හැඳින්වෙන්නේ කුමක්ද?",
        options: [
            "වගුවක්",
            "දත්ත පේළියක්",
            "දත්ත තීරුවක්",
            "වගු අතර සම්බන්ධයක්",
            "තොරතුරු ගබඩා කරන ගොනුවක්"
        ],
        correctAnswerIndex: 0,
        explanation: "සම්බන්ධක දත්ත සමුදාය ආකෘතියේදී, දත්ත ගබඩා කරනු ලබන්නේ වගු (Tables) ලෙසය. මෙම වගු 'සම්බන්ධතා' (Relations) ලෙස ද හැඳින්වේ. වගුවක තීරු උපලක්ෂණ (Attributes) ලෙසත්, පේළි උපලැසි (Tuples) ලෙසත් හැඳින්වේ. අනෙකුත් විකල්ප වගුවක කොටස් හෝ වගු අතර සම්බන්ධතා පැහැදිලි කළත්, සම්බන්ධතාවක් යනු සම්පූර්ණ වගුවකි."
    },
    {
        questionText: "ප්‍රාථමික යතුරක් (Primary Key) පිළිබඳව පහත සඳහන් ප්‍රකාශ අතරින් වඩාත් නිවැරදි වන්නේ කුමක්ද?",
        options: [
            "එය වගුවක සෑම පේළියක්ම අනන්‍යව හඳුනා ගන්නා තීරුවක් හෝ තීරු සමූහයක් වන අතර, එහි අගයන් අනිවාර්යයෙන්ම අනන්‍ය හා NULL නොවිය යුතුය.",
            "එය වගුවක දත්ත අද්විතීය විය යුතු බව සහතික කරන තීරුවක් වන අතර, එහි NULL අගයන් තිබිය හැක.",
            "එය වගු දෙකක් අතර සම්බන්ධතාවක් ඇති කිරීමට භාවිතා කරන තීරුවක් වන අතර, එය වෙනත් වගුවක ප්‍රාථමික යතුරකට යොමු වේ.",
            "එය යම් තීරුවකට අනිවාර්යයෙන්ම අගයක් තිබිය යුතු බව නියම කරන සම්බාධකයකි.",
            "එය දත්ත ඇතුළත් කිරීමේදී දත්තවල වලංගුභාවය පරීක්ෂා කිරීම සඳහා භාවිතා කරන කොන්දේසියකි."
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රාථමික යතුරක මූලික ලක්ෂණ වන්නේ එය වගුවක සෑම පේළියක්ම අනන්‍යව හඳුනා ගැනීම (uniqueness) සහ එහි කිසි විටෙකත් NULL අගයන් අඩංගු නොවීම (non-nullability) ය. මෙය දත්ත සමුදායේ අඛණ්ඩතාව (Integrity) පවත්වා ගැනීමට අත්‍යවශ්‍ය වේ. අනන්‍ය සම්බාධක (Unique Constraint) NULL අගයන්ට ඉඩ දිය හැකි අතර, ආගන්තුක යතුරු (Foreign Key) යනු වගු සම්බන්ධ කිරීමට භාවිතා කරන ඒවාය. අනෙකුත් විකල්ප වැරදි ප්‍රකාශ හෝ වෙනත් සම්බාධක වර්ග පිළිබඳව වේ."
    },
    {
        questionText: "වගු දෙකක් අතර 'එකට-බොහෝ' (One-to-Many) සම්බන්ධතාවක් වඩාත් හොඳින් නිරූපණය කරන්නේ කුමන අවස්ථාවකින්ද?",
        options: [
            "එක් ගුරුවරයෙකුට සිසුන් කිහිප දෙනෙකු සිටිය හැකි අතර, එක් සිසුවෙකුට එක් ගුරුවරයෙකු පමණක් සිටිය හැකිය.",
            "එක් ගුරුවරයෙකුට සිසුන් කිහිප දෙනෙකු සිටිය හැකි අතර, එක් සිසුවෙකුට ගුරුවරුන් කිහිප දෙනෙකු සිටිය හැකිය.",
            "එක් පුරවැසියෙකුට එක් ජාතික හැඳුනුම්පත් අංකයක් පමණක් තිබිය හැකි අතර, එක් ජාතික හැඳුනුම්පත් අංකයක් එක් පුරවැසියෙකුට පමණක් අයත් වේ.",
            "එක් පොතකට කතුවරුන් කිහිප දෙනෙකු සිටිය හැකි අතර, එක් කතුවරයෙකුට පොත් කිහිපයක් ලිවිය හැකිය.",
            "එක් පාරිභෝගිකයෙකුට එක් ඇණවුමක් පමණක් කළ හැකි අතර, එක් ඇණවුමක් එක් පාරිභෝගිකයෙකුට පමණක් අයත් වේ."
        ],
        correctAnswerIndex: 0,
        explanation: "එකට-බොහෝ (One-to-Many) සම්බන්ධතාවක් යනු එක් වගුවක එක් වාර්තාවක් දෙවන වගුවක වාර්තා එකකට හෝ කිහිපයකට සම්බන්ධ වන නමුත්, දෙවන වගුවක එක් වාර්තාවක් පළමු වගුවේ එක් වාර්තාවකට පමණක් සම්බන්ධ වන අවස්ථාවකි. 'ගුරුවරයෙකු' සහ 'සිසුන්' අතර සම්බන්ධතාවය මෙයට කදිම උදාහරණයකි. (එක් ගුරුවරයෙකු සිසුන් කිහිප දෙනෙකුට උගන්වයි, නමුත් එක් සිසුවෙකුට ඇත්තේ එක් ගුරුවරයෙකු පමණක් යැයි උපකල්පනය කළහොත්). අනෙකුත් විකල්ප එකට-එක (One-to-One) හෝ බොහෝ-බොහෝ (Many-to-Many) සම්බන්ධතා නිරූපණය කරයි."
    },
    {
        questionText: "දත්ත සමුදායක 'Table Check Constraint' එකක ප්‍රධාන කාර්යභාරය කුමක්ද?",
        options: [
            "යම් තීරුවක හෝ වගුවක දත්ත සඳහා යම් කොන්දේසියක් සත්‍ය විය යුතු බව නියම කිරීම.",
            "යම් තීරුවක අගයන් අද්විතීය විය යුතු බව සහතික කිරීම.",
            "යම් තීරුවකට අනිවාර්යයෙන්ම අගයක් තිබිය යුතු බව නියම කිරීම.",
            "වගු දෙකක් අතර සම්බන්ධතාවක් ඇති කිරීමට භාවිතා කරන තීරුවක් ලෙස ක්‍රියා කිරීම.",
            "වගුවක සෑම පේළියක්ම අනන්‍යව හඳුනා ගැනීමට උපකාර කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "Table Check Constraint යනු දත්ත ඇතුළත් කිරීමේදී හෝ යාවත්කාලීන කිරීමේදී යම් තීරුවක හෝ වගුවක දත්ත අගයන් නිශ්චිත කොන්දේසියකට අනුකූලදැයි පරීක්ෂා කිරීම සඳහා භාවිතා කරන සම්බාධකයකි. උදාහරණයක් ලෙස, 'වයස' තීරුව 18 ට වැඩි විය යුතු බවට කොන්දේසියක් දැමීම. අනෙකුත් විකල්ප අනන්‍ය සම්බාධක (Unique), අභිශුන්‍ය නොවන සම්බාධක (NOT NULL), ආගන්තුක යතුරු (Foreign Key) සහ ප්‍රාථමික යතුරු (Primary Key) වල කාර්යයන් විස්තර කරයි."
    },
    {
        questionText: "'NOT NULL Constraint' එකක් නොමැතිව ප්‍රාථමික යතුරක් (Primary Key) නිර්මාණය කළහොත් ඇතිවන ගැටලුව කුමක්ද?",
        options: [
            "එම ප්‍රාථමික යතුරට NULL අගයන් ඇතුළත් කිරීමට ඉඩ ලැබෙන අතර, එය පේළි අනන්‍යව හඳුනා ගැනීමේ හැකියාව නැති කරයි.",
            "එය අද්විතීය අගයන් ඇතුළත් කිරීමට ඇති හැකියාව සීමා කරයි.",
            "වගු අතර සම්බන්ධතා ඇති කිරීමට ඇති හැකියාව අහිමි වේ.",
            "දත්ත සමුදායේ ප්‍රමාණය අනවශ්‍ය ලෙස වැඩි වේ.",
            "දත්ත යාවත්කාලීන කිරීමේදී විෂමතා ඇති වීමට ඉඩ සලසයි."
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රාථමික යතුරක අනිවාර්ය ලක්ෂණයක් වන්නේ එය කිසි විටෙකත් NULL අගයන් නොගැනීමයි. 'NOT NULL' සම්බාධකය අනිවාර්යයෙන්ම ප්‍රාථමික යතුරක් මත පවතී. යම් හෙයකින් එයට NULL අගයක් ඇතුළත් වීමට ඉඩ ලැබුණහොත්, එම පේළිය අනන්‍යව හඳුනා ගැනීමේ හැකියාව නැති වී යයි. මෙය දත්ත සමුදායේ අඛණ්ඩතාවට (Integrity) බරපතල බලපෑමක් එල්ල කරයි."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදායක උපලක්ෂණ (Attributes) සහ උපලැසි (Tuples) යන්නෙන් අදහස් වන්නේ කුමක්ද?",
        options: [
            "උපලක්ෂණ යනු වගුවක තීරු වන අතර, උපලැසි යනු එම තීරුවල අගයන්ගෙන් සැදුම්ලත් පේළි වේ.",
            "උපලක්ෂණ යනු වගුවක පේළි වන අතර, උපලැසි යනු එම පේළිවල අඩංගු තීරු වේ.",
            "උපලක්ෂණ යනු දත්ත සමුදායේ මුළු ප්‍රමාණය වන අතර, උපලැසි යනු දත්ත වර්ග වේ.",
            "උපලක්ෂණ යනු දත්ත සමුදායේ ප්‍රාථමික යතුරු වන අතර, උපලැසි යනු ආගන්තුක යතුරු වේ.",
            "උපලක්ෂණ යනු වගු අතර සම්බන්ධතා වන අතර, උපලැසි යනු සම්බාධක වර්ග වේ."
        ],
        correctAnswerIndex: 0,
        explanation: "සම්බන්ධක දත්ත සමුදාය ආකෘතියේ මූලික සංරචක දෙකක් වන්නේ උපලක්ෂණ (Attributes) සහ උපලැසි (Tuples) ය. 'උපලක්ෂණ' යනු වගුවක තීරු (columns) වන අතර, ඒවා දත්ත පිළිබඳ විස්තරයක් සපයයි (උදා: නම, වයස). 'උපලැසි' යනු වගුවක පේළි (rows/records) වන අතර, ඒවා තනි වාර්තාවක් නියෝජනය කරයි, එනම්, උපලක්ෂණ මගින් නිර්වචනය කරන ලද දත්ත අගයන් සමූහයකි."
    },
    {
        questionText: "ආගන්තුක යතුරක් (Foreign Key) භාවිතා කිරීමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "වගු දෙකක් අතර සම්බන්ධතාවක් ඇති කිරීමට සහ දත්ත සමුදා අඛණ්ඩතාව පවත්වා ගැනීමට.",
            "වගුවක සෑම පේළියක්ම අද්විතීයව හඳුනා ගැනීමට.",
            "යම් තීරුවකට අනිවාර්යයෙන්ම අගයක් තිබිය යුතු බව සහතික කිරීමට.",
            "යම් තීරුවක අගයන් අද්විතීය විය යුතු බව නියම කිරීමට.",
            "දත්ත ඇතුළත් කිරීමේදී දත්තවල වලංගුභාවය පරීක්ෂා කිරීමට."
        ],
        correctAnswerIndex: 0,
        explanation: "ආගන්තුක යතුරක් යනු එක් වගුවක තීරුවක් වන අතර, එය වෙනත් වගුවක ප්‍රාථමික යතුරක් වෙත යොමු වේ. මෙය වගු දෙකක් අතර තාර්කික සම්බන්ධතාවක් (logical relationship) ඇති කිරීමට මෙන්ම, දත්ත සමුදා අඛණ්ඩතාව (Referential Integrity) පවත්වා ගැනීමට ද අත්‍යවශ්‍ය වේ. අනෙකුත් විකල්ප ප්‍රාථමික යතුරු හෝ වෙනත් සම්බාධක වර්ගවල කාර්යභාරයන් වේ."
    },
    {
        questionText: "බොහෝ-බොහෝ (Many-to-Many) සම්බන්ධතාවක් සම්බන්ධක දත්ත සමුදායක සෘජුවම නිරූපණය නොකරන අතර, එය නිරාකරණය කරන්නේ කෙසේද?",
        options: [
            "සම්බන්ධක වගුවක් (Linking Table) හෙවත් සන්ධිස්ථාන වගුවක් (Junction Table) භාවිතා කරමින්, එය එකට-බොහෝ සම්බන්ධතා දෙකකට බෙදීමෙන්.",
            "එක් වගුවක ප්‍රාථමික යතුර, අනෙක් වගුවට ආගන්තුක යතුරක් ලෙස ඇතුළත් කිරීමෙන්.",
            "ප්‍රාථමික යතුරු දෙකක් එකතු කර සංයුක්ත යතුරක් (Composite Key) නිර්මාණය කිරීමෙන්.",
            "NULL අගයන් භාවිතා කරමින් දත්ත පුනරාවර්තනය අවම කිරීමෙන්.",
            "දත්ත සමුදාය ප්‍රමතකරණය (Normalization) කිරීමෙන් මෙම සම්බන්ධතාව ඉවත් කිරීමෙන්."
        ],
        correctAnswerIndex: 0,
        explanation: "බොහෝ-බොහෝ සම්බන්ධතා සෘජුවම සම්බන්ධක දත්ත සමුදායක නිරූපණය කළ නොහැක. ඒවා නිරාකරණය කරනු ලබන්නේ 'සම්බන්ධක වගුවක්' (Linking Table) හෝ 'සන්ධිස්ථාන වගුවක්' (Junction Table) හඳුන්වා දීමෙනි. මෙම සම්බන්ධක වගුව, මුල් වගු දෙකෙහි ප්‍රාථමික යතුරු ආගන්තුක යතුරු ලෙස අඩංගු කරමින්, බොහෝ-බොහෝ සම්බන්ධතාව එකට-බොහෝ සම්බන්ධතා දෙකකට බෙදා හරියි. අනෙකුත් විකල්ප සාවද්‍ය වන අතර, දත්ත සමුදායේ සැලසුමට හෝ අඛණ්ඩතාවට හානි කළ හැකිය."
    },
    {
        questionText: "Unique Constraint එකක් සහ Primary Key Constraint එකක් අතර ඇති ප්‍රධාන වෙනස කුමක්ද?",
        options: [
            "Unique Constraint එකකට NULL අගයන් එකක් තිබිය හැකි නමුත්, Primary Key එකකට NULL අගයන් තිබිය නොහැක.",
            "Unique Constraint එකකට NULL අගයන් තිබිය නොහැකි නමුත්, Primary Key එකකට NULL අගයන් එකක් තිබිය හැක.",
            "Unique Constraint එකක් වගුවකට එකක් පමණක් තිබිය හැකි නමුත්, Primary Key එකක් කිහිපයක් තිබිය හැක.",
            "Unique Constraint එකක් වගු අතර සම්බන්ධතා ඇති කිරීමට භාවිතා කරන නමුත්, Primary Key එකක් එසේ නොවේ.",
            "Unique Constraint එකක් දත්ත වර්ග නිර්වචනය කිරීමට භාවිතා කරන නමුත්, Primary Key එකක් දත්ත ප්‍රමාණය නිර්වචනය කරයි."
        ],
        correctAnswerIndex: 0,
        explanation: "Unique Constraint එකක් මගින් තීරුවක අගයන් අද්විතීය විය යුතු බව සහතික කරයි, නමුත් එහි එක් NULL අගයක් තිබිය හැක. කෙසේ වෙතත්, Primary Key Constraint එකක් මගින් තීරුවක අගයන් අද්විතීය විය යුතු බවට අමතරව, එය කිසි විටෙකත් NULL විය නොහැක. මෙය ඒවා අතර ඇති ප්‍රධාන වෙනසයි. ප්‍රාථමික යතුරක් සෑම විටම වගුවකට එකක් පමණක් වන අතර, Unique Keys කිහිපයක් තිබිය හැක."
    },
    {
        questionText: "සම්බන්ධක දත්ත සමුදායක 'සම්බාධක' (Constraints) ලෙස හඳුන්වන්නේ කුමක්ද?",
        options: [
            "දත්ත සමුදායක දත්තවල අඛණ්ඩතාව සහ වලංගුභාවය පවත්වා ගැනීම සඳහා භාවිතා කරන නීති රීති.",
            "වගු අතර ඇති සම්බන්ධතා වර්ග නිර්වචනය කරන යාන්ත්‍රණය.",
            "දත්ත ඇතුළත් කිරීමට, යාවත්කාලීන කිරීමට සහ මැකීමට භාවිතා කරන SQL විධාන.",
            "දත්ත ගබඩා කර ඇති භෞතික ස්ථානය පිළිබඳ තොරතුරු.",
            "දත්ත සමුදායට ප්‍රවේශ වීමට පරිශීලකයින්ට ඇති අවසරයන්."
        ],
        correctAnswerIndex: 0,
        explanation: "සම්බාධක (Constraints) යනු දත්ත සමුදායක ගබඩා කර ඇති දත්තවල නිරවද්‍යතාව, අඛණ්ඩතාව (Integrity) සහ වලංගුභාවය (Validity) සහතික කිරීම සඳහා භාවිතා කරන නීති රීති සමූහයකි. මේවා ප්‍රාථමික යතුරු, ආගන්තුක යතුරු, NULL නොවන සම්බාධක, අනන්‍ය සම්බාධක සහ වගු පරීක්ෂා සම්බාධක වැනි විවිධ වර්ගවලින් සමන්විත වේ. අනෙකුත් විකල්ප දත්ත සමුදායේ වෙනත් අංශ හෝ SQL විධාන විස්තර කරයි."
    },

    // 8.6 දත්ත සමුදාය පද්ධතියක ප්‍රධාන සංරචක විශ්ලේෂණය කරයි.
    {
        questionText: "දත්ත සමුදාය කළමනාකරණ පද්ධතියක් (DBMS) පිළිබඳව පහත සඳහන් ප්‍රකාශ අතරින් වඩාත් නිවැරදි වන්නේ කුමක්ද?",
        options: [
            "එය දත්ත සමුදායන් නිර්මාණය කිරීමට, කළමනාකරණය කිරීමට සහ ප්‍රවේශ වීමට භාවිතා කරන මෘදුකාංග පද්ධතියකි.",
            "එය දත්ත ගබඩා කර ඇති භෞතික දෘඪාංගයකි.",
            "එය දත්ත සමුදායක අන්තර්ගතය පමණක් නියෝජනය කරයි.",
            "එය දත්ත සමුදාය සැලසුම් කිරීමේ ක්‍රියාවලිය විස්තර කරන භාෂාවකි.",
            "එය දත්ත සමුදාය භාවිතා කරන්නන් පමණක් නියෝජනය කරයි."
        ],
        correctAnswerIndex: 0,
        explanation: "දත්ත සමුදාය කළමනාකරණ පද්ධතිය (DBMS) යනු දත්ත සමුදායන් නිර්මාණය කිරීමට, අර්ථ දැක්වීමට, ප්‍රවේශ වීමට, හැසිරවීමට සහ පරිපාලනය කිරීමට පරිශීලකයින්ට සහ යෙදුම් වලට ඉඩ සලසන මෘදුකාංග පද්ධතියකි. එය දත්ත සහ පරිශීලකයින් අතර අතුරු මුහුණතක් ලෙස ක්‍රියා කරයි. අනෙකුත් විකල්ප DBMS හි කාර්යභාරය වැරදියට අර්ථ දක්වයි."
    },
    {
        questionText: "දත්ත නිර්වචන භාෂාව (DDL) සහ දත්ත හැසිරුම් භාෂාව (DML) අතර ඇති ප්‍රධාන වෙනස වඩාත් නිවැරදිව පැහැදිලි කරන්නේ කුමන ප්‍රකාශයෙන්ද?",
        options: [
            "DDL දත්ත සමුදායක ව්‍යුහය නිර්මාණය කිරීමට හා වෙනස් කිරීමට භාවිතා කරන අතර, DML දත්ත සමුදායක දත්ත ඇතුළත් කිරීමට, යාවත්කාලීන කිරීමට සහ මැකීමට භාවිතා කරයි.",
            "DDL දත්ත සමුදායක දත්ත ඇතුළත් කිරීමට, යාවත්කාලීන කිරීමට සහ මැකීමට භාවිතා කරන අතර, DML දත්ත සමුදායක ව්‍යුහය නිර්මාණය කිරීමට හා වෙනස් කිරීමට භාවිතා කරයි.",
            "DDL දත්ත සමුදායට ප්‍රවේශ වීමට පරිශීලක අවසරයන් පාලනය කරන අතර, DML දත්ත සමුදායේ ගනුදෙනු පාලනය කරයි.",
            "DDL වගු අතර සම්බන්ධතා නිර්වචනය කරන අතර, DML දත්තවල අඛණ්ඩතාව පරීක්ෂා කරයි.",
            "DDL දත්ත සමුදාය තුළ දත්ත ගබඩා කරන ආකාරය පාලනය කරන අතර, DML දත්ත ප්‍රමතකරණය කරයි."
        ],
        correctAnswerIndex: 0,
        explanation: "DDL (Data Definition Language) යනු දත්ත සමුදායක යෝජනා ක්‍රමය (Schema) හෝ ව්‍යුහය (Structure) නිර්මාණය කිරීමට, වෙනස් කිරීමට සහ මැකීමට (උදා: CREATE TABLE, ALTER TABLE, DROP TABLE) භාවිතා කරන විධාන සමූහයකි. DML (Data Manipulation Language) යනු දත්ත සමුදාය තුළ ඇති දත්ත (Data) ඇතුළත් කිරීමට, යාවත්කාලීන කිරීමට, ලබා ගැනීමට සහ මැකීමට (උදා: INSERT, UPDATE, SELECT, DELETE) භාවිතා කරන විධාන සමූහයකි. මෙය ඒවා අතර ඇති මූලික වෙනසයි."
    },
    {
        questionText: "පවතින 'ශිෂ්‍ය' (Student) වගුවට 'උපන් දිනය' (DateOfBirth) නම් නව තීරුවක් (column) එක් කිරීමට භාවිතා කළ හැකි නිවැරදි SQL DDL විධානය කුමක්ද?",
        options: [
            "ALTER TABLE Student ADD COLUMN DateOfBirth DATE;",
            "ADD COLUMN DateOfBirth TO Student TABLE DATE;",
            "INSERT INTO Student (DateOfBirth) VALUES (NULL);",
            "UPDATE Student SET DateOfBirth = NULL;",
            "CREATE COLUMN DateOfBirth IN Student TABLE;"
        ],
        correctAnswerIndex: 0,
        explanation: "පවතින වගුවක ව්‍යුහය වෙනස් කිරීම සඳහා SQL හි 'ALTER TABLE' විධානය භාවිතා කරයි. නව තීරුවක් එකතු කිරීම සඳහා 'ADD COLUMN' ව්‍යුහය අනුගමනය කෙරේ. එබැවින්, 'ALTER TABLE Student ADD COLUMN DateOfBirth DATE;' යනු 'ශිෂ්‍ය' වගුවට 'DateOfBirth' නම් DATE දත්ත වර්ගයේ තීරුවක් එක් කිරීමට ඇති නිවැරදි DDL විධානයයි. අනෙකුත් විකල්ප සාවද්‍ය SQL ව්‍යුහයන් හෝ DML විධාන වේ."
    },
    {
        questionText: "'Employee' වගුවෙන් 'employee_id' 101 වන සේවකයාගේ 'salary' 50000 ලෙස වෙනස් කිරීමට භාවිතා කරන නිවැරදි SQL DML විධානය කුමක්ද?",
        options: [
            "UPDATE Employee SET salary = 50000 WHERE employee_id = 101;",
            "MODIFY Employee salary = 50000 WHERE employee_id = 101;",
            "ALTER Employee SET salary = 50000 WHERE employee_id = 101;",
            "CHANGE Employee salary TO 50000 IF employee_id = 101;",
            "INSERT INTO Employee (salary) VALUES (50000) WHERE employee_id = 101;"
        ],
        correctAnswerIndex: 0,
        explanation: "දත්ත සමුදායක පවතින දත්ත වෙනස් කිරීම සඳහා DML හි 'UPDATE' විධානය භාවිතා කරයි. 'SET' clause එක මගින් වෙනස් කළ යුතු තීරුව සහ නව අගය සඳහන් කරන අතර, 'WHERE' clause එක මගින් වෙනස් කළ යුතු පේළි නිශ්චිතව හඳුනා ගනී. එබැවින්, 'UPDATE Employee SET salary = 50000 WHERE employee_id = 101;' යනු නිවැරදි DML විධානයයි. අනෙකුත් විකල්ප වැරදි SQL ව්‍යුහයන් වේ."
    },
    {
        questionText: "SQL හි 'DROP TABLE' සහ 'DELETE FROM' විධාන අතර ඇති මූලික වෙනස කුමක්ද?",
        options: [
            "'DROP TABLE' වගුවෙහි සම්පූර්ණ ව්‍යුහය සහ දත්ත මකා දමන අතර, 'DELETE FROM' වගුවෙහි දත්ත පමණක් මකා දමයි, ව්‍යුහය ඉතිරි කරයි.",
            "'DELETE FROM' වගුවෙහි සම්පූර්ණ ව්‍යුහය සහ දත්ත මකා දමන අතර, 'DROP TABLE' වගුවෙහි දත්ත පමණක් මකා දමයි, ව්‍යුහය ඉතිරි කරයි.",
            "මෙම විධාන දෙකම එකම කාර්යය ඉටු කරයි, නමුත් ඒවා විවිධ දත්ත සමුදාය පද්ධතිවල භාවිතා වේ.",
            "'DROP TABLE' දත්ත සමුදාය මකා දමන අතර, 'DELETE FROM' වගු මකා දමයි.",
            "'DROP TABLE' DML විධානයක් වන අතර, 'DELETE FROM' DDL විධානයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "'DROP TABLE' යනු DDL විධානයක් වන අතර, එය දත්ත සමුදායෙන් වගුවක සම්පූර්ණ නිර්වචනය (ව්‍යුහය සහ එහි අඩංගු සියලුම දත්ත) ස්ථිරවම ඉවත් කරයි. 'DELETE FROM' යනු DML විධානයක් වන අතර, එය වගුවකින් පේළි (දත්ත) පමණක් ඉවත් කරයි, නමුත් වගුවෙහි ව්‍යුහය සහ තීරු නිර්වචන දත්ත සමුදායේ පවතී. මෙය ඒවා අතර ඇති ඉතා වැදගත් වෙනසකි."
    },
    {
        questionText: "SQL හි 'SELECT' විධානයේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "දත්ත සමුදායෙන් දත්ත ලබා ගැනීම සඳහා.",
            "දත්ත සමුදායකට නව දත්ත ඇතුළත් කිරීම සඳහා.",
            "පවතින දත්ත යාවත්කාලීන කිරීම සඳහා.",
            "වගුවක ව්‍යුහය වෙනස් කිරීම සඳහා.",
            "සම්පූර්ණ දත්ත සමුදායක් මකා දැමීම සඳහා."
        ],
        correctAnswerIndex: 0,
        explanation: "SQL හි 'SELECT' විධානය යනු DML (Data Manipulation Language) කාණ්ඩයට අයත් මූලිකම විධානයකි. එහි ප්‍රධාන අරමුණ වන්නේ දත්ත සමුදායෙන් එකක් හෝ කිහිපයක් වගු වලින් දත්ත ආපසු ලබා ගැනීම (retrieve) යි. අනෙකුත් විකල්ප INSERT (ඇතුළත් කිරීම), UPDATE (යාවත්කාලීන කිරීම), ALTER TABLE (වගු වෙනස් කිරීම) සහ DROP DATABASE (දත්ත සමුදාය මැකීම) යන විධානවල කාර්යයන් විස්තර කරයි."
    },
    {
        questionText: "'Books' වගුවේ ඇති 'title' සහ 'author' තීරු සහ 'Authors' වගුවේ ඇති 'author_id' සහ 'author_name' තීරු භාවිතයෙන්, පොතක මාතෘකාවට අදාළව කතුවරයාගේ නම ලබා ගැනීමට වඩාත් සුදුසු SQL 'INNER JOIN' විධානය කුමක්ද?",
        options: [
            "SELECT B.title, A.author_name FROM Books B INNER JOIN Authors A ON B.author_id = A.author_id;",
            "SELECT B.title, A.author_name FROM Books B JOIN Authors A WHERE B.author_id = A.author_id;",
            "SELECT Books.title, Authors.author_name FROM Books, Authors WHERE Books.author_id = Authors.author_id;",
            "JOIN Books AND Authors ON Books.author_id = Authors.author_id;",
            "RETRIEVE title, author_name FROM Books, Authors JOIN;"
        ],
        correctAnswerIndex: 0,
        explanation: "'INNER JOIN' මෙහෙයුම වගු දෙකකින් පොදු තීරුවක් (සාමාන්‍යයෙන් ආගන්තුක යතුරක් සහ ප්‍රාථමික යතුරක්) මත පදනම්ව ගැලපෙන පේළි ඒකාබද්ධ කරයි. ලබා දී ඇති තත්වයට අනුව, 'Books' වගුවේ ඇති 'author_id' සහ 'Authors' වගුවේ ඇති 'author_id' අතර සම්බන්ධතාවක් පවතී. 'SELECT B.title, A.author_name FROM Books B INNER JOIN Authors A ON B.author_id = A.author_id;' යනු නිවැරදි ව්‍යුහයයි. 'B' සහ 'A' යනු වගු සඳහා ලබා දී ඇති අන්වර්ථ නාම (aliases) වේ. අනෙකුත් විකල්ප වැරදි SQL ව්‍යුහයන් වේ."
    },
    {
        questionText: "දත්ත සමුදායකට නව ගනුදෙනුකරුවෙකුගේ දත්ත ඇතුළත් කිරීම සඳහා භාවිතා කළ හැකි නිවැරදි SQL DML විධානය කුමක්ද? (පාරිභෝගික ID: 10, නම: 'අරුණ', නගරය: 'කොළඹ')",
        options: [
            "INSERT INTO Customers (CustomerID, Name, City) VALUES (10, 'අරුණ', 'කොළඹ');",
            "ADD Customer (10, 'අරුණ', 'කොළඹ') TO Customers;",
            "CREATE Customer (CustomerID=10, Name='අරුණ', City='කොළඹ');",
            "UPDATE Customers SET CustomerID=10, Name='අරුණ', City='කොළඹ';",
            "LOAD Customers VALUES (10, 'අරුණ', 'කොළඹ');"
        ],
        correctAnswerIndex: 0,
        explanation: "දත්ත සමුදායක වගුවකට නව දත්ත පේළියක් ඇතුළත් කිරීම සඳහා DML හි 'INSERT INTO' විධානය භාවිතා කරයි. මෙම විධානය මගින් දත්ත ඇතුළත් කළ යුතු වගුවේ නම, දත්ත ඇතුළත් කළ යුතු තීරු (විකල්ප වශයෙන්) සහ එම තීරුවලට අදාළ අගයන් අනුපිළිවෙලින් සඳහන් කළ යුතුය. 'INSERT INTO Customers (CustomerID, Name, City) VALUES (10, 'අරුණ', 'කොළඹ');' යනු නිවැරදි DML විධානයයි."
    },
    {
        questionText: "දත්ත සමුදායකින් සම්පූර්ණ දත්ත සමුදායක්ම ස්ථිරවම ඉවත් කිරීමට භාවිතා කරන SQL විධානය කුමක්ද?",
        options: [
            "DROP DATABASE database_name;",
            "DELETE DATABASE database_name;",
            "REMOVE DATABASE database_name;",
            "ERASE DATABASE database_name;",
            "DROP ALL TABLES IN database_name;"
        ],
        correctAnswerIndex: 0,
        explanation: "සම්පූර්ණ දත්ත සමුදායක්ම එහි ඇති සියලුම වගු, දත්ත සහ නිර්වචන සමඟින් ස්ථිරවම දත්ත සමුදා කළමනාකරණ පද්ධතියෙන් ඉවත් කිරීම සඳහා SQL DDL හි 'DROP DATABASE' විධානය භාවිතා කරයි. මෙය ඉතා ප්‍රබල විධානයක් වන අතර, එය ඉතා ප්‍රවේශමෙන් භාවිතා කළ යුතුය, මන්ද එය ඉවත් කළ දත්ත ආපසු ලබා ගැනීමට අපහසු විය හැකි බැවිනි. අනෙකුත් විකල්ප සාවද්‍ය විධාන හෝ අපේක්ෂිත ක්‍රියාකාරීත්වය සඳහා අසම්පූර්ණ විධාන වේ."
    },
    {
        questionText: "වගුවකට ප්‍රාථමික යතුරක් (Primary Key) අනුයෝජනය කිරීමට භාවිතා කරන SQL DDL විධානය කුමක්ද, වගුව දැනටමත් පවතින්නේ නම්?",
        options: [
            "ALTER TABLE table_name ADD PRIMARY KEY (column_name);",
            "ADD PRIMARY KEY TO table_name (column_name);",
            "UPDATE table_name SET PRIMARY KEY (column_name);",
            "CREATE PRIMARY KEY ON table_name (column_name);",
            "MODIFY table_name ADD PRIMARY KEY (column_name);"
        ],
        correctAnswerIndex: 0,
        explanation: "දැනට පවතින වගුවකට ප්‍රාථමික යතුරක් එකතු කිරීම සඳහා 'ALTER TABLE' විධානය සමඟ 'ADD PRIMARY KEY' ව්‍යුහය භාවිතා කරයි. 'ALTER TABLE table_name ADD PRIMARY KEY (column_name);' යනු නිවැරදි DDL විධානයයි. මෙය දත්ත සමුදායේ යෝජනා ක්‍රමය (schema) වෙනස් කිරීමකි. අනෙකුත් විකල්ප සාවද්‍ය හෝ DML විධාන වේ."
    },

    // 8.7 කාර්යසාධනය වැඩි දියුණු කිරීම සඳහා දත්ත සමුදාය ප්‍රපාතක සටහන ප්‍රමතකරණය (normalization) කරයි.
    {
        questionText: "දත්ත සමුදායක් ප්‍රමතකරණය (Normalization) කිරීමේ ප්‍රධාන අරමුණ කුමක්ද?",
        options: [
            "දත්ත පුනරුක්තිකරණය (Redundancy) අවම කිරීම සහ දත්ත විෂමතා (Anomalies) ඉවත් කිරීම.",
            "දත්ත ඇතුළත් කිරීමේ වේගය වැඩි කිරීම.",
            "දත්ත සමුදායේ ආරක්ෂාව වැඩි දියුණු කිරීම.",
            "දත්ත සමුදායේ ප්‍රමාණය වැඩි කිරීම.",
            "දත්ත සංකීර්ණතාව වැඩි කිරීම."
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රමතකරණය යනු දත්ත සමුදා සැලසුම් ක්‍රියාවලියක් වන අතර, එහි ප්‍රධාන අරමුණ වන්නේ දත්ත පුනරුක්තිකරණය (එකම දත්ත කිහිප වතාවක් ගබඩා කිරීම) අවම කිරීම සහ දත්ත විෂමතා (ඇතුළත් කිරීමේ, යාවත්කාලීන කිරීමේ, මැකීමේ දෝෂ) ඉවත් කිරීමයි. මෙය දත්තවල අඛණ්ඩතාව (Integrity) සහ කාර්යක්ෂමතාව (Efficiency) වැඩි දියුණු කරයි. අනෙකුත් විකල්ප ප්‍රමතකරණයේ සෘජු අරමුණු නොවේ."
    },
    {
        questionText: "'ඇතුළත් කිරීමේ විෂමතාවක්' (Insertion Anomaly) පිළිබඳව වඩාත් නිවැරදි උදාහරණය කුමක්ද?",
        options: [
            "නව සේවකයෙකුගේ දත්ත ඇතුළත් කිරීමේදී, ඔහු අයත් වන දෙපාර්තමේන්තුව පිළිබඳ කිසිදු සේවකයෙකු නොමැති නම් එම දෙපාර්තමේන්තුවේ තොරතුරු ඇතුළත් කිරීමට නොහැකි වීම.",
            "දෙපාර්තමේන්තුවක් ඉවත් කිරීමේදී, එම දෙපාර්තමේන්තුවේ සේවකයින් පිළිබඳ සියලු දත්ත ද අහම්බෙන් ඉවත් වීම.",
            "සේවකයෙකුගේ වැටුප වෙනස් කිරීමේදී, එකම සේවකයා පිළිබඳ වෙනත් ස්ථානවල ඇති වැටුප් තොරතුරු යාවත්කාලීන කිරීමට අමතක වීම.",
            "දත්ත සමුදායකට දත්ත ඇතුළත් කිරීමේදී දත්ත වර්ග නොගැලපීම.",
            "දත්ත සමුදායට දත්ත ඇතුළත් කිරීමට ප්‍රමාණවත් ඉඩක් නොමැති වීම."
        ],
        correctAnswerIndex: 0,
        explanation: "ඇතුළත් කිරීමේ විෂමතාවක් යනු නව දත්ත ඇතුළත් කිරීමට නොහැකි වීම, මන්දයත් තවත් අදාළ නොවන දත්ත ඇතුළත් කිරීමට සිදුවන බැවිනි. 'නව සේවකයෙකුගේ දත්ත ඇතුළත් කිරීමේදී, ඔහු අයත් වන දෙපාර්තමේන්තුව පිළිබඳ කිසිදු සේවකයෙකු නොමැති නම් එම දෙපාර්තමේන්තුවේ තොරතුරු ඇතුළත් කිරීමට නොහැකි වීම' මෙයට හොඳම උදාහරණයකි, මන්ද දෙපාර්තමේන්තුවේ තොරතුරු සේවකයෙකු සමඟ බද්ධ වී ඇති බැවින්. අනෙකුත් විකල්ප මැකීමේ හෝ යාවත්කාලීන කිරීමේ විෂමතා හෝ වෙනත් දෝෂ වර්ග වේ."
    },
    {
        questionText: "'යාවත්කාලීන කිරීමේ විෂමතාවක්' (Updating Anomaly) වඩාත් හොඳින් නිරූපණය කරන්නේ කුමන අවස්ථාවකින්ද?",
        options: [
            "එකම භාණ්ඩයක මිල දත්ත සමුදායේ ස්ථාන කිහිපයක ගබඩා වී ඇති විට, එක් ස්ථානයක මිල වෙනස් කර අනෙකුත් ස්ථානවල වෙනස් කිරීමට අමතක වීම නිසා ඇතිවන දත්ත නොගැලපීම.",
            "නව භාණ්ඩයක් පිළිබඳ තොරතුරු ඇතුළත් කිරීමට නොහැකි වීම, මන්දයත් එයට සැපයුම්කරුවෙකු සම්බන්ධ වී නොමැති බැවිනි.",
            "පාරිභෝගිකයෙකුගේ ඇණවුමක් ඉවත් කිරීමේදී, එම ඇණවුමට අදාළ සියලුම භාණ්ඩ තොරතුරු ද දත්ත සමුදායෙන් ඉවත් වීම.",
            "දත්ත යාවත්කාලීන කිරීමේදී දත්ත සමුදායේ ආරක්ෂක අවසරයන් නොමැති වීම.",
            "යාවත්කාලීන කිරීමට උත්සාහ කරන විට දත්ත සමුදාය අක්‍රිය වීම."
        ],
        correctAnswerIndex: 0,
        explanation: "යාවත්කාලීන කිරීමේ විෂමතාවක් යනු එකම දත්ත සමුදායේ ස්ථාන කිහිපයක පුනරාවර්තනය වී ඇති විට, එක් ස්ථානයක දත්ත වෙනස් කර අනෙක් ස්ථානවල වෙනස් කිරීමට අමතක වීම නිසා දත්තවල නොගැලපීම් ඇතිවීමයි. 'එකම භාණ්ඩයක මිල දත්ත සමුදායේ ස්ථාන කිහිපයක ගබඩා වී ඇති විට, එක් ස්ථානයක මිල වෙනස් කර අනෙකුත් ස්ථානවල වෙනස් කිරීමට අමතක වීම' යනු මෙයට කදිම උදාහරණයකි. අනෙකුත් විකල්ප ඇතුළත් කිරීමේ හෝ මැකීමේ විෂමතා වේ."
    },
    {
        questionText: "දත්ත සමුදායක 'කාර්‍යබද්ධ පරායත්තතාවක්' (Functional Dependency) ලෙස හැඳින්වෙන්නේ කුමක්ද?",
        options: [
            "වගුවක එක් තීරුවක අගය තවත් තීරුවක අගය අනන්‍යව තීරණය කරන සම්බන්ධතාව.",
            "වගු දෙකක් අතර ඇති සම්බන්ධතා වර්ගය.",
            "දත්ත සමුදාය තුළ දත්ත ගබඩා කර ඇති භෞතික ආකාරය.",
            "දත්ත සමුදායේ දත්ත පුනරුක්තිකරණය වන ආකාරය.",
            "දත්ත සමුදායක දත්ත වලංගුභාවය පරීක්ෂා කරන නීති රීති."
        ],
        correctAnswerIndex: 0,
        explanation: "කාර්‍යබද්ධ පරායත්තතාවක් (Functional Dependency) යනු දත්ත සමුදා වගුවක තීරු (attributes) අතර ඇති සම්බන්ධතාවකි. 'X -> Y' යන්නෙන් අදහස් වන්නේ තීරු සමූහය X හි අගය මගින් තීරු සමූහය Y හි අගය අනන්‍යව තීරණය කරන බවයි. මෙය ප්‍රමතකරණයේ පදනම වේ. අනෙකුත් විකල්ප සාවද්‍ය නිර්වචන වේ."
    },
    {
        questionText: "'ආංශික පරායත්තතාවක්' (Partial Functional Dependency) පිළිබඳව පහත සඳහන් ප්‍රකාශ අතරින් වඩාත් නිවැරදි වන්නේ කුමක්ද?",
        options: [
            "ප්‍රාථමික යතුරේ කොටසක් මත පමණක් රඳා පවතින පරායත්තතාවකි.",
            "ප්‍රාථමික යතුරේ සියලුම තීරු මත රඳා පවතින පරායත්තතාවකි.",
            "ප්‍රාථමික යතුර මත සෘජුවම රඳා නොපවතින, නමුත් ප්‍රාථමික යතුර මත රඳා පවතින වෙනත් තීරුවක් මත රඳා පවතින පරායත්තතාවකි.",
            "වගු දෙකක් අතර ඇති සම්බන්ධතාවකි.",
            "දත්ත සමුදායක දත්තවල අඛණ්ඩතාව පවත්වා ගැනීමේ ක්‍රමවේදයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "ආංශික පරායත්තතාවක් (Partial Functional Dependency) යනු යම් තීරුවක් (non-key attribute) වගුවේ ප්‍රාථමික යතුරේ කොටසක් මත පමණක් රඳා පවතින අවස්ථාවකි. මෙය 2NF (Second Normal Form) වෙත ළඟා වීමේදී ඉවත් කළ යුතු විෂමතාවයකි. අනෙකුත් විකල්ප පූර්ණ පරායත්තතා (Full Functional Dependency) හෝ සංක්‍රාන්ති පරායත්තතා (Transitive Dependency) පිළිබඳව වේ."
    },
    {
        questionText: "'සංක්‍රාන්ති පරායත්තතාවක්' (Transitive Dependency) වඩාත් නිවැරදිව විස්තර කරන්නේ කුමන අවස්ථාවකින්ද?",
        options: [
            "ප්‍රාථමික යතුර මත සෘජුවම රඳා නොපවතින, නමුත් ප්‍රාථමික යතුර මත රඳා පවතින වෙනත් ප්‍රධාන නොවන තීරුවක් මත රඳා පවතින තීරුවකි.",
            "ප්‍රාථමික යතුරේ සියලුම තීරු මත රඳා පවතින තීරුවකි.",
            "ප්‍රාථමික යතුරේ කොටසක් මත පමණක් රඳා පවතින තීරුවකි.",
            "වගු දෙකක් අතර දත්ත හුවමාරු කිරීමේ ක්‍රියාවලියකි.",
            "දත්ත සමුදායක දත්ත ගලා යාම පාලනය කරන යාන්ත්‍රණයකි."
        ],
        correctAnswerIndex: 0,
        explanation: "සංක්‍රාන්ති පරායත්තතාවක් (Transitive Dependency) යනු යම් තීරුවක් (non-key attribute) ප්‍රාථමික යතුර මත සෘජුවම රඳා නොපවතින, නමුත් ප්‍රාථමික යතුර මත රඳා පවතින වෙනත් ප්‍රධාන නොවන තීරුවක් මත රඳා පවතින අවස්ථාවකි (උදා: A → B සහ B → C නම්, A → C යනු සංක්‍රාන්ති පරායත්තතාවකි). මෙය 3NF (Third Normal Form) වෙත ළඟා වීමේදී ඉවත් කළ යුතු විෂමතාවයකි. අනෙකුත් විකල්ප අනෙකුත් පරායත්තතා වර්ග පිළිබඳව වේ."
    },
    {
        questionText: "ප්‍රථම ප්‍රමත අවස්ථාව (First Normal Form - 1NF) සඳහා සම්පූර්ණ කළ යුතු මූලික කොන්දේසිය කුමක්ද?",
        options: [
            "සියලුම තීරු වලට පරමාණුක (atomic) අගයන් තිබීම සහ පුනරාවර්තන කණ්ඩායම් (repeating groups) නොතිබීම.",
            "ආංශික පරායත්තතා (partial functional dependencies) නොතිබීම.",
            "සංක්‍රාන්ති පරායත්තතා (transitive dependencies) නොතිබීම.",
            "සෑම වගුවකටම ප්‍රාථමික යතුරක් තිබීම.",
            "සෑම තීරුවකටම අද්විතීය නමක් තිබීම."
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රථම ප්‍රමත අවස්ථාව (1NF) වෙත ළඟා වීමට නම්, වගුවක ඇති සියලුම තීරු වලට පරමාණුක (atomic) අගයන් තිබිය යුතුය (එනම්, තීරු වලට බහු අගයන් හෝ අගයන් සමූහයක් අඩංගු විය නොහැක), සහ පුනරාවර්තන කණ්ඩායම් (repeating groups) නොතිබිය යුතුය. මෙය දත්ත වගුගත කිරීමේ මූලිකම පියවරයි. අනෙකුත් විකල්ප 2NF සහ 3NF හි කොන්දේසි වේ."
    },
    {
        questionText: "දෙවන ප්‍රමත අවස්ථාව (Second Normal Form - 2NF) සඳහා සම්පූර්ණ කළ යුතු ප්‍රධාන කොන්දේසි මොනවාද?",
        options: [
            "වගුව 1NF හි තිබීම සහ ආංශික පරායත්තතා (partial functional dependencies) නොතිබීම.",
            "වගුව 1NF හි තිබීම සහ සංක්‍රාන්ති පරායත්තතා (transitive dependencies) නොතිබීම.",
            "වගුව 3NF හි තිබීම සහ සියලුම තීරු වලට පරමාණුක අගයන් තිබීම.",
            "සෑම තීරුවකටම අද්විතීය අගයන් තිබීම සහ NULL අගයන් නොතිබීම.",
            "වගු අතර ඇති සියලුම බොහෝ-බොහෝ (many-to-many) සම්බන්ධතා නිරාකරණය කර තිබීම."
        ],
        correctAnswerIndex: 0,
        explanation: "දෙවන ප්‍රමත අවස්ථාව (2NF) වෙත ළඟා වීමට නම්, වගුව අනිවාර්යයෙන්ම 1NF හි තිබිය යුතු අතර, කිසිදු ප්‍රධාන නොවන තීරුවක් ප්‍රාථමික යතුරේ කොටසක් මත පමණක් රඳා නොපැවතිය යුතුය. එනම්, ආංශික පරායත්තතා (partial functional dependencies) නොතිබිය යුතුය. අනෙකුත් විකල්ප වැරදි ප්‍රකාශ හෝ 3NF හි කොන්දේසි වේ."
    },
    {
        questionText: "තෙවන ප්‍රමත අවස්ථාව (Third Normal Form - 3NF) සඳහා සම්පූර්ණ කළ යුතු ප්‍රධාන කොන්දේසි මොනවාද?",
        options: [
            "වගුව 2NF හි තිබීම සහ සංක්‍රාන්ති පරායත්තතා (transitive dependencies) නොතිබීම.",
            "වගුව 1NF හි තිබීම සහ ආංශික පරායත්තතා නොතිබීම.",
            "සියලුම තීරු වලට පරමාණුක අගයන් තිබීම සහ පුනරාවර්තන කණ්ඩායම් නොතිබීම.",
            "සෑම තීරුවකටම අද්විතීය නමක් තිබීම සහ දත්ත වර්ග නිවැරදිව නිර්වචනය කර තිබීම.",
            "දත්ත සමුදායේ සියලුම වගු වල ප්‍රාථමික යතුරු සහ ආගන්තුක යතුරු නිවැරදිව නිර්වචනය කර තිබීම."
        ],
        correctAnswerIndex: 0,
        explanation: "තෙවන ප්‍රමත අවස්ථාව (3NF) වෙත ළඟා වීමට නම්, වගුව අනිවාර්යයෙන්ම 2NF හි තිබිය යුතු අතර, කිසිදු ප්‍රධාන නොවන තීරුවක් වෙනත් ප්‍රධාන නොවන තීරුවක් මත රඳා නොපැවතිය යුතුය. එනම්, සංක්‍රාන්ති පරායත්තතා (transitive dependencies) නොතිබිය යුතුය. මෙය දත්ත පුනරුක්තිකරණය සහ විෂමතා අවම කිරීම සඳහා තවත් වැදගත් පියවරකි. අනෙකුත් විකල්ප වැරදි ප්‍රකාශ හෝ 1NF සහ 2NF හි කොන්දේසි වේ."
    },
    {
        questionText: "ප්‍රමතකරණය නොකළ දත්ත සමුදා වගුවක 'මැකීමේ විෂමතාවක්' (Deletion Anomaly) ඇති වන්නේ කෙසේද?",
        options: [
            "යම් වාර්තාවක් මැකීමේදී, එම වාර්තාවට අදාළ, වෙනත් වැදගත් තොරතුරු ද අහම්බෙන් දත්ත සමුදායෙන් ඉවත් වීම.",
            "නව දත්ත ඇතුළත් කිරීමට නොහැකි වීම, මන්දයත් තවත් අදාළ නොවන දත්ත ඇතුළත් කිරීමට සිදුවන බැවිනි.",
            "එකම දත්ත කිහිප වතාවක් ගබඩා වී ඇති විට, එක් ස්ථානයක දත්ත වෙනස් කර අනෙක් ස්ථානවල වෙනස් කිරීමට අමතක වීම.",
            "දත්ත මැකීම සඳහා ප්‍රමාණවත් පරිශීලක අවසරයන් නොමැති වීම.",
            "දත්ත සමුදාය තුළ දත්ත ගබඩා කිරීමේදී ඉඩ ප්‍රමාණය ඉක්මවා යාම."
        ],
        correctAnswerIndex: 0,
        explanation: "මැකීමේ විෂමතාවක් (Deletion Anomaly) යනු යම් වාර්තාවක් (පේළියක්) දත්ත සමුදායකින් ඉවත් කිරීමේදී, එම වාර්තාවට අදාළ, නමුත් වෙනත් තීරු වල ගබඩා වී ඇති වැදගත් තොරතුරු ද අහම්බෙන් අහිමි වීමයි. මෙය සිදුවන්නේ දත්ත නිසි ලෙස ප්‍රමතකරණය නොකළ විටය. අනෙකුත් විකල්ප ඇතුළත් කිරීමේ හෝ යාවත්කාලීන කිරීමේ විෂමතා පිළිබඳව වේ."
    },
    {
        questionText: "ප්‍රමතකරණයේ 'ශුන්‍ය ප්‍රමත අවස්ථාව' (Zero Normal Form) යන්නෙන් අදහස් වන්නේ කුමක්ද?",
        options: [
            "කිසිදු ප්‍රමතකරණයක් සිදු නොකළ වගුවක්, එහි පුනරාවර්තන කණ්ඩායම් සහ පරමාණුක නොවන අගයන් තිබිය හැක.",
            "වගුවක් 1NF හි තිබීම, නමුත් 2NF සහ 3NF හි කොන්දේසි සපුරා නොතිබීම.",
            "වගුවක් සියලුම ප්‍රමතකරණ මට්ටම් සම්පූර්ණ කර තිබීම.",
            "දත්ත සමුදාය තුළ කිසිදු දත්තයක් අඩංගු නොවන හිස් වගුවක්.",
            "දත්ත සමුදායේ ආරක්ෂාව සම්බන්ධයෙන් වන මූලික මට්ටම."
        ],
        correctAnswerIndex: 0,
        explanation: "ශුන්‍ය ප්‍රමත අවස්ථාව (Zero Normal Form) යනු කිසිදු ප්‍රමතකරණයක් (normalization) සිදු නොකළ වගුවක් හෝ දත්ත එකතුවකි. මෙහි පුනරාවර්තන කණ්ඩායම් (repeating groups), පරමාණුක නොවන අගයන් (non-atomic values) සහ විවිධ ආකාරයේ පරායත්තතා (dependencies) අඩංගු විය හැක. මෙය දත්ත සමුදාය සැලසුම් කිරීමේදී ප්‍රමතකරණ ක්‍රියාවලිය ආරම්භ වන මූලිකම අවස්ථාවයි."
    },
    {
        questionText: "වගුවක් 1NF (First Normal Form) වෙත පත් කිරීමෙන් මූලික වශයෙන් ඉවත් වන්නේ කුමන ආකාරයේ දත්ත පුනරුක්තිකරණයක්ද?",
        options: [
            "තීරුවක බහු අගයන් හෝ පුනරාවර්තන කණ්ඩායම් (repeating groups) නිසා ඇතිවන පුනරුක්තිකරණය.",
            "ආංශික පරායත්තතා (partial functional dependencies) නිසා ඇතිවන පුනරුක්තිකරණය.",
            "සංක්‍රාන්ති පරායත්තතා (transitive dependencies) නිසා ඇතිවන පුනරුක්තිකරණය.",
            "සම්බන්ධක වගු (linking tables) භාවිතයෙන් ඇතිවන පුනරුක්තිකරණය.",
            "විවිධ වගු අතර එකම දත්ත තිබීම නිසා ඇතිවන පුනරුක්තිකරණය."
        ],
        correctAnswerIndex: 0,
        explanation: "1NF හි ප්‍රධාන අරමුණ වන්නේ තීරුවල බහු අගයන් හෝ පුනරාවර්තන කණ්ඩායම් (repeating groups) ඉවත් කිරීම සහ සෑම තීරුවකටම පරමාණුක (atomic) අගයන් ඇති බවට සහතික කිරීමයි. මෙය දත්ත පුනරුක්තිකරණය අවම කිරීමේ පළමු පියවරයි. අනෙකුත් විකල්ප 2NF සහ 3NF මගින් ඉවත් කරන පුනරුක්තිකරණ වර්ග වේ."
    },
    {
        questionText: "පහත දැක්වෙන දත්ත සමුදාය වගුවක, 'සේවක ID' (EmployeeID) ප්‍රාථමික යතුර ලෙසත්, 'දෙපාර්තමේන්තු නම' (DeptName) සහ 'දෙපාර්තමේන්තු ප්‍රධානියා' (DeptHead) වෙනත් තීරු ලෙසත් පවතී නම්, 'සේවකයාගේ නම' (EmpName) තීරුව 'සේවක ID' මත රඳා පවතී. නමුත්, 'දෙපාර්තමේන්තු ප්‍රධානියා' තීරුව 'දෙපාර්තමේන්තු නම' මත රඳා පවතින අතර, එය ප්‍රාථමික යතුර මත සෘජුවම රඳා නොපවතී. මෙය කුමන ආකාරයේ පරායත්තතාවක් නිරූපණය කරයිද?",
        options: [
            "සංක්‍රාන්ති පරායත්තතාවක් (Transitive Dependency)",
            "ආංශික පරායත්තතාවක් (Partial Functional Dependency)",
            "පූර්ණ පරායත්තතාවක් (Full Functional Dependency)",
            "අන්තර්-වගු පරායත්තතාවක් (Inter-table Dependency)",
            "ප්‍රාථමික නොවන පරායත්තතාවක් (Non-key Dependency)"
        ],
        correctAnswerIndex: 0,
        explanation: "මෙම තත්වය සංක්‍රාන්ති පරායත්තතාවක් (Transitive Dependency) නිරූපණය කරයි. සේවක ID → දෙපාර්තමේන්තු නම → දෙපාර්තමේන්තු ප්‍රධානියා යන දාමය මෙහි පවතී. එනම්, ප්‍රධාන නොවන තීරුවක් (දෙපාර්තමේන්තු ප්‍රධානියා) ප්‍රාථමික යතුර (සේවක ID) මත සෘජුවම රඳා නොපවතින, නමුත් ප්‍රාථමික යතුර මත රඳා පවතින වෙනත් ප්‍රධාන නොවන තීරුවක් (දෙපාර්තමේන්තු නම) මත රඳා පවතියි. මෙය 3NF වෙත ළඟා වීමේදී ඉවත් කළ යුතුය. අනෙකුත් විකල්ප වෙනත් පරායත්තතා වර්ග හෝ වැරදි අර්ථකථන වේ."
    },
    {
        questionText: "ප්‍රමතකරණය (Normalization) කිරීමෙන් දත්ත සමුදායේ 'කාර්යසාධනය' (Performance) කෙරෙහි ඇති වන දීර්ඝකාලීන බලපෑම කුමක්ද?",
        options: [
            "දත්ත පුනරුක්තිකරණය අඩු කිරීමෙන් සහ දත්ත අඛණ්ඩතාව වැඩි දියුණු කිරීමෙන් විමසුම් (queries) වඩාත් කාර්යක්ෂම වීම සහ දත්ත පවත්වාගෙන යාම පහසු වීම.",
            "සෑම විටම දත්ත ලබා ගැනීමේ (retrieval) වේගය අඩු වීම.",
            "දත්ත ගබඩා කිරීම සඳහා අවශ්‍ය ඉඩ ප්‍රමාණය වැඩි වීම.",
            "දත්ත සමුදාය සැලසුම් කිරීමේ ක්‍රියාවලිය වඩාත් සංකීර්ණ වීම.",
            "පරිශීලකයින්ට දත්ත වෙත ප්‍රවේශ වීම වඩාත් අපහසු වීම."
        ],
        correctAnswerIndex: 0,
        explanation: "ප්‍රමතකරණය මගින් දත්ත පුනරුක්තිකරණය අවම කරන අතර, දත්ත අඛණ්ඩතාව වැඩි දියුණු කරයි. මෙය දත්ත ගබඩා කිරීමේදී අවශ්‍ය ඉඩ ප්‍රමාණය අඩු කරන අතර, දත්ත යාවත්කාලීන කිරීම්, ඇතුළත් කිරීම් සහ මැකීම් වඩාත් කාර්යක්ෂම කරයි. දීර්ඝකාලීනව, අඩු පුනරුක්තිකරණය සහ ඉහළ අඛණ්ඩතාව හේතුවෙන් දත්ත සමුදාය විමසුම් වඩාත් වේගවත් වන අතර, සමස්ත කාර්යසාධනය වැඩි දියුණු වේ. දත්ත පවත්වාගෙන යාමද පහසු වේ. අනෙකුත් විකල්ප සාවද්‍ය බලපෑම් වේ."
    },
    {
        questionText: "වගුවක් 2NF (Second Normal Form) වෙත පත් කිරීමෙන් මූලික වශයෙන් ඉවත් වන්නේ කුමන ආකාරයේ දත්ත විෂමතාවක්ද?",
        options: [
            "ආංශික පරායත්තතා (Partial Functional Dependencies) නිසා ඇතිවන ඇතුළත් කිරීමේ, යාවත්කාලීන කිරීමේ සහ මැකීමේ විෂමතා.",
            "සංක්‍රාන්ති පරායත්තතා (Transitive Dependencies) නිසා ඇතිවන විෂමතා.",
            "පුනරාවර්තන කණ්ඩායම් (Repeating Groups) නිසා ඇතිවන විෂමතා.",
            "ප්‍රාථමික යතුරු නොමැති වීම නිසා ඇතිවන විෂමතා.",
            "දත්ත වර්ග නොගැලපීම් නිසා ඇතිවන විෂමතා."
        ],
        correctAnswerIndex: 0,
        explanation: "2NF හි ප්‍රධාන අරමුණ වන්නේ ආංශික පරායත්තතා ඉවත් කිරීමයි. ආංශික පරායත්තතා මගින් ප්‍රාථමික යතුරේ කොටසක් මත රඳා පවතින ප්‍රධාන නොවන තීරු නිසා දත්ත පුනරුක්තිකරණය සහ ඇතුළත් කිරීමේ, යාවත්කාලීන කිරීමේ සහ මැකීමේ විෂමතා ඇතිවේ. 2NF මගින් මෙම විෂමතා අවම කරයි. අනෙකුත් විකල්ප 1NF හෝ 3NF මගින් විසඳන ගැටළු වේ."
    },
    {
        questionText: "ප්‍රාථමික යතුරේ සියලුම තීරු මත රඳා පවතින කාර්‍යබද්ධ පරායත්තතා (Functional Dependencies) ලෙස හඳුන්වන්නේ කුමක්ද?",
        options: [
            "පූර්ණ පරායත්තතා (Full Functional Dependencies)",
            "ආංශික පරායත්තතා (Partial Functional Dependencies)",
            "සංක්‍රාන්ති පරායත්තතා (Transitive Dependencies)",
            "බහු-අගය පරායත්තතා (Multi-valued Dependencies)",
            "ජාති-පරායත්තතා (Join Dependencies)"
        ],
        correctAnswerIndex: 0,
        explanation: "පූර්ණ පරායත්තතාවක් (Full Functional Dependency) යනු ප්‍රධාන නොවන තීරුවක් (non-key attribute) ප්‍රාථමික යතුරේ සියලුම තීරු මත පූර්ණ ලෙස රඳා පවතින අවස්ථාවකි. එනම්, ප්‍රාථමික යතුරේ කිසිදු කොටසකින් පමණක් එම තීරුව තීරණය කළ නොහැක. මෙය දත්ත සමුදා සැලසුමේදී අපේක්ෂිත තත්වයකි, විශේෂයෙන් 2NF සහ ඉන් ඔබ්බට. අනෙකුත් විකල්ප වෙනත් පරායත්තතා වර්ග වේ."
    }
];
